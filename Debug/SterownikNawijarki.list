
SterownikNawijarki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b468  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800b608  0800b608  0000c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9a4  0800b9a4  0000d160  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9a4  0800b9a4  0000c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9ac  0800b9ac  0000d160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9ac  0800b9ac  0000c9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9b0  0800b9b0  0000c9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800b9b4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec8  20000160  0800bb14  0000d160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002028  0800bb14  0000e028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001799c  00000000  00000000  0000d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c1d  00000000  00000000  00024b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  00028750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001055  00000000  00000000  00029c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b213  00000000  00000000  0002accd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b99b  00000000  00000000  00045ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972e5  00000000  00000000  0006187b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8b60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a0  00000000  00000000  000f8ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ff044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b5f0 	.word	0x0800b5f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800b5f0 	.word	0x0800b5f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <AD5254_SetValue>:
#include "main.h"

/**
 * @brief Ustawia wartość rezystancji dla wybranego kanału i adresu I2C.
 */
HAL_StatusTypeDef AD5254_SetValue(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t value) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
 80005ac:	4613      	mov	r3, r2
 80005ae:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2];
    data[0] = channel;
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 80005b4:	78bb      	ldrb	r3, [r7, #2]
 80005b6:	737b      	strb	r3, [r7, #13]

    return HAL_I2C_Master_Transmit(hi2c, AD5254_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 80005b8:	f107 020c 	add.w	r2, r7, #12
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2302      	movs	r3, #2
 80005c4:	2158      	movs	r1, #88	@ 0x58
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f002 f888 	bl	80026dc <HAL_I2C_Master_Transmit>
 80005cc:	4603      	mov	r3, r0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <AD5254_GetValue>:

/**
 * @brief Odczytuje wartość rezystancji z wybranego kanału i adresu I2C.
 */
HAL_StatusTypeDef AD5254_GetValue(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t *value) {
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b086      	sub	sp, #24
 80005da:	af02      	add	r7, sp, #8
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	460b      	mov	r3, r1
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Master_Transmit(hi2c, AD5254_I2C_ADDRESS, &channel, 1, HAL_MAX_DELAY) != HAL_OK) {
 80005e4:	f107 020b 	add.w	r2, r7, #11
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	2158      	movs	r1, #88	@ 0x58
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f002 f872 	bl	80026dc <HAL_I2C_Master_Transmit>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <AD5254_GetValue+0x2c>
        return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e009      	b.n	8000616 <AD5254_GetValue+0x40>
    }

    return HAL_I2C_Master_Receive(hi2c, AD5254_I2C_ADDRESS, value, 1, HAL_MAX_DELAY);
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	2158      	movs	r1, #88	@ 0x58
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f002 f962 	bl	80028d8 <HAL_I2C_Master_Receive>
 8000614:	4603      	mov	r3, r0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <CDC_SendResponse>:
	char response[30];
	snprintf(response, sizeof(response), "pwm%d=%d\r\n", PWMPort, pwm_val);
	CDC_Transmit_FS((uint8_t*) response, strlen(response));
}

void CDC_SendResponse(const char *response) {
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	//char buffer[100];
	//snprintf(buffer, sizeof(buffer), "%s", response);
	CDC_Transmit_FS((uint8_t*) response, strlen(response));
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff fde4 	bl	80001f4 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29b      	uxth	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f009 f8e6 	bl	8009804 <CDC_Transmit_FS>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <CDC_ReceiveCallback>:

// Funkcja wywoływana przy odebraniu danych przez USB CDC
void CDC_ReceiveCallback(uint8_t *Buf, uint32_t Len) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]

	// Przetwarzanie otrzymanej komendy
	Buf[Len] = '\0';
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	4413      	add	r3, r2
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	if (message_ready == 1) {
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <CDC_ReceiveCallback+0x34>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d106      	bne.n	800066a <CDC_ReceiveCallback+0x2a>
		message_ready = 0;
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <CDC_ReceiveCallback+0x34>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
		CDC_ProcessCommand((char*) Buf, Len);
 8000662:	6839      	ldr	r1, [r7, #0]
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f9a7 	bl	80009b8 <CDC_ProcessCommand>
	}
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <trim_command>:
void CDC_Init(void) {
	CDC_PWM_Init();
	CDC_LED_Init();
}

void trim_command(char *trim) {
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	int i, j;
	for (i = 0, j = 0; trim[i] != '\0'; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	e01f      	b.n	80006ca <trim_command+0x52>
		if (trim[i] != ' ' && trim[i] != '\r' && trim[i] != '\n') {
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b20      	cmp	r3, #32
 8000694:	d016      	beq.n	80006c4 <trim_command+0x4c>
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b0d      	cmp	r3, #13
 80006a0:	d010      	beq.n	80006c4 <trim_command+0x4c>
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	d00a      	beq.n	80006c4 <trim_command+0x4c>
			trim[j++] = trim[i];
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	441a      	add	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	1c59      	adds	r1, r3, #1
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	4619      	mov	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	440b      	add	r3, r1
 80006c0:	7812      	ldrb	r2, [r2, #0]
 80006c2:	701a      	strb	r2, [r3, #0]
	for (i = 0, j = 0; trim[i] != '\0'; i++) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1d9      	bne.n	800068a <trim_command+0x12>
		}
	}
	trim[j] = '\0';
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <parse_command>:

int parse_command(const char *command, char *device, char *type, int *value) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09e      	sub	sp, #120	@ 0x78
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
	if (!command || !device || !type || !value) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d008      	beq.n	8000712 <parse_command+0x26>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d005      	beq.n	8000712 <parse_command+0x26>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <parse_command+0x26>
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d102      	bne.n	8000718 <parse_command+0x2c>
		return -1;  // Błąd: nieprawidłowe argumenty
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	e03c      	b.n	8000792 <parse_command+0xa6>
	}

	char buffer[100];
	strncpy(buffer, command, sizeof(buffer));
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2264      	movs	r2, #100	@ 0x64
 800071e:	68f9      	ldr	r1, [r7, #12]
 8000720:	4618      	mov	r0, r3
 8000722:	f009 feae 	bl	800a482 <strncpy>
	buffer[sizeof(buffer) - 1] = '\0';  // Zapewnienie zakończenia null
 8000726:	2300      	movs	r3, #0
 8000728:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

	// Rozdzielanie stringa
	char *token = strtok(buffer, "_");
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	491a      	ldr	r1, [pc, #104]	@ (800079c <parse_command+0xb0>)
 8000732:	4618      	mov	r0, r3
 8000734:	f009 feb8 	bl	800a4a8 <strtok>
 8000738:	6778      	str	r0, [r7, #116]	@ 0x74
	if (!token)
 800073a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <parse_command+0x5a>
		return -2;
 8000740:	f06f 0301 	mvn.w	r3, #1
 8000744:	e025      	b.n	8000792 <parse_command+0xa6>
	strncpy(device, token, 16);  // Kopiowanie nazwy urządzenia
 8000746:	2210      	movs	r2, #16
 8000748:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800074a:	68b8      	ldr	r0, [r7, #8]
 800074c:	f009 fe99 	bl	800a482 <strncpy>

	token = strtok(NULL, "_");
 8000750:	4912      	ldr	r1, [pc, #72]	@ (800079c <parse_command+0xb0>)
 8000752:	2000      	movs	r0, #0
 8000754:	f009 fea8 	bl	800a4a8 <strtok>
 8000758:	6778      	str	r0, [r7, #116]	@ 0x74
	if (!token)
 800075a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <parse_command+0x7a>
		return -3;
 8000760:	f06f 0302 	mvn.w	r3, #2
 8000764:	e015      	b.n	8000792 <parse_command+0xa6>
	strncpy(type, token, 16);  // Kopiowanie typu urządzenia
 8000766:	2210      	movs	r2, #16
 8000768:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f009 fe89 	bl	800a482 <strncpy>

	token = strtok(NULL, "_");
 8000770:	490a      	ldr	r1, [pc, #40]	@ (800079c <parse_command+0xb0>)
 8000772:	2000      	movs	r0, #0
 8000774:	f009 fe98 	bl	800a4a8 <strtok>
 8000778:	6778      	str	r0, [r7, #116]	@ 0x74
	if (!token)
 800077a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <parse_command+0x98>
		return 0;
 8000780:	2300      	movs	r3, #0
 8000782:	e006      	b.n	8000792 <parse_command+0xa6>
	*value = atoi(token);  // Konwersja wartości na liczbę
 8000784:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000786:	f009 fcb3 	bl	800a0f0 <atoi>
 800078a:	4602      	mov	r2, r0
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	601a      	str	r2, [r3, #0]

	return 0;  // Sukces
 8000790:	2300      	movs	r3, #0

}
 8000792:	4618      	mov	r0, r3
 8000794:	3778      	adds	r7, #120	@ 0x78
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	0800b614 	.word	0x0800b614

080007a0 <CDC_GPIOHandler>:

void CDC_GPIOHandler(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, char *device,
		char *type, int value) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	460b      	mov	r3, r1
 80007ae:	817b      	strh	r3, [r7, #10]
	char response[50];
	if (value == -1) {
 80007b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b6:	d126      	bne.n	8000806 <CDC_GPIOHandler+0x66>

		// Odczyt stanu pinu
		GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80007b8:	897b      	ldrh	r3, [r7, #10]
 80007ba:	4619      	mov	r1, r3
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f001 fdfd 	bl	80023bc <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0
 80007c4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		snprintf(response, sizeof(response), "%s_%s val=%s done ok\n\r", device,
 80007c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d101      	bne.n	80007d4 <CDC_GPIOHandler+0x34>
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <CDC_GPIOHandler+0xf4>)
 80007d2:	e000      	b.n	80007d6 <CDC_GPIOHandler+0x36>
 80007d4:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <CDC_GPIOHandler+0xf8>)
 80007d6:	f107 0014 	add.w	r0, r7, #20
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a2e      	ldr	r2, [pc, #184]	@ (800089c <CDC_GPIOHandler+0xfc>)
 80007e4:	2132      	movs	r1, #50	@ 0x32
 80007e6:	f009 fdcd 	bl	800a384 <sniprintf>
				type, pinState == GPIO_PIN_SET ? "1" : "0");
		CDC_Transmit_FS((uint8_t*) response, strlen(response));
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd00 	bl	80001f4 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f009 f800 	bl	8009804 <CDC_Transmit_FS>
			snprintf(response, sizeof(response), "%s_%s fail\n\r", device,
					type);
			CDC_Transmit_FS((uint8_t*) response, strlen(response));
		}
	}
}
 8000804:	e042      	b.n	800088c <CDC_GPIOHandler+0xec>
		if (value == 0 || value == 1) {
 8000806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <CDC_GPIOHandler+0x72>
 800080c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800080e:	2b01      	cmp	r3, #1
 8000810:	d126      	bne.n	8000860 <CDC_GPIOHandler+0xc0>
					(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000814:	2b01      	cmp	r3, #1
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
			GPIO_PinState pinState =
 800081e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			HAL_GPIO_WritePin(GPIOx, GPIO_Pin, pinState);
 8000822:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000826:	897b      	ldrh	r3, [r7, #10]
 8000828:	4619      	mov	r1, r3
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f001 fdde 	bl	80023ec <HAL_GPIO_WritePin>
			snprintf(response, sizeof(response), "%s_%s done ok\n\r", device,
 8000830:	f107 0014 	add.w	r0, r7, #20
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a19      	ldr	r2, [pc, #100]	@ (80008a0 <CDC_GPIOHandler+0x100>)
 800083c:	2132      	movs	r1, #50	@ 0x32
 800083e:	f009 fda1 	bl	800a384 <sniprintf>
			CDC_Transmit_FS((uint8_t*) response, strlen(response));
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fcd4 	bl	80001f4 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f008 ffd4 	bl	8009804 <CDC_Transmit_FS>
		if (value == 0 || value == 1) {
 800085c:	bf00      	nop
}
 800085e:	e015      	b.n	800088c <CDC_GPIOHandler+0xec>
			snprintf(response, sizeof(response), "%s_%s fail\n\r", device,
 8000860:	f107 0014 	add.w	r0, r7, #20
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <CDC_GPIOHandler+0x104>)
 800086c:	2132      	movs	r1, #50	@ 0x32
 800086e:	f009 fd89 	bl	800a384 <sniprintf>
			CDC_Transmit_FS((uint8_t*) response, strlen(response));
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fcbc 	bl	80001f4 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f008 ffbc 	bl	8009804 <CDC_Transmit_FS>
}
 800088c:	bf00      	nop
 800088e:	3748      	adds	r7, #72	@ 0x48
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	0800b618 	.word	0x0800b618
 8000898:	0800b61c 	.word	0x0800b61c
 800089c:	0800b620 	.word	0x0800b620
 80008a0:	0800b638 	.word	0x0800b638
 80008a4:	0800b648 	.word	0x0800b648

080008a8 <CDC_POTHandler>:

void CDC_POTHandler(I2C_HandleTypeDef *hi2c, uint8_t channel, char *device,
		char *type, int value) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	@ 0x50
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	460b      	mov	r3, r1
 80008b6:	72fb      	strb	r3, [r7, #11]
	char response[50];
	if (value == -1) {
 80008b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80008ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008be:	d139      	bne.n	8000934 <CDC_POTHandler+0x8c>
		// Odczyt stanu pinu
		uint8_t valResp;
		if (AD5254_GetValue(hi2c, channel, &valResp) == HAL_OK) {
 80008c0:	f107 0213 	add.w	r2, r7, #19
 80008c4:	7afb      	ldrb	r3, [r7, #11]
 80008c6:	4619      	mov	r1, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff fe84 	bl	80005d6 <AD5254_GetValue>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d118      	bne.n	8000906 <CDC_POTHandler+0x5e>
			snprintf(response, sizeof(response), "%s_%s val=%d done ok\n\r",
 80008d4:	7cfb      	ldrb	r3, [r7, #19]
 80008d6:	f107 0014 	add.w	r0, r7, #20
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a32      	ldr	r2, [pc, #200]	@ (80009ac <CDC_POTHandler+0x104>)
 80008e4:	2132      	movs	r1, #50	@ 0x32
 80008e6:	f009 fd4d 	bl	800a384 <sniprintf>
					device, type, valResp);
			CDC_Transmit_FS((uint8_t*) response, strlen(response));
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc80 	bl	80001f4 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f008 ff80 	bl	8009804 <CDC_Transmit_FS>
					type);
			CDC_Transmit_FS((uint8_t*) response, strlen(response));
		}
	}

}
 8000904:	e04d      	b.n	80009a2 <CDC_POTHandler+0xfa>
			snprintf(response, sizeof(response), "%s_%s fail\n\r", device,
 8000906:	f107 0014 	add.w	r0, r7, #20
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a27      	ldr	r2, [pc, #156]	@ (80009b0 <CDC_POTHandler+0x108>)
 8000912:	2132      	movs	r1, #50	@ 0x32
 8000914:	f009 fd36 	bl	800a384 <sniprintf>
			CDC_Transmit_FS((uint8_t*) response, strlen(response));
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fc69 	bl	80001f4 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f008 ff69 	bl	8009804 <CDC_Transmit_FS>
}
 8000932:	e036      	b.n	80009a2 <CDC_POTHandler+0xfa>
		if (AD5254_SetValue(hi2c, channel, value) == HAL_OK) {
 8000934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000936:	b2da      	uxtb	r2, r3
 8000938:	7afb      	ldrb	r3, [r7, #11]
 800093a:	4619      	mov	r1, r3
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff fe2f 	bl	80005a0 <AD5254_SetValue>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d116      	bne.n	8000976 <CDC_POTHandler+0xce>
			snprintf(response, sizeof(response), "%s_%s done ok\n\r", device,
 8000948:	f107 0014 	add.w	r0, r7, #20
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a18      	ldr	r2, [pc, #96]	@ (80009b4 <CDC_POTHandler+0x10c>)
 8000954:	2132      	movs	r1, #50	@ 0x32
 8000956:	f009 fd15 	bl	800a384 <sniprintf>
			CDC_Transmit_FS((uint8_t*) response, strlen(response));
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fc48 	bl	80001f4 <strlen>
 8000964:	4603      	mov	r3, r0
 8000966:	b29a      	uxth	r2, r3
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f008 ff48 	bl	8009804 <CDC_Transmit_FS>
}
 8000974:	e015      	b.n	80009a2 <CDC_POTHandler+0xfa>
			snprintf(response, sizeof(response), "%s_%s fail\n\r", device,
 8000976:	f107 0014 	add.w	r0, r7, #20
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a0b      	ldr	r2, [pc, #44]	@ (80009b0 <CDC_POTHandler+0x108>)
 8000982:	2132      	movs	r1, #50	@ 0x32
 8000984:	f009 fcfe 	bl	800a384 <sniprintf>
			CDC_Transmit_FS((uint8_t*) response, strlen(response));
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc31 	bl	80001f4 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f008 ff31 	bl	8009804 <CDC_Transmit_FS>
}
 80009a2:	bf00      	nop
 80009a4:	3748      	adds	r7, #72	@ 0x48
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	0800b658 	.word	0x0800b658
 80009b0:	0800b648 	.word	0x0800b648
 80009b4:	0800b638 	.word	0x0800b638

080009b8 <CDC_ProcessCommand>:
	}

}

// Funkcja do przetwarzania komend otrzymywanych przez CDC
void CDC_ProcessCommand(const char *command, uint32_t Len) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0d4      	sub	sp, #336	@ 0x150
 80009bc:	af02      	add	r7, sp, #8
 80009be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80009c6:	6018      	str	r0, [r3, #0]
 80009c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80009d0:	6019      	str	r1, [r3, #0]
	char device[20];
	char type[20];
	int value = -1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	char buffer[50];
// Rozdziel komendę na części
	strncpy(buffer, command, Len);
 80009da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009de:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 80009e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80009ea:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	6819      	ldr	r1, [r3, #0]
 80009f2:	f009 fd46 	bl	800a482 <strncpy>
	buffer[Len] = '\0';
 80009f6:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 80009fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	trim_command(buffer);
 8000a0a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe32 	bl	8000678 <trim_command>

	if (strlen(buffer) == 0) {
 8000a14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d103      	bne.n	8000a26 <CDC_ProcessCommand+0x6e>
		//CDC_SendResponse("Error: Empty command received\n\r");
		message_ready = 1;
 8000a1e:	4bbe      	ldr	r3, [pc, #760]	@ (8000d18 <CDC_ProcessCommand+0x360>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
		return;
 8000a24:	e3b7      	b.n	8001196 <CDC_ProcessCommand+0x7de>
	}
	int errorValidation = parse_command(buffer, device, type, &value);
 8000a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a2a:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8000a2e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000a32:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8000a36:	f7ff fe59 	bl	80006ec <parse_command>
 8000a3a:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
	if (errorValidation != 0) {
 8000a3e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d013      	beq.n	8000a6e <CDC_ProcessCommand+0xb6>
		// Wysyłanie komunikatu o błędzie
		char errorResponse[100];
		snprintf(errorResponse, sizeof(errorResponse),
 8000a46:	f107 000c 	add.w	r0, r7, #12
 8000a4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000a54:	4ab1      	ldr	r2, [pc, #708]	@ (8000d1c <CDC_ProcessCommand+0x364>)
 8000a56:	2164      	movs	r1, #100	@ 0x64
 8000a58:	f009 fc94 	bl	800a384 <sniprintf>
				"Error:(%d) Invalid command: %s\n\r", errorValidation, buffer);
		CDC_SendResponse(errorResponse);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fddc 	bl	800061e <CDC_SendResponse>
		message_ready = 1;
 8000a66:	4bac      	ldr	r3, [pc, #688]	@ (8000d18 <CDC_ProcessCommand+0x360>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e393      	b.n	8001196 <CDC_ProcessCommand+0x7de>
		return;
		//return parseResult; // Zwracamy kod błędu
	}

	char response[100];
	snprintf(response, sizeof(response), "%s_%s", device, type);
 8000a6e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a72:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000a76:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	4aa8      	ldr	r2, [pc, #672]	@ (8000d20 <CDC_ProcessCommand+0x368>)
 8000a80:	2164      	movs	r1, #100	@ 0x64
 8000a82:	f009 fc7f 	bl	800a384 <sniprintf>
	response[sizeof(response)] = '\0';
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
// Obsługa urządzeń smc124
	if (strcmp(device, "smc124") == 0) {
 8000a8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a90:	49a4      	ldr	r1, [pc, #656]	@ (8000d24 <CDC_ProcessCommand+0x36c>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fba4 	bl	80001e0 <strcmp>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d17f      	bne.n	8000b9e <CDC_ProcessCommand+0x1e6>
		if (strcmp(type, "clk") == 0) {
 8000a9e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000aa2:	49a1      	ldr	r1, [pc, #644]	@ (8000d28 <CDC_ProcessCommand+0x370>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fb9b 	bl	80001e0 <strcmp>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d138      	bne.n	8000b22 <CDC_ProcessCommand+0x16a>
			if (value == -1) {
 8000ab0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d119      	bne.n	8000aee <CDC_ProcessCommand+0x136>
				int16_t pwm_val = __HAL_TIM_GET_COMPARE(&htim5, TIM_CHANNEL_1);
 8000aba:	4b9c      	ldr	r3, [pc, #624]	@ (8000d2c <CDC_ProcessCommand+0x374>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac0:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
				snprintf(response, sizeof(response), "%s_%s val=%d done ok\n\r",
 8000ac4:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	@ 0x136
 8000ac8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000acc:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	4a95      	ldr	r2, [pc, #596]	@ (8000d30 <CDC_ProcessCommand+0x378>)
 8000adc:	2164      	movs	r1, #100	@ 0x64
 8000ade:	f009 fc51 	bl	800a384 <sniprintf>
									device, type, pwm_val);
				CDC_SendResponse(response);
 8000ae2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fd99 	bl	800061e <CDC_SendResponse>
 8000aec:	e350      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
			}else{
				__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, value);
 8000aee:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000af2:	4b8e      	ldr	r3, [pc, #568]	@ (8000d2c <CDC_ProcessCommand+0x374>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
				snprintf(response, sizeof(response), "%s_%s val=%d done ok\n\r",
 8000af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000afc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000b00:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	4a88      	ldr	r2, [pc, #544]	@ (8000d30 <CDC_ProcessCommand+0x378>)
 8000b10:	2164      	movs	r1, #100	@ 0x64
 8000b12:	f009 fc37 	bl	800a384 <sniprintf>
									device, type, value);
							CDC_SendResponse(response);
 8000b16:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fd7f 	bl	800061e <CDC_SendResponse>
 8000b20:	e336      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
			}

		} else if (strcmp(type, "dir") == 0) {
 8000b22:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b26:	4983      	ldr	r1, [pc, #524]	@ (8000d34 <CDC_ProcessCommand+0x37c>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fb59 	bl	80001e0 <strcmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10c      	bne.n	8000b4e <CDC_ProcessCommand+0x196>
			CDC_GPIOHandler(SMC124_DIR_GPIO_Port, SMC124_DIR_Pin, device, type,
 8000b34:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b38:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000b3c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	460b      	mov	r3, r1
 8000b44:	2108      	movs	r1, #8
 8000b46:	487c      	ldr	r0, [pc, #496]	@ (8000d38 <CDC_ProcessCommand+0x380>)
 8000b48:	f7ff fe2a 	bl	80007a0 <CDC_GPIOHandler>
 8000b4c:	e320      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
					value);
		} else if (strcmp(type, "en") == 0) {
 8000b4e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b52:	497a      	ldr	r1, [pc, #488]	@ (8000d3c <CDC_ProcessCommand+0x384>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb43 	bl	80001e0 <strcmp>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10c      	bne.n	8000b7a <CDC_ProcessCommand+0x1c2>
			CDC_GPIOHandler(SMC124_EN_GPIO_Port, SMC124_EN_Pin, device, type,
 8000b60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b64:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000b68:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	2110      	movs	r1, #16
 8000b72:	4871      	ldr	r0, [pc, #452]	@ (8000d38 <CDC_ProcessCommand+0x380>)
 8000b74:	f7ff fe14 	bl	80007a0 <CDC_GPIOHandler>
 8000b78:	e30a      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
					value);
		} else {
			snprintf(response, sizeof(response), "Unknown %s type %s\n\r",
 8000b7a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000b7e:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000b82:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	4a6d      	ldr	r2, [pc, #436]	@ (8000d40 <CDC_ProcessCommand+0x388>)
 8000b8c:	2164      	movs	r1, #100	@ 0x64
 8000b8e:	f009 fbf9 	bl	800a384 <sniprintf>
					device, type);
			CDC_SendResponse(response);
 8000b92:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fd41 	bl	800061e <CDC_SendResponse>
 8000b9c:	e2f8      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		}
	}
// Obsługa SM1
	else if (strcmp(device, "sm1") == 0) {
 8000b9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ba2:	4968      	ldr	r1, [pc, #416]	@ (8000d44 <CDC_ProcessCommand+0x38c>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fb1b 	bl	80001e0 <strcmp>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d156      	bne.n	8000c5e <CDC_ProcessCommand+0x2a6>
		if (strcmp(type, "sd") == 0) {
 8000bb0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bb4:	4964      	ldr	r1, [pc, #400]	@ (8000d48 <CDC_ProcessCommand+0x390>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb12 	bl	80001e0 <strcmp>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10d      	bne.n	8000bde <CDC_ProcessCommand+0x226>
			CDC_GPIOHandler(SM1_SD_GPIO_Port, SM1_SD_Pin, device, type, value);
 8000bc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000bc6:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000bca:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd6:	485d      	ldr	r0, [pc, #372]	@ (8000d4c <CDC_ProcessCommand+0x394>)
 8000bd8:	f7ff fde2 	bl	80007a0 <CDC_GPIOHandler>
 8000bdc:	e2d8      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "ccw") == 0) {
 8000bde:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000be2:	495b      	ldr	r1, [pc, #364]	@ (8000d50 <CDC_ProcessCommand+0x398>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fafb 	bl	80001e0 <strcmp>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10d      	bne.n	8000c0c <CDC_ProcessCommand+0x254>
			CDC_GPIOHandler(SM1_CCW_GPIO_Port, SM1_CCW_Pin, device, type,
 8000bf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000bf4:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000bf8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c04:	4851      	ldr	r0, [pc, #324]	@ (8000d4c <CDC_ProcessCommand+0x394>)
 8000c06:	f7ff fdcb 	bl	80007a0 <CDC_GPIOHandler>
 8000c0a:	e2c1      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
					value);
		} else if (strcmp(type, "cw") == 0) {
 8000c0c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c10:	4950      	ldr	r1, [pc, #320]	@ (8000d54 <CDC_ProcessCommand+0x39c>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fae4 	bl	80001e0 <strcmp>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10d      	bne.n	8000c3a <CDC_ProcessCommand+0x282>
			CDC_GPIOHandler(SM1_CW_GPIO_Port, SM1_CW_Pin, device, type, value);
 8000c1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000c22:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000c26:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c32:	4846      	ldr	r0, [pc, #280]	@ (8000d4c <CDC_ProcessCommand+0x394>)
 8000c34:	f7ff fdb4 	bl	80007a0 <CDC_GPIOHandler>
 8000c38:	e2aa      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else {
			snprintf(response, sizeof(response), "Unknown %s type %s\n\r",
 8000c3a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000c3e:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000c42:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d40 <CDC_ProcessCommand+0x388>)
 8000c4c:	2164      	movs	r1, #100	@ 0x64
 8000c4e:	f009 fb99 	bl	800a384 <sniprintf>
					device, type);
			CDC_SendResponse(response);
 8000c52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fce1 	bl	800061e <CDC_SendResponse>
 8000c5c:	e298      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		}
	}
// Obsługa SM2
	else if (strcmp(device, "sm2") == 0) {
 8000c5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c62:	493d      	ldr	r1, [pc, #244]	@ (8000d58 <CDC_ProcessCommand+0x3a0>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fabb 	bl	80001e0 <strcmp>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d175      	bne.n	8000d5c <CDC_ProcessCommand+0x3a4>
		if (strcmp(type, "sd") == 0) {
 8000c70:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c74:	4934      	ldr	r1, [pc, #208]	@ (8000d48 <CDC_ProcessCommand+0x390>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fab2 	bl	80001e0 <strcmp>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10c      	bne.n	8000c9c <CDC_ProcessCommand+0x2e4>
			CDC_GPIOHandler(SM2_SD_GPIO_Port, SM2_SD_Pin, device, type, value);
 8000c82:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000c86:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000c8a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	460b      	mov	r3, r1
 8000c92:	2101      	movs	r1, #1
 8000c94:	482d      	ldr	r0, [pc, #180]	@ (8000d4c <CDC_ProcessCommand+0x394>)
 8000c96:	f7ff fd83 	bl	80007a0 <CDC_GPIOHandler>
 8000c9a:	e279      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "ccw") == 0) {
 8000c9c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ca0:	492b      	ldr	r1, [pc, #172]	@ (8000d50 <CDC_ProcessCommand+0x398>)
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fa9c 	bl	80001e0 <strcmp>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10c      	bne.n	8000cc8 <CDC_ProcessCommand+0x310>
			CDC_GPIOHandler(SM2_CCW_GPIO_Port, SM2_CCW_Pin, device, type,
 8000cae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000cb2:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000cb6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4822      	ldr	r0, [pc, #136]	@ (8000d4c <CDC_ProcessCommand+0x394>)
 8000cc2:	f7ff fd6d 	bl	80007a0 <CDC_GPIOHandler>
 8000cc6:	e263      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
					value);
		} else if (strcmp(type, "cw") == 0) {
 8000cc8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ccc:	4921      	ldr	r1, [pc, #132]	@ (8000d54 <CDC_ProcessCommand+0x39c>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa86 	bl	80001e0 <strcmp>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10c      	bne.n	8000cf4 <CDC_ProcessCommand+0x33c>
			CDC_GPIOHandler(SM2_CW_GPIO_Port, SM2_CW_Pin, device, type, value);
 8000cda:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000cde:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000ce2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	2104      	movs	r1, #4
 8000cec:	4817      	ldr	r0, [pc, #92]	@ (8000d4c <CDC_ProcessCommand+0x394>)
 8000cee:	f7ff fd57 	bl	80007a0 <CDC_GPIOHandler>
 8000cf2:	e24d      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else {
			snprintf(response, sizeof(response), "Unknown %s type %s\n\r",
 8000cf4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000cf8:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000cfc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4613      	mov	r3, r2
 8000d04:	4a0e      	ldr	r2, [pc, #56]	@ (8000d40 <CDC_ProcessCommand+0x388>)
 8000d06:	2164      	movs	r1, #100	@ 0x64
 8000d08:	f009 fb3c 	bl	800a384 <sniprintf>
					device, type);
			CDC_SendResponse(response);
 8000d0c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fc84 	bl	800061e <CDC_SendResponse>
 8000d16:	e23b      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	0800b670 	.word	0x0800b670
 8000d20:	0800b694 	.word	0x0800b694
 8000d24:	0800b69c 	.word	0x0800b69c
 8000d28:	0800b6a4 	.word	0x0800b6a4
 8000d2c:	200002a8 	.word	0x200002a8
 8000d30:	0800b658 	.word	0x0800b658
 8000d34:	0800b6a8 	.word	0x0800b6a8
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	0800b6ac 	.word	0x0800b6ac
 8000d40:	0800b6b0 	.word	0x0800b6b0
 8000d44:	0800b6c8 	.word	0x0800b6c8
 8000d48:	0800b6cc 	.word	0x0800b6cc
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	0800b6d0 	.word	0x0800b6d0
 8000d54:	0800b6d4 	.word	0x0800b6d4
 8000d58:	0800b6d8 	.word	0x0800b6d8
		}
	}
// Obsluga potencjometrow
	else if (strcmp(device, "pot") == 0) {
 8000d5c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d60:	49c9      	ldr	r1, [pc, #804]	@ (8001088 <CDC_ProcessCommand+0x6d0>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fa3c 	bl	80001e0 <strcmp>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 8081 	bne.w	8000e72 <CDC_ProcessCommand+0x4ba>
		if (strcmp(type, "1") == 0) {
 8000d70:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000d74:	49c5      	ldr	r1, [pc, #788]	@ (800108c <CDC_ProcessCommand+0x6d4>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fa32 	bl	80001e0 <strcmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10c      	bne.n	8000d9c <CDC_ProcessCommand+0x3e4>
			CDC_POTHandler(&hi2c1, 0x01, device, type, value);
 8000d82:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000d86:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000d8a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	460b      	mov	r3, r1
 8000d92:	2101      	movs	r1, #1
 8000d94:	48be      	ldr	r0, [pc, #760]	@ (8001090 <CDC_ProcessCommand+0x6d8>)
 8000d96:	f7ff fd87 	bl	80008a8 <CDC_POTHandler>
 8000d9a:	e1f9      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "2") == 0) {
 8000d9c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000da0:	49bc      	ldr	r1, [pc, #752]	@ (8001094 <CDC_ProcessCommand+0x6dc>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fa1c 	bl	80001e0 <strcmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <CDC_ProcessCommand+0x410>
			CDC_POTHandler(&hi2c1, 0x00, device, type, value);
 8000dae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000db2:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000db6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	48b3      	ldr	r0, [pc, #716]	@ (8001090 <CDC_ProcessCommand+0x6d8>)
 8000dc2:	f7ff fd71 	bl	80008a8 <CDC_POTHandler>
 8000dc6:	e1e3      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "3") == 0) {
 8000dc8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000dcc:	49b2      	ldr	r1, [pc, #712]	@ (8001098 <CDC_ProcessCommand+0x6e0>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fa06 	bl	80001e0 <strcmp>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <CDC_ProcessCommand+0x43c>
			CDC_POTHandler(&hi2c1, 0x03, device, type, value);
 8000dda:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000dde:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000de2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	460b      	mov	r3, r1
 8000dea:	2103      	movs	r1, #3
 8000dec:	48a8      	ldr	r0, [pc, #672]	@ (8001090 <CDC_ProcessCommand+0x6d8>)
 8000dee:	f7ff fd5b 	bl	80008a8 <CDC_POTHandler>
 8000df2:	e1cd      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "4") == 0) {
 8000df4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000df8:	49a8      	ldr	r1, [pc, #672]	@ (800109c <CDC_ProcessCommand+0x6e4>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9f0 	bl	80001e0 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <CDC_ProcessCommand+0x468>
			CDC_POTHandler(&hi2c1, 0x02, device, type, value);
 8000e06:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000e0a:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000e0e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	460b      	mov	r3, r1
 8000e16:	2102      	movs	r1, #2
 8000e18:	489d      	ldr	r0, [pc, #628]	@ (8001090 <CDC_ProcessCommand+0x6d8>)
 8000e1a:	f7ff fd45 	bl	80008a8 <CDC_POTHandler>
 8000e1e:	e1b7      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "wp") == 0) {
 8000e20:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e24:	499e      	ldr	r1, [pc, #632]	@ (80010a0 <CDC_ProcessCommand+0x6e8>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f9da 	bl	80001e0 <strcmp>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10d      	bne.n	8000e4e <CDC_ProcessCommand+0x496>
			CDC_GPIOHandler(POT_WP_GPIO_Port, POT_WP_Pin, device, type, value);
 8000e32:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000e36:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000e3a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	460b      	mov	r3, r1
 8000e42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e46:	4897      	ldr	r0, [pc, #604]	@ (80010a4 <CDC_ProcessCommand+0x6ec>)
 8000e48:	f7ff fcaa 	bl	80007a0 <CDC_GPIOHandler>
 8000e4c:	e1a0      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else {
			snprintf(response, sizeof(response), "Unknown %s type %s\n\r",
 8000e4e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e52:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000e56:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	4a92      	ldr	r2, [pc, #584]	@ (80010a8 <CDC_ProcessCommand+0x6f0>)
 8000e60:	2164      	movs	r1, #100	@ 0x64
 8000e62:	f009 fa8f 	bl	800a384 <sniprintf>
					device, type);
			CDC_SendResponse(response);
 8000e66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fbd7 	bl	800061e <CDC_SendResponse>
 8000e70:	e18e      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		}
	}
	// Obsługa HX711
	else if (strcmp(device, "hx") == 0) {
 8000e72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e76:	498d      	ldr	r1, [pc, #564]	@ (80010ac <CDC_ProcessCommand+0x6f4>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff f9b1 	bl	80001e0 <strcmp>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d157      	bne.n	8000f34 <CDC_ProcessCommand+0x57c>
		if (strcmp(type, "gain") == 0) {
 8000e84:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e88:	4989      	ldr	r1, [pc, #548]	@ (80010b0 <CDC_ProcessCommand+0x6f8>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f9a8 	bl	80001e0 <strcmp>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d11a      	bne.n	8000ecc <CDC_ProcessCommand+0x514>
			HX711_SetGain(value);
 8000e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f98d 	bl	80011bc <HX711_SetGain>
			snprintf(response, sizeof(response), "%s_%s val=%d done ok\n\r",
 8000ea2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ea6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000eaa:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	4a7e      	ldr	r2, [pc, #504]	@ (80010b4 <CDC_ProcessCommand+0x6fc>)
 8000eba:	2164      	movs	r1, #100	@ 0x64
 8000ebc:	f009 fa62 	bl	800a384 <sniprintf>
								device, type, value);
						CDC_SendResponse(response);
 8000ec0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fbaa 	bl	800061e <CDC_SendResponse>
 8000eca:	e161      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "read") == 0) {
 8000ecc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ed0:	4979      	ldr	r1, [pc, #484]	@ (80010b8 <CDC_ProcessCommand+0x700>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f984 	bl	80001e0 <strcmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d118      	bne.n	8000f10 <CDC_ProcessCommand+0x558>
			uint32_t HX711_val = HX711_Read();
 8000ede:	f000 f97d 	bl	80011dc <HX711_Read>
 8000ee2:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
			snprintf(response, sizeof(response), "%s_%s val=%ld done ok\n\r",
 8000ee6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000eea:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000eee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	4a6f      	ldr	r2, [pc, #444]	@ (80010bc <CDC_ProcessCommand+0x704>)
 8000efe:	2164      	movs	r1, #100	@ 0x64
 8000f00:	f009 fa40 	bl	800a384 <sniprintf>
					device, type, HX711_val);
			CDC_SendResponse(response);
 8000f04:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fb88 	bl	800061e <CDC_SendResponse>
 8000f0e:	e13f      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else {
			snprintf(response, sizeof(response), "Unknown %s type %s\n\r",
 8000f10:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000f14:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000f18:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	4a61      	ldr	r2, [pc, #388]	@ (80010a8 <CDC_ProcessCommand+0x6f0>)
 8000f22:	2164      	movs	r1, #100	@ 0x64
 8000f24:	f009 fa2e 	bl	800a384 <sniprintf>
					device, type);
			CDC_SendResponse(response);
 8000f28:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fb76 	bl	800061e <CDC_SendResponse>
 8000f32:	e12d      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		}
	}
	// Obsługa encoderów
	else if (strcmp(device, "encoder") == 0) {
 8000f34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f38:	4961      	ldr	r1, [pc, #388]	@ (80010c0 <CDC_ProcessCommand+0x708>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff f950 	bl	80001e0 <strcmp>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d157      	bne.n	8000ff6 <CDC_ProcessCommand+0x63e>
		if (strcmp(type, "1") == 0) {
 8000f46:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f4a:	4950      	ldr	r1, [pc, #320]	@ (800108c <CDC_ProcessCommand+0x6d4>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f947 	bl	80001e0 <strcmp>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d119      	bne.n	8000f8c <CDC_ProcessCommand+0x5d4>
			int32_t encoder_value = __HAL_TIM_GET_COUNTER(&htim2);
 8000f58:	4b5a      	ldr	r3, [pc, #360]	@ (80010c4 <CDC_ProcessCommand+0x70c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
			snprintf(response, sizeof(response), "%s_%s val=%ld done ok\n\r",
 8000f62:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000f66:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000f6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4613      	mov	r3, r2
 8000f78:	4a50      	ldr	r2, [pc, #320]	@ (80010bc <CDC_ProcessCommand+0x704>)
 8000f7a:	2164      	movs	r1, #100	@ 0x64
 8000f7c:	f009 fa02 	bl	800a384 <sniprintf>
					device, type, encoder_value);
			CDC_SendResponse(response);
 8000f80:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fb4a 	bl	800061e <CDC_SendResponse>
 8000f8a:	e101      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "2") == 0) {
 8000f8c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f90:	4940      	ldr	r1, [pc, #256]	@ (8001094 <CDC_ProcessCommand+0x6dc>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff f924 	bl	80001e0 <strcmp>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d119      	bne.n	8000fd2 <CDC_ProcessCommand+0x61a>
			int32_t encoder_value = __HAL_TIM_GET_COUNTER(&htim3);
 8000f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80010c8 <CDC_ProcessCommand+0x710>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
			snprintf(response, sizeof(response), "%s_%s val=%ld done ok\n\r",
 8000fa8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000fac:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000fb0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80010bc <CDC_ProcessCommand+0x704>)
 8000fc0:	2164      	movs	r1, #100	@ 0x64
 8000fc2:	f009 f9df 	bl	800a384 <sniprintf>
					device, type, encoder_value);
			CDC_SendResponse(response);
 8000fc6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fb27 	bl	800061e <CDC_SendResponse>
 8000fd0:	e0de      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else {
			snprintf(response, sizeof(response), "Unknown %s type %s\n\r",
 8000fd2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000fd6:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000fda:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <CDC_ProcessCommand+0x6f0>)
 8000fe4:	2164      	movs	r1, #100	@ 0x64
 8000fe6:	f009 f9cd 	bl	800a384 <sniprintf>
					device, type);
			CDC_SendResponse(response);
 8000fea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fb15 	bl	800061e <CDC_SendResponse>
 8000ff4:	e0cc      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		}
	}
	// Obsługa ledów
	else if (strcmp(device, "led") == 0) {
 8000ff6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ffa:	4934      	ldr	r1, [pc, #208]	@ (80010cc <CDC_ProcessCommand+0x714>)
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f8ef 	bl	80001e0 <strcmp>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d169      	bne.n	80010dc <CDC_ProcessCommand+0x724>
		if (strcmp(type, "blue") == 0) {
 8001008:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800100c:	4930      	ldr	r1, [pc, #192]	@ (80010d0 <CDC_ProcessCommand+0x718>)
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8e6 	bl	80001e0 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10d      	bne.n	8001036 <CDC_ProcessCommand+0x67e>
			CDC_GPIOHandler(LED1_GPIO_Port, LED1_Pin, device, type, value);
 800101a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800101e:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001022:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	460b      	mov	r3, r1
 800102a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800102e:	4829      	ldr	r0, [pc, #164]	@ (80010d4 <CDC_ProcessCommand+0x71c>)
 8001030:	f7ff fbb6 	bl	80007a0 <CDC_GPIOHandler>
 8001034:	e0ac      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else if (strcmp(type, "green") == 0) {
 8001036:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800103a:	4927      	ldr	r1, [pc, #156]	@ (80010d8 <CDC_ProcessCommand+0x720>)
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8cf 	bl	80001e0 <strcmp>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10d      	bne.n	8001064 <CDC_ProcessCommand+0x6ac>
			CDC_GPIOHandler(LED2_GPIO_Port, LED2_Pin, device, type, value);
 8001048:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800104c:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001050:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	460b      	mov	r3, r1
 8001058:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800105c:	481d      	ldr	r0, [pc, #116]	@ (80010d4 <CDC_ProcessCommand+0x71c>)
 800105e:	f7ff fb9f 	bl	80007a0 <CDC_GPIOHandler>
 8001062:	e095      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
		} else {
			snprintf(response, sizeof(response), "Unknown %s type %s\n\r",
 8001064:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001068:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800106c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <CDC_ProcessCommand+0x6f0>)
 8001076:	2164      	movs	r1, #100	@ 0x64
 8001078:	f009 f984 	bl	800a384 <sniprintf>
					device, type);
			CDC_SendResponse(response);
 800107c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff facc 	bl	800061e <CDC_SendResponse>
 8001086:	e083      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
 8001088:	0800b6dc 	.word	0x0800b6dc
 800108c:	0800b618 	.word	0x0800b618
 8001090:	2000017c 	.word	0x2000017c
 8001094:	0800b6e0 	.word	0x0800b6e0
 8001098:	0800b6e4 	.word	0x0800b6e4
 800109c:	0800b6e8 	.word	0x0800b6e8
 80010a0:	0800b6ec 	.word	0x0800b6ec
 80010a4:	40020400 	.word	0x40020400
 80010a8:	0800b6b0 	.word	0x0800b6b0
 80010ac:	0800b6f0 	.word	0x0800b6f0
 80010b0:	0800b6f4 	.word	0x0800b6f4
 80010b4:	0800b658 	.word	0x0800b658
 80010b8:	0800b6fc 	.word	0x0800b6fc
 80010bc:	0800b704 	.word	0x0800b704
 80010c0:	0800b71c 	.word	0x0800b71c
 80010c4:	200001d0 	.word	0x200001d0
 80010c8:	20000218 	.word	0x20000218
 80010cc:	0800b724 	.word	0x0800b724
 80010d0:	0800b728 	.word	0x0800b728
 80010d4:	40020000 	.word	0x40020000
 80010d8:	0800b730 	.word	0x0800b730
		}
	}
	// Obsługa zer
	else if (strcmp(device, "zero") == 0) {
 80010dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80010e0:	492f      	ldr	r1, [pc, #188]	@ (80011a0 <CDC_ProcessCommand+0x7e8>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f87c 	bl	80001e0 <strcmp>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d13f      	bne.n	800116e <CDC_ProcessCommand+0x7b6>
			if (strcmp(type, "1") == 0) {
 80010ee:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80010f2:	492c      	ldr	r1, [pc, #176]	@ (80011a4 <CDC_ProcessCommand+0x7ec>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f873 	bl	80001e0 <strcmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10d      	bne.n	800111c <CDC_ProcessCommand+0x764>
				CDC_GPIOHandler(ZERO1_GPIO_Port, ZERO1_Pin, device, type, value);
 8001100:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001104:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001108:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	460b      	mov	r3, r1
 8001110:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001114:	4824      	ldr	r0, [pc, #144]	@ (80011a8 <CDC_ProcessCommand+0x7f0>)
 8001116:	f7ff fb43 	bl	80007a0 <CDC_GPIOHandler>
 800111a:	e039      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
			} else if (strcmp(type, "2") == 0) {
 800111c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001120:	4922      	ldr	r1, [pc, #136]	@ (80011ac <CDC_ProcessCommand+0x7f4>)
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f85c 	bl	80001e0 <strcmp>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10d      	bne.n	800114a <CDC_ProcessCommand+0x792>
				CDC_GPIOHandler(ZERO1_GPIO_Port, ZERO1_Pin, device, type, value);
 800112e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001132:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001136:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	460b      	mov	r3, r1
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	4819      	ldr	r0, [pc, #100]	@ (80011a8 <CDC_ProcessCommand+0x7f0>)
 8001144:	f7ff fb2c 	bl	80007a0 <CDC_GPIOHandler>
 8001148:	e022      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
			} else {
				snprintf(response, sizeof(response), "Unknown %s type %s\n\r",
 800114a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800114e:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001152:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <CDC_ProcessCommand+0x7f8>)
 800115c:	2164      	movs	r1, #100	@ 0x64
 800115e:	f009 f911 	bl	800a384 <sniprintf>
						device, type);
				CDC_SendResponse(response);
 8001162:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fa59 	bl	800061e <CDC_SendResponse>
 800116c:	e010      	b.n	8001190 <CDC_ProcessCommand+0x7d8>
			}
		}
// Obsługa innych przypadków
	else {
		snprintf(response, sizeof(response), "Unknown device %s or type %s\n\r",
 800116e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001172:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001176:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4613      	mov	r3, r2
 800117e:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <CDC_ProcessCommand+0x7fc>)
 8001180:	2164      	movs	r1, #100	@ 0x64
 8001182:	f009 f8ff 	bl	800a384 <sniprintf>
				device, type);
		CDC_SendResponse(response);
 8001186:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fa47 	bl	800061e <CDC_SendResponse>
	}
	message_ready = 1;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <CDC_ProcessCommand+0x800>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	0800b738 	.word	0x0800b738
 80011a4:	0800b618 	.word	0x0800b618
 80011a8:	40020800 	.word	0x40020800
 80011ac:	0800b6e0 	.word	0x0800b6e0
 80011b0:	0800b6b0 	.word	0x0800b6b0
 80011b4:	0800b740 	.word	0x0800b740
 80011b8:	20000000 	.word	0x20000000

080011bc <HX711_SetGain>:

/**
 * @brief Ustawia wzmocnienie HX711 (GAIN).
 * @param gain Wartość wzmocnienia: 128, 64, lub 32.
 */
void HX711_SetGain(uint8_t gain) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    HX711_gain = gain;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HX711_SetGain+0x1c>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	7013      	strb	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000004 	.word	0x20000004

080011dc <HX711_Read>:

/**
 * @brief Odczytuje wartość z HX711.
 * @retval Odczytana wartość 24-bitowa.
 */
uint32_t HX711_Read(void) {
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
    uint32_t data = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
    uint32_t iterator =0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
    // Czekaj na gotowość HX711 (DT == 0)
   while (HAL_GPIO_ReadPin(HX711_DOUT_GPIO_Port, HX711_DOUT_Pin) == GPIO_PIN_SET || iterator>=100){
 80011ea:	e005      	b.n	80011f8 <HX711_Read+0x1c>
	   iterator++;
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	3301      	adds	r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
	   HAL_Delay(10);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f000 fe28 	bl	8001e48 <HAL_Delay>
   while (HAL_GPIO_ReadPin(HX711_DOUT_GPIO_Port, HX711_DOUT_Pin) == GPIO_PIN_SET || iterator>=100){
 80011f8:	2108      	movs	r1, #8
 80011fa:	482b      	ldr	r0, [pc, #172]	@ (80012a8 <HX711_Read+0xcc>)
 80011fc:	f001 f8de 	bl	80023bc <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d0f2      	beq.n	80011ec <HX711_Read+0x10>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b63      	cmp	r3, #99	@ 0x63
 800120a:	d8ef      	bhi.n	80011ec <HX711_Read+0x10>
   }

    // Odczytaj 24 bity danych
    for (int i = 0; i < 24; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	e017      	b.n	8001242 <HX711_Read+0x66>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001218:	4824      	ldr	r0, [pc, #144]	@ (80012ac <HX711_Read+0xd0>)
 800121a:	f001 f8e7 	bl	80023ec <HAL_GPIO_WritePin>
        data = (data << 1) | HAL_GPIO_ReadPin(HX711_DOUT_GPIO_Port, HX711_DOUT_Pin);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	005c      	lsls	r4, r3, #1
 8001222:	2108      	movs	r1, #8
 8001224:	4820      	ldr	r0, [pc, #128]	@ (80012a8 <HX711_Read+0xcc>)
 8001226:	f001 f8c9 	bl	80023bc <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	4323      	orrs	r3, r4
 800122e:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001236:	481d      	ldr	r0, [pc, #116]	@ (80012ac <HX711_Read+0xd0>)
 8001238:	f001 f8d8 	bl	80023ec <HAL_GPIO_WritePin>
    for (int i = 0; i < 24; i++) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b17      	cmp	r3, #23
 8001246:	dde4      	ble.n	8001212 <HX711_Read+0x36>
    }

    // Dodatkowe impulsy zegara dla ustawienia wzmocnienia
    for (int i = 0; i < (HX711_gain == 128 ? 1 : (HX711_gain == 64 ? 3 : 2)); i++) {
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	e00e      	b.n	800126c <HX711_Read+0x90>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001254:	4815      	ldr	r0, [pc, #84]	@ (80012ac <HX711_Read+0xd0>)
 8001256:	f001 f8c9 	bl	80023ec <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001260:	4812      	ldr	r0, [pc, #72]	@ (80012ac <HX711_Read+0xd0>)
 8001262:	f001 f8c3 	bl	80023ec <HAL_GPIO_WritePin>
    for (int i = 0; i < (HX711_gain == 128 ? 1 : (HX711_gain == 64 ? 3 : 2)); i++) {
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HX711_Read+0xd4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b80      	cmp	r3, #128	@ 0x80
 8001272:	d007      	beq.n	8001284 <HX711_Read+0xa8>
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HX711_Read+0xd4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b40      	cmp	r3, #64	@ 0x40
 800127a:	d101      	bne.n	8001280 <HX711_Read+0xa4>
 800127c:	2303      	movs	r3, #3
 800127e:	e002      	b.n	8001286 <HX711_Read+0xaa>
 8001280:	2302      	movs	r3, #2
 8001282:	e000      	b.n	8001286 <HX711_Read+0xaa>
 8001284:	2301      	movs	r3, #1
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	4293      	cmp	r3, r2
 800128a:	dce0      	bgt.n	800124e <HX711_Read+0x72>
    }

    // Konwersja na wartość 24-bitową signed
    if (data & 0x800000) {
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HX711_Read+0xc2>
        data |= 0xFF000000;  // Rozszerzenie znaku dla wartości ujemnych
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800129c:	60fb      	str	r3, [r7, #12]
    }

    return data;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020000 	.word	0x40020000
 80012b0:	20000004 	.word	0x20000004

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f000 fd54 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 f810 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f000 f9f6 	bl	80016b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012c4:	f000 f8a4 	bl	8001410 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c8:	f000 f8f6 	bl	80014b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012cc:	f000 f998 	bl	8001600 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80012d0:	f008 f9ce 	bl	8009670 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80012d4:	f000 f86e 	bl	80013b4 <MX_I2C1_Init>
  MX_TIM4_Init();
 80012d8:	f000 f942 	bl	8001560 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <main+0x28>

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f009 f8bf 	bl	800a472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <SystemClock_Config+0xcc>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <SystemClock_Config+0xd0>)
 800132a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001350:	2308      	movs	r3, #8
 8001352:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001354:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001358:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800135a:	2304      	movs	r3, #4
 800135c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800135e:	2307      	movs	r3, #7
 8001360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fac0 	bl	80048ec <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001372:	f000 fa3d 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001382:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fd22 	bl	8004ddc <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800139e:	f000 fa27 	bl	80017f0 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	@ 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013ba:	4a13      	ldr	r2, [pc, #76]	@ (8001408 <MX_I2C1_Init+0x54>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013c0:	4a12      	ldr	r2, [pc, #72]	@ (800140c <MX_I2C1_Init+0x58>)
 80013c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <MX_I2C1_Init+0x50>)
 80013f2:	f001 f82f 	bl	8002454 <HAL_I2C_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013fc:	f000 f9f8 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000017c 	.word	0x2000017c
 8001408:	40005400 	.word	0x40005400
 800140c:	000186a0 	.word	0x000186a0

08001410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	@ 0x30
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2224      	movs	r2, #36	@ 0x24
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f009 f827 	bl	800a472 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <MX_TIM2_Init+0xa4>)
 800142e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001432:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <MX_TIM2_Init+0xa4>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_TIM2_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_TIM2_Init+0xa4>)
 8001442:	f04f 32ff 	mov.w	r2, #4294967295
 8001446:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_TIM2_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <MX_TIM2_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001454:	2301      	movs	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800145c:	2301      	movs	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800146c:	2301      	movs	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <MX_TIM2_Init+0xa4>)
 8001480:	f003 ff56 	bl	8005330 <HAL_TIM_Encoder_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800148a:	f000 f9b1 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_TIM2_Init+0xa4>)
 800149c:	f004 fd4c 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014a6:	f000 f9a3 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	@ 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200001d0 	.word	0x200001d0

080014b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2224      	movs	r2, #36	@ 0x24
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f008 ffd3 	bl	800a472 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d4:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <MX_TIM3_Init+0xa0>)
 80014d6:	4a21      	ldr	r2, [pc, #132]	@ (800155c <MX_TIM3_Init+0xa4>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_TIM3_Init+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <MX_TIM3_Init+0xa0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_TIM3_Init+0xa0>)
 80014e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_TIM3_Init+0xa0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_TIM3_Init+0xa0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001502:	2301      	movs	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001512:	2301      	movs	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_TIM3_Init+0xa0>)
 8001526:	f003 ff03 	bl	8005330 <HAL_TIM_Encoder_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001530:	f000 f95e 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_TIM3_Init+0xa0>)
 8001542:	f004 fcf9 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800154c:	f000 f950 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3730      	adds	r7, #48	@ 0x30
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000218 	.word	0x20000218
 800155c:	40000400 	.word	0x40000400

08001560 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <MX_TIM4_Init+0x98>)
 800157e:	4a1f      	ldr	r2, [pc, #124]	@ (80015fc <MX_TIM4_Init+0x9c>)
 8001580:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <MX_TIM4_Init+0x98>)
 8001584:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001588:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <MX_TIM4_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_TIM4_Init+0x98>)
 8001592:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001596:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_TIM4_Init+0x98>)
 800159a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800159e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <MX_TIM4_Init+0x98>)
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015a6:	4814      	ldr	r0, [pc, #80]	@ (80015f8 <MX_TIM4_Init+0x98>)
 80015a8:	f003 fe24 	bl	80051f4 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80015b2:	f000 f91d 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_TIM4_Init+0x98>)
 80015c4:	f004 f90c 	bl	80057e0 <HAL_TIM_ConfigClockSource>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80015ce:	f000 f90f 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <MX_TIM4_Init+0x98>)
 80015e0:	f004 fcaa 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80015ea:	f000 f901 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000260 	.word	0x20000260
 80015fc:	40000800 	.word	0x40000800

08001600 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001622:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 8001624:	4a21      	ldr	r2, [pc, #132]	@ (80016ac <MX_TIM5_Init+0xac>)
 8001626:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8;
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 800162a:	2208      	movs	r2, #8
 800162c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 8001636:	2263      	movs	r2, #99	@ 0x63
 8001638:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001646:	4818      	ldr	r0, [pc, #96]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 8001648:	f003 fe23 	bl	8005292 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001652:	f000 f8cd 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	4619      	mov	r1, r3
 8001664:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 8001666:	f004 fc67 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001670:	f000 f8be 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	@ 0x60
 8001676:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 800168c:	f003 ffe6 	bl	800565c <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001696:	f000 f8ab 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800169a:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <MX_TIM5_Init+0xa8>)
 800169c:	f000 f9e2 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200002a8 	.word	0x200002a8
 80016ac:	40000c00 	.word	0x40000c00

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b45      	ldr	r3, [pc, #276]	@ (80017e0 <MX_GPIO_Init+0x130>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a44      	ldr	r2, [pc, #272]	@ (80017e0 <MX_GPIO_Init+0x130>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b42      	ldr	r3, [pc, #264]	@ (80017e0 <MX_GPIO_Init+0x130>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b3e      	ldr	r3, [pc, #248]	@ (80017e0 <MX_GPIO_Init+0x130>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a3d      	ldr	r2, [pc, #244]	@ (80017e0 <MX_GPIO_Init+0x130>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b3b      	ldr	r3, [pc, #236]	@ (80017e0 <MX_GPIO_Init+0x130>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <MX_GPIO_Init+0x130>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a36      	ldr	r2, [pc, #216]	@ (80017e0 <MX_GPIO_Init+0x130>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <MX_GPIO_Init+0x130>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <MX_GPIO_Init+0x130>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a2f      	ldr	r2, [pc, #188]	@ (80017e0 <MX_GPIO_Init+0x130>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <MX_GPIO_Init+0x130>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ZERO1_Pin|ZERO2_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800173c:	4829      	ldr	r0, [pc, #164]	@ (80017e4 <MX_GPIO_Init+0x134>)
 800173e:	f000 fe55 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMC124_DIR_Pin|SMC124_EN_Pin|LED2_Pin|LED1_Pin
 8001742:	2200      	movs	r2, #0
 8001744:	f248 5118 	movw	r1, #34072	@ 0x8518
 8001748:	4827      	ldr	r0, [pc, #156]	@ (80017e8 <MX_GPIO_Init+0x138>)
 800174a:	f000 fe4f 	bl	80023ec <HAL_GPIO_WritePin>
                          |HX711_SCK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SM2_SD_Pin|SM2_CCW_Pin|SM2_CW_Pin|SM1_SD_Pin
 800174e:	2200      	movs	r2, #0
 8001750:	f24e 1137 	movw	r1, #57655	@ 0xe137
 8001754:	4825      	ldr	r0, [pc, #148]	@ (80017ec <MX_GPIO_Init+0x13c>)
 8001756:	f000 fe49 	bl	80023ec <HAL_GPIO_WritePin>
                          |SM1_CCW_Pin|SM1_CW_Pin|POT_AD0_Pin|POT_AD1_Pin
                          |POT_WP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ZERO1_Pin ZERO2_Pin */
  GPIO_InitStruct.Pin = ZERO1_Pin|ZERO2_Pin;
 800175a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <MX_GPIO_Init+0x134>)
 8001774:	f000 fc9e 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMC124_DIR_Pin SMC124_EN_Pin LED2_Pin LED1_Pin
                           HX711_SCK_Pin */
  GPIO_InitStruct.Pin = SMC124_DIR_Pin|SMC124_EN_Pin|LED2_Pin|LED1_Pin
 8001778:	f248 5318 	movw	r3, #34072	@ 0x8518
 800177c:	617b      	str	r3, [r7, #20]
                          |HX711_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4815      	ldr	r0, [pc, #84]	@ (80017e8 <MX_GPIO_Init+0x138>)
 8001792:	f000 fc8f 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SM2_SD_Pin SM2_CCW_Pin SM2_CW_Pin SM1_SD_Pin
                           SM1_CCW_Pin SM1_CW_Pin POT_AD0_Pin POT_AD1_Pin
                           POT_WP_Pin */
  GPIO_InitStruct.Pin = SM2_SD_Pin|SM2_CCW_Pin|SM2_CW_Pin|SM1_SD_Pin
 8001796:	f24e 1337 	movw	r3, #57655	@ 0xe137
 800179a:	617b      	str	r3, [r7, #20]
                          |SM1_CCW_Pin|SM1_CW_Pin|POT_AD0_Pin|POT_AD1_Pin
                          |POT_WP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	480f      	ldr	r0, [pc, #60]	@ (80017ec <MX_GPIO_Init+0x13c>)
 80017b0:	f000 fc80 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_DOUT_Pin */
  GPIO_InitStruct.Pin = HX711_DOUT_Pin;
 80017b4:	2308      	movs	r3, #8
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711_DOUT_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4809      	ldr	r0, [pc, #36]	@ (80017ec <MX_GPIO_Init+0x13c>)
 80017c8:	f000 fc74 	bl	80020b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin , GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_GPIO_Init+0x138>)
 80017d4:	f000 fe0a 	bl	80023ec <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	@ 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <Error_Handler+0x8>

080017fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <HAL_MspInit+0x4c>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001810:	6453      	str	r3, [r2, #68]	@ 0x44
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <HAL_MspInit+0x4c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	@ 0x40
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_I2C_MspInit+0x84>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d12b      	bne.n	80018c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a17      	ldr	r2, [pc, #92]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_POT_SCL_Pin|I2C_POT_SDA_Pin;
 800188a:	23c0      	movs	r3, #192	@ 0xc0
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188e:	2312      	movs	r3, #18
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800189a:	2304      	movs	r3, #4
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <HAL_I2C_MspInit+0x8c>)
 80018a6:	f000 fc05 	bl	80020b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 80018b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	@ 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005400 	.word	0x40005400
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020400 	.word	0x40020400

080018dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	@ 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018fc:	d12c      	bne.n	8001958 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	4b30      	ldr	r3, [pc, #192]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	4a2f      	ldr	r2, [pc, #188]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6413      	str	r3, [r2, #64]	@ 0x40
 800190e:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	4b29      	ldr	r3, [pc, #164]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a28      	ldr	r2, [pc, #160]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENCODER1_CH2_Pin|ENCODER1_CH1_Pin;
 8001936:	2322      	movs	r3, #34	@ 0x22
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001946:	2301      	movs	r3, #1
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	481d      	ldr	r0, [pc, #116]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001952:	f000 fbaf 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001956:	e030      	b.n	80019ba <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <HAL_TIM_Encoder_MspInit+0xf0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d12b      	bne.n	80019ba <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2_CH1_Pin|ENCODER2_CH2_Pin;
 800199a:	23c0      	movs	r3, #192	@ 0xc0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019aa:	2302      	movs	r3, #2
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0xec>)
 80019b6:	f000 fb7d 	bl	80020b4 <HAL_GPIO_Init>
}
 80019ba:	bf00      	nop
 80019bc:	3730      	adds	r7, #48	@ 0x30
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40000400 	.word	0x40000400

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d115      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	201e      	movs	r0, #30
 8001a04:	f000 fb1f 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a08:	201e      	movs	r0, #30
 8001a0a:	f000 fb38 	bl	800207e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10d      	bne.n	8001a4e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x40>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x40>)
 8001a3c:	f043 0308 	orr.w	r3, r3, #8
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x40>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40000c00 	.word	0x40000c00
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <HAL_TIM_MspPostInit+0x68>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d11d      	bne.n	8001ac2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_TIM_MspPostInit+0x6c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a10      	ldr	r2, [pc, #64]	@ (8001ad0 <HAL_TIM_MspPostInit+0x6c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_TIM_MspPostInit+0x6c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = SMC124_PWM_Pin;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SMC124_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <HAL_TIM_MspPostInit+0x70>)
 8001abe:	f000 faf9 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40000c00 	.word	0x40000c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <NMI_Handler+0x4>

08001ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <MemManage_Handler+0x4>

08001af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <UsageFault_Handler+0x4>

08001b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2e:	f000 f96b 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <TIM4_IRQHandler+0x10>)
 8001b3e:	f003 fc9d 	bl	800547c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000260 	.word	0x20000260

08001b4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <OTG_FS_IRQHandler+0x10>)
 8001b52:	f001 fdbd 	bl	80036d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200017d8 	.word	0x200017d8

08001b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return 1;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_kill>:

int _kill(int pid, int sig)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b7a:	f008 fd37 	bl	800a5ec <__errno>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2216      	movs	r2, #22
 8001b82:	601a      	str	r2, [r3, #0]
  return -1;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_exit>:

void _exit (int status)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ffe7 	bl	8001b70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ba2:	bf00      	nop
 8001ba4:	e7fd      	b.n	8001ba2 <_exit+0x12>

08001ba6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e00a      	b.n	8001bce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb8:	f3af 8000 	nop.w
 8001bbc:	4601      	mov	r1, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	60ba      	str	r2, [r7, #8]
 8001bc4:	b2ca      	uxtb	r2, r1
 8001bc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dbf0      	blt.n	8001bb8 <_read+0x12>
  }

  return len;
 8001bd6:	687b      	ldr	r3, [r7, #4]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e009      	b.n	8001c06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	60ba      	str	r2, [r7, #8]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dbf1      	blt.n	8001bf2 <_write+0x12>
  }
  return len;
 8001c0e:	687b      	ldr	r3, [r7, #4]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_close>:

int _close(int file)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c40:	605a      	str	r2, [r3, #4]
  return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_isatty>:

int _isatty(int file)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f008 fc9c 	bl	800a5ec <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20020000 	.word	0x20020000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	200002f0 	.word	0x200002f0
 8001ce8:	20002028 	.word	0x20002028

08001cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <SystemInit+0x20>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <SystemInit+0x20>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d14:	f7ff ffea 	bl	8001cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d18:	480c      	ldr	r0, [pc, #48]	@ (8001d4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d1a:	490d      	ldr	r1, [pc, #52]	@ (8001d50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d30:	4c0a      	ldr	r4, [pc, #40]	@ (8001d5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f008 fc5b 	bl	800a5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d42:	f7ff fab7 	bl	80012b4 <main>
  bx  lr    
 8001d46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001d54:	0800b9b4 	.word	0x0800b9b4
  ldr r2, =_sbss
 8001d58:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001d5c:	20002028 	.word	0x20002028

08001d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <HAL_Init+0x40>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <HAL_Init+0x40>)
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <HAL_Init+0x40>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f000 f94f 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d92:	200f      	movs	r0, #15
 8001d94:	f000 f808 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff fd30 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_InitTick+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_InitTick+0x58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f967 	bl	800209a <HAL_SYSTICK_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d80a      	bhi.n	8001df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f000 f92f 	bl	8002046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4a06      	ldr	r2, [pc, #24]	@ (8001e04 <HAL_InitTick+0x5c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000010 	.word	0x20000010
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_IncTick+0x20>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_IncTick+0x24>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <HAL_IncTick+0x24>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000010 	.word	0x20000010
 8001e2c:	200002f4 	.word	0x200002f4

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <HAL_GetTick+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200002f4 	.word	0x200002f4

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ffee 	bl	8001e30 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6e:	bf00      	nop
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000010 	.word	0x20000010

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db0b      	blt.n	8001f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4907      	ldr	r1, [pc, #28]	@ (8001f2c <__NVIC_EnableIRQ+0x38>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2001      	movs	r0, #1
 8001f16:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	@ (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	@ 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ffc:	d301      	bcc.n	8002002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00f      	b.n	8002022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <SysTick_Config+0x40>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200a:	210f      	movs	r1, #15
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f7ff ff8e 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <SysTick_Config+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201a:	4b04      	ldr	r3, [pc, #16]	@ (800202c <SysTick_Config+0x40>)
 800201c:	2207      	movs	r2, #7
 800201e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff29 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff3e 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff8e 	bl	8001f84 <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff5d 	bl	8001f30 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff31 	bl	8001ef4 <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa2 	bl	8001fec <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e159      	b.n	8002384 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 8148 	bne.w	800237e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d005      	beq.n	8002106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	2b02      	cmp	r3, #2
 8002104:	d130      	bne.n	8002168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0201 	and.w	r2, r3, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b03      	cmp	r3, #3
 8002172:	d017      	beq.n	80021a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d123      	bne.n	80021f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	08da      	lsrs	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3208      	adds	r2, #8
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	220f      	movs	r2, #15
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0203 	and.w	r2, r3, #3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a2 	beq.w	800237e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b57      	ldr	r3, [pc, #348]	@ (800239c <HAL_GPIO_Init+0x2e8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	4a56      	ldr	r2, [pc, #344]	@ (800239c <HAL_GPIO_Init+0x2e8>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002248:	6453      	str	r3, [r2, #68]	@ 0x44
 800224a:	4b54      	ldr	r3, [pc, #336]	@ (800239c <HAL_GPIO_Init+0x2e8>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002256:	4a52      	ldr	r2, [pc, #328]	@ (80023a0 <HAL_GPIO_Init+0x2ec>)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a49      	ldr	r2, [pc, #292]	@ (80023a4 <HAL_GPIO_Init+0x2f0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x202>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a48      	ldr	r2, [pc, #288]	@ (80023a8 <HAL_GPIO_Init+0x2f4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x1fe>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a47      	ldr	r2, [pc, #284]	@ (80023ac <HAL_GPIO_Init+0x2f8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x1fa>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a46      	ldr	r2, [pc, #280]	@ (80023b0 <HAL_GPIO_Init+0x2fc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x1f6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a45      	ldr	r2, [pc, #276]	@ (80023b4 <HAL_GPIO_Init+0x300>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x1f2>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e008      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c8:	4935      	ldr	r1, [pc, #212]	@ (80023a0 <HAL_GPIO_Init+0x2ec>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d6:	4b38      	ldr	r3, [pc, #224]	@ (80023b8 <HAL_GPIO_Init+0x304>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fa:	4a2f      	ldr	r2, [pc, #188]	@ (80023b8 <HAL_GPIO_Init+0x304>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002300:	4b2d      	ldr	r3, [pc, #180]	@ (80023b8 <HAL_GPIO_Init+0x304>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002324:	4a24      	ldr	r2, [pc, #144]	@ (80023b8 <HAL_GPIO_Init+0x304>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800232a:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <HAL_GPIO_Init+0x304>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234e:	4a1a      	ldr	r2, [pc, #104]	@ (80023b8 <HAL_GPIO_Init+0x304>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002354:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <HAL_GPIO_Init+0x304>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002378:	4a0f      	ldr	r2, [pc, #60]	@ (80023b8 <HAL_GPIO_Init+0x304>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f aea2 	bls.w	80020d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e001      	b.n	80023de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023de:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
 80023f8:	4613      	mov	r3, r2
 80023fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023fc:	787b      	ldrb	r3, [r7, #1]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002408:	e003      	b.n	8002412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	041a      	lsls	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002430:	887a      	ldrh	r2, [r7, #2]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4013      	ands	r3, r2
 8002436:	041a      	lsls	r2, r3, #16
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43d9      	mvns	r1, r3
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	400b      	ands	r3, r1
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	619a      	str	r2, [r3, #24]
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e12b      	b.n	80026be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff f9e6 	bl	800184c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2224      	movs	r2, #36	@ 0x24
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b8:	f002 fe88 	bl	80051cc <HAL_RCC_GetPCLK1Freq>
 80024bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a81      	ldr	r2, [pc, #516]	@ (80026c8 <HAL_I2C_Init+0x274>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d807      	bhi.n	80024d8 <HAL_I2C_Init+0x84>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a80      	ldr	r2, [pc, #512]	@ (80026cc <HAL_I2C_Init+0x278>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bf94      	ite	ls
 80024d0:	2301      	movls	r3, #1
 80024d2:	2300      	movhi	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e006      	b.n	80024e6 <HAL_I2C_Init+0x92>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a7d      	ldr	r2, [pc, #500]	@ (80026d0 <HAL_I2C_Init+0x27c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	bf94      	ite	ls
 80024e0:	2301      	movls	r3, #1
 80024e2:	2300      	movhi	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0e7      	b.n	80026be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a78      	ldr	r2, [pc, #480]	@ (80026d4 <HAL_I2C_Init+0x280>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0c9b      	lsrs	r3, r3, #18
 80024f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4a6a      	ldr	r2, [pc, #424]	@ (80026c8 <HAL_I2C_Init+0x274>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d802      	bhi.n	8002528 <HAL_I2C_Init+0xd4>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3301      	adds	r3, #1
 8002526:	e009      	b.n	800253c <HAL_I2C_Init+0xe8>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	4a69      	ldr	r2, [pc, #420]	@ (80026d8 <HAL_I2C_Init+0x284>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	3301      	adds	r3, #1
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	430b      	orrs	r3, r1
 8002542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800254e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	495c      	ldr	r1, [pc, #368]	@ (80026c8 <HAL_I2C_Init+0x274>)
 8002558:	428b      	cmp	r3, r1
 800255a:	d819      	bhi.n	8002590 <HAL_I2C_Init+0x13c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e59      	subs	r1, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fbb1 f3f3 	udiv	r3, r1, r3
 800256a:	1c59      	adds	r1, r3, #1
 800256c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002570:	400b      	ands	r3, r1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_I2C_Init+0x138>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1e59      	subs	r1, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fbb1 f3f3 	udiv	r3, r1, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258a:	e051      	b.n	8002630 <HAL_I2C_Init+0x1dc>
 800258c:	2304      	movs	r3, #4
 800258e:	e04f      	b.n	8002630 <HAL_I2C_Init+0x1dc>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <HAL_I2C_Init+0x168>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e012      	b.n	80025e2 <HAL_I2C_Init+0x18e>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	0099      	lsls	r1, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Init+0x196>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e022      	b.n	8002630 <HAL_I2C_Init+0x1dc>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10e      	bne.n	8002610 <HAL_I2C_Init+0x1bc>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1e58      	subs	r0, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	440b      	add	r3, r1
 8002600:	fbb0 f3f3 	udiv	r3, r0, r3
 8002604:	3301      	adds	r3, #1
 8002606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800260e:	e00f      	b.n	8002630 <HAL_I2C_Init+0x1dc>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	0099      	lsls	r1, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	fbb0 f3f3 	udiv	r3, r0, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	6809      	ldr	r1, [r1, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800265e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6911      	ldr	r1, [r2, #16]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68d2      	ldr	r2, [r2, #12]
 800266a:	4311      	orrs	r1, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	000186a0 	.word	0x000186a0
 80026cc:	001e847f 	.word	0x001e847f
 80026d0:	003d08ff 	.word	0x003d08ff
 80026d4:	431bde83 	.word	0x431bde83
 80026d8:	10624dd3 	.word	0x10624dd3

080026dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	461a      	mov	r2, r3
 80026e8:	460b      	mov	r3, r1
 80026ea:	817b      	strh	r3, [r7, #10]
 80026ec:	4613      	mov	r3, r2
 80026ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff fb9e 	bl	8001e30 <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b20      	cmp	r3, #32
 8002700:	f040 80e0 	bne.w	80028c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2319      	movs	r3, #25
 800270a:	2201      	movs	r2, #1
 800270c:	4970      	ldr	r1, [pc, #448]	@ (80028d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fc64 	bl	8002fdc <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
 800271c:	e0d3      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_I2C_Master_Transmit+0x50>
 8002728:	2302      	movs	r3, #2
 800272a:	e0cc      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x1ea>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d007      	beq.n	8002752 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002760:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2221      	movs	r2, #33	@ 0x21
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2210      	movs	r2, #16
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	893a      	ldrh	r2, [r7, #8]
 8002782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a50      	ldr	r2, [pc, #320]	@ (80028d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002792:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002794:	8979      	ldrh	r1, [r7, #10]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	6a3a      	ldr	r2, [r7, #32]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 face 	bl	8002d3c <I2C_MasterRequestWrite>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e08d      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027c0:	e066      	b.n	8002890 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	6a39      	ldr	r1, [r7, #32]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fd22 	bl	8003210 <I2C_WaitOnTXEFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00d      	beq.n	80027ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d107      	bne.n	80027ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06b      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b04      	cmp	r3, #4
 800282a:	d11b      	bne.n	8002864 <HAL_I2C_Master_Transmit+0x188>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	d017      	beq.n	8002864 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	6a39      	ldr	r1, [r7, #32]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fd19 	bl	80032a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00d      	beq.n	8002890 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	2b04      	cmp	r3, #4
 800287a:	d107      	bne.n	800288c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e01a      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d194      	bne.n	80027c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
  }
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	00100002 	.word	0x00100002
 80028d4:	ffff0000 	.word	0xffff0000

080028d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	@ 0x30
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff faa0 	bl	8001e30 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f040 8217 	bne.w	8002d2e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2319      	movs	r3, #25
 8002906:	2201      	movs	r2, #1
 8002908:	497c      	ldr	r1, [pc, #496]	@ (8002afc <HAL_I2C_Master_Receive+0x224>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fb66 	bl	8002fdc <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	e20a      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_Master_Receive+0x50>
 8002924:	2302      	movs	r3, #2
 8002926:	e203      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d007      	beq.n	800294e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800295c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2222      	movs	r2, #34	@ 0x22
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2210      	movs	r2, #16
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a5c      	ldr	r2, [pc, #368]	@ (8002b00 <HAL_I2C_Master_Receive+0x228>)
 800298e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa52 	bl	8002e40 <I2C_MasterRequestRead>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1c4      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d113      	bne.n	80029d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	623b      	str	r3, [r7, #32]
 80029c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e198      	b.n	8002d08 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d11b      	bne.n	8002a16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e178      	b.n	8002d08 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d11b      	bne.n	8002a56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	e158      	b.n	8002d08 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a7c:	e144      	b.n	8002d08 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	f200 80f1 	bhi.w	8002c6a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d123      	bne.n	8002ad8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fc4b 	bl	8003330 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e145      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ad6:	e117      	b.n	8002d08 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d14e      	bne.n	8002b7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4906      	ldr	r1, [pc, #24]	@ (8002b04 <HAL_I2C_Master_Receive+0x22c>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fa76 	bl	8002fdc <I2C_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e11a      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
 8002afa:	bf00      	nop
 8002afc:	00100002 	.word	0x00100002
 8002b00:	ffff0000 	.word	0xffff0000
 8002b04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b7c:	e0c4      	b.n	8002d08 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	2200      	movs	r2, #0
 8002b86:	496c      	ldr	r1, [pc, #432]	@ (8002d38 <HAL_I2C_Master_Receive+0x460>)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fa27 	bl	8002fdc <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0cb      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be0:	2200      	movs	r2, #0
 8002be2:	4955      	ldr	r1, [pc, #340]	@ (8002d38 <HAL_I2C_Master_Receive+0x460>)
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f9f9 	bl	8002fdc <I2C_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e09d      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c68:	e04e      	b.n	8002d08 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fb5e 	bl	8003330 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e058      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d124      	bne.n	8002d08 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f aeb6 	bne.w	8002a7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3728      	adds	r7, #40	@ 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	00010004 	.word	0x00010004

08002d3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d006      	beq.n	8002d66 <I2C_MasterRequestWrite+0x2a>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d003      	beq.n	8002d66 <I2C_MasterRequestWrite+0x2a>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d64:	d108      	bne.n	8002d78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e00b      	b.n	8002d90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	2b12      	cmp	r3, #18
 8002d7e:	d107      	bne.n	8002d90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f91d 	bl	8002fdc <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db6:	d103      	bne.n	8002dc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e035      	b.n	8002e30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dcc:	d108      	bne.n	8002de0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	e01b      	b.n	8002e18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002de0:	897b      	ldrh	r3, [r7, #10]
 8002de2:	11db      	asrs	r3, r3, #7
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f003 0306 	and.w	r3, r3, #6
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f063 030f 	orn	r3, r3, #15
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	490e      	ldr	r1, [pc, #56]	@ (8002e38 <I2C_MasterRequestWrite+0xfc>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f966 	bl	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e010      	b.n	8002e30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e0e:	897b      	ldrh	r3, [r7, #10]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4907      	ldr	r1, [pc, #28]	@ (8002e3c <I2C_MasterRequestWrite+0x100>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f956 	bl	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00010008 	.word	0x00010008
 8002e3c:	00010002 	.word	0x00010002

08002e40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d006      	beq.n	8002e7a <I2C_MasterRequestRead+0x3a>
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d003      	beq.n	8002e7a <I2C_MasterRequestRead+0x3a>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e78:	d108      	bne.n	8002e8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e00b      	b.n	8002ea4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	2b11      	cmp	r3, #17
 8002e92:	d107      	bne.n	8002ea4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ea2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f893 	bl	8002fdc <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eca:	d103      	bne.n	8002ed4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e079      	b.n	8002fcc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ee0:	d108      	bne.n	8002ef4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	611a      	str	r2, [r3, #16]
 8002ef2:	e05f      	b.n	8002fb4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ef4:	897b      	ldrh	r3, [r7, #10]
 8002ef6:	11db      	asrs	r3, r3, #7
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f003 0306 	and.w	r3, r3, #6
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f063 030f 	orn	r3, r3, #15
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4930      	ldr	r1, [pc, #192]	@ (8002fd4 <I2C_MasterRequestRead+0x194>)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f8dc 	bl	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e054      	b.n	8002fcc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f22:	897b      	ldrh	r3, [r7, #10]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4929      	ldr	r1, [pc, #164]	@ (8002fd8 <I2C_MasterRequestRead+0x198>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f8cc 	bl	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e044      	b.n	8002fcc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f831 	bl	8002fdc <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f8e:	d103      	bne.n	8002f98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f96:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e017      	b.n	8002fcc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f9c:	897b      	ldrh	r3, [r7, #10]
 8002f9e:	11db      	asrs	r3, r3, #7
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 0306 	and.w	r3, r3, #6
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f063 030e 	orn	r3, r3, #14
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4907      	ldr	r1, [pc, #28]	@ (8002fd8 <I2C_MasterRequestRead+0x198>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f888 	bl	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	00010008 	.word	0x00010008
 8002fd8:	00010002 	.word	0x00010002

08002fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fec:	e048      	b.n	8003080 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d044      	beq.n	8003080 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7fe ff1b 	bl	8001e30 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d139      	bne.n	8003080 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	0c1b      	lsrs	r3, r3, #16
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d10d      	bne.n	8003032 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	43da      	mvns	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	e00c      	b.n	800304c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	43da      	mvns	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4013      	ands	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	429a      	cmp	r2, r3
 8003050:	d116      	bne.n	8003080 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e023      	b.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	0c1b      	lsrs	r3, r3, #16
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10d      	bne.n	80030a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	43da      	mvns	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	e00c      	b.n	80030c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	43da      	mvns	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d093      	beq.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030de:	e071      	b.n	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ee:	d123      	bne.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003108:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e067      	b.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d041      	beq.n	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7fe fe76 	bl	8001e30 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d136      	bne.n	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10c      	bne.n	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4013      	ands	r3, r2
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e00b      	b.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e021      	b.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d10c      	bne.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e00b      	b.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	f47f af6d 	bne.w	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800321c:	e034      	b.n	8003288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f8e3 	bl	80033ea <I2C_IsAcknowledgeFailed>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e034      	b.n	8003298 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d028      	beq.n	8003288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe fdfb 	bl	8001e30 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11d      	bne.n	8003288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003256:	2b80      	cmp	r3, #128	@ 0x80
 8003258:	d016      	beq.n	8003288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e007      	b.n	8003298 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003292:	2b80      	cmp	r3, #128	@ 0x80
 8003294:	d1c3      	bne.n	800321e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ac:	e034      	b.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f89b 	bl	80033ea <I2C_IsAcknowledgeFailed>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e034      	b.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d028      	beq.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7fe fdb3 	bl	8001e30 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11d      	bne.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d016      	beq.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e007      	b.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d1c3      	bne.n	80032ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800333c:	e049      	b.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b10      	cmp	r3, #16
 800334a:	d119      	bne.n	8003380 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0210 	mvn.w	r2, #16
 8003354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e030      	b.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7fe fd56 	bl	8001e30 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d11d      	bne.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d016      	beq.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e007      	b.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033dc:	2b40      	cmp	r3, #64	@ 0x40
 80033de:	d1ae      	bne.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003400:	d11b      	bne.n	800343a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800340a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e101      	b.n	800365e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f006 fb0d 	bl	8009a94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003488:	d102      	bne.n	8003490 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f002 fee8 	bl	800626a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7c1a      	ldrb	r2, [r3, #16]
 80034a2:	f88d 2000 	strb.w	r2, [sp]
 80034a6:	3304      	adds	r3, #4
 80034a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034aa:	f002 fdc7 	bl	800603c <USB_CoreInit>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0ce      	b.n	800365e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fee0 	bl	800628c <USB_SetCurrentMode>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0bf      	b.n	800365e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e04a      	b.n	800357a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3315      	adds	r3, #21
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3314      	adds	r3, #20
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	b298      	uxth	r0, r3
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	332e      	adds	r3, #46	@ 0x2e
 8003520:	4602      	mov	r2, r0
 8003522:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3318      	adds	r3, #24
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	331c      	adds	r3, #28
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3320      	adds	r3, #32
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	3324      	adds	r3, #36	@ 0x24
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	3301      	adds	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	429a      	cmp	r2, r3
 8003582:	d3af      	bcc.n	80034e4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003584:	2300      	movs	r3, #0
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	e044      	b.n	8003614 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	3301      	adds	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	791b      	ldrb	r3, [r3, #4]
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	429a      	cmp	r2, r3
 800361c:	d3b5      	bcc.n	800358a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7c1a      	ldrb	r2, [r3, #16]
 8003626:	f88d 2000 	strb.w	r2, [sp]
 800362a:	3304      	adds	r3, #4
 800362c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362e:	f002 fe79 	bl	8006324 <USB_DevInit>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e00c      	b.n	800365e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f003 fec3 	bl	80073e2 <USB_DevDisconnect>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_PCD_Start+0x1c>
 800367e:	2302      	movs	r3, #2
 8003680:	e022      	b.n	80036c8 <HAL_PCD_Start+0x62>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 fdca 	bl	8006248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f003 fe71 	bl	80073a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b08d      	sub	sp, #52	@ 0x34
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 ff2f 	bl	800754a <USB_GetMode>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 848c 	bne.w	800400c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 fe93 	bl	8007424 <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8482 	beq.w	800400a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f003 fe80 	bl	8007424 <USB_ReadInterrupts>
 8003724:	4603      	mov	r3, r0
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d107      	bne.n	800373e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f002 0202 	and.w	r2, r2, #2
 800373c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f003 fe6e 	bl	8007424 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b10      	cmp	r3, #16
 8003750:	d161      	bne.n	8003816 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0210 	bic.w	r2, r2, #16
 8003760:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 020f 	and.w	r2, r3, #15
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	0c5b      	lsrs	r3, r3, #17
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	2b02      	cmp	r3, #2
 800378c:	d124      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d035      	beq.n	8003806 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	6a38      	ldr	r0, [r7, #32]
 80037ae:	f003 fca5 	bl	80070fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037be:	441a      	add	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d0:	441a      	add	r2, r3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	615a      	str	r2, [r3, #20]
 80037d6:	e016      	b.n	8003806 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	0c5b      	lsrs	r3, r3, #17
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d110      	bne.n	8003806 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037ea:	2208      	movs	r2, #8
 80037ec:	4619      	mov	r1, r3
 80037ee:	6a38      	ldr	r0, [r7, #32]
 80037f0:	f003 fc84 	bl	80070fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003800:	441a      	add	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0210 	orr.w	r2, r2, #16
 8003814:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f003 fe02 	bl	8007424 <USB_ReadInterrupts>
 8003820:	4603      	mov	r3, r0
 8003822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003826:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800382a:	f040 80a7 	bne.w	800397c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fe07 	bl	800744a <USB_ReadDevAllOutEpInterrupt>
 800383c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800383e:	e099      	b.n	8003974 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 808e 	beq.w	8003968 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f003 fe2b 	bl	80074b2 <USB_ReadDevOutEPInterrupt>
 800385c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	2301      	movs	r3, #1
 8003878:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800387a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fea3 	bl	80045c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	2308      	movs	r3, #8
 800389c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800389e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 ff79 	bl	8004798 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038bc:	461a      	mov	r2, r3
 80038be:	2310      	movs	r3, #16
 80038c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d030      	beq.n	800392e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d4:	2b80      	cmp	r3, #128	@ 0x80
 80038d6:	d109      	bne.n	80038ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	3304      	adds	r3, #4
 8003900:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	78db      	ldrb	r3, [r3, #3]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d108      	bne.n	800391c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f006 f9c6 	bl	8009ca8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	2302      	movs	r3, #2
 800392c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	2320      	movs	r3, #32
 8003948:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003966:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	3301      	adds	r3, #1
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f af62 	bne.w	8003840 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fd4f 	bl	8007424 <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800398c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003990:	f040 80db 	bne.w	8003b4a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f003 fd70 	bl	800747e <USB_ReadDevAllInEpInterrupt>
 800399e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80039a4:	e0cd      	b.n	8003b42 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80c2 	beq.w	8003b36 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 fd96 	bl	80074ee <USB_ReadDevInEPInterrupt>
 80039c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d057      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	2201      	movs	r2, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69f9      	ldr	r1, [r7, #28]
 80039ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039ee:	4013      	ands	r3, r2
 80039f0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fe:	461a      	mov	r2, r3
 8003a00:	2301      	movs	r3, #1
 8003a02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	799b      	ldrb	r3, [r3, #6]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d132      	bne.n	8003a72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3320      	adds	r3, #32
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4403      	add	r3, r0
 8003a2c:	331c      	adds	r3, #28
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4419      	add	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4403      	add	r3, r0
 8003a40:	3320      	adds	r3, #32
 8003a42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d113      	bne.n	8003a72 <HAL_PCD_IRQHandler+0x3a2>
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	3324      	adds	r3, #36	@ 0x24
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d108      	bne.n	8003a72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	f003 fd9d 	bl	80075ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f006 f89a 	bl	8009bb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a94:	461a      	mov	r2, r3
 8003a96:	2308      	movs	r3, #8
 8003a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003acc:	461a      	mov	r2, r3
 8003ace:	2340      	movs	r3, #64	@ 0x40
 8003ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d023      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ade:	6a38      	ldr	r0, [r7, #32]
 8003ae0:	f002 fd84 	bl	80065ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	3310      	adds	r3, #16
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	78db      	ldrb	r3, [r3, #3]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d108      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2200      	movs	r2, #0
 8003b04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f006 f8dd 	bl	8009ccc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2302      	movs	r3, #2
 8003b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fcbd 	bl	80044b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	3301      	adds	r3, #1
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f af2e 	bne.w	80039a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f003 fc68 	bl	8007424 <USB_ReadInterrupts>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b5e:	d122      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d108      	bne.n	8003b90 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b86:	2100      	movs	r1, #0
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fea3 	bl	80048d4 <HAL_PCDEx_LPM_Callback>
 8003b8e:	e002      	b.n	8003b96 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f006 f87b 	bl	8009c8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fc3a 	bl	8007424 <USB_ReadInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bba:	d112      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d102      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f006 f837 	bl	8009c40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003be0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 fc1c 	bl	8007424 <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf6:	f040 80b7 	bne.w	8003d68 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2110      	movs	r1, #16
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 fce9 	bl	80065ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c1e:	e046      	b.n	8003cae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c98:	0151      	lsls	r1, r2, #5
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	440a      	add	r2, r1
 8003c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ca2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ca6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003caa:	3301      	adds	r3, #1
 8003cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	791b      	ldrb	r3, [r3, #4]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d3b2      	bcc.n	8003c20 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ccc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7bdb      	ldrb	r3, [r3, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ce6:	f043 030b 	orr.w	r3, r3, #11
 8003cea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cfc:	f043 030b 	orr.w	r3, r3, #11
 8003d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d02:	e015      	b.n	8003d30 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d16:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003d1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d2a:	f043 030b 	orr.w	r3, r3, #11
 8003d2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d52:	461a      	mov	r2, r3
 8003d54:	f003 fc2a 	bl	80075ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 fb59 	bl	8007424 <USB_ReadInterrupts>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d7c:	d123      	bne.n	8003dc6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f003 fbef 	bl	8007566 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f002 fca6 	bl	80066de <USB_GetDevSpeed>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681c      	ldr	r4, [r3, #0]
 8003d9e:	f001 fa09 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8003da2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003da8:	461a      	mov	r2, r3
 8003daa:	4620      	mov	r0, r4
 8003dac:	f002 f9aa 	bl	8006104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f005 ff26 	bl	8009c02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f003 fb2a 	bl	8007424 <USB_ReadInterrupts>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d10a      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f005 ff03 	bl	8009be6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f002 0208 	and.w	r2, r2, #8
 8003dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 fb15 	bl	8007424 <USB_ReadInterrupts>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e00:	2b80      	cmp	r3, #128	@ 0x80
 8003e02:	d123      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e10:	2301      	movs	r3, #1
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e14:	e014      	b.n	8003e40 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d105      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fb0a 	bl	800444e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	791b      	ldrb	r3, [r3, #4]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d3e4      	bcc.n	8003e16 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 fae7 	bl	8007424 <USB_ReadInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e60:	d13c      	bne.n	8003edc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e62:	2301      	movs	r3, #1
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e66:	e02b      	b.n	8003ec0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3318      	adds	r3, #24
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d115      	bne.n	8003eba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da12      	bge.n	8003eba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3317      	adds	r3, #23
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 faca 	bl	800444e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d3cd      	bcc.n	8003e68 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f003 fa9f 	bl	8007424 <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ef0:	d156      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef6:	e045      	b.n	8003f84 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d12e      	bne.n	8003f7e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	da2b      	bge.n	8003f7e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f32:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d121      	bne.n	8003f7e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3e:	4613      	mov	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f7a:	6053      	str	r3, [r2, #4]
            break;
 8003f7c:	e008      	b.n	8003f90 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	3301      	adds	r3, #1
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	791b      	ldrb	r3, [r3, #4]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d3b3      	bcc.n	8003ef8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f003 fa3d 	bl	8007424 <USB_ReadInterrupts>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb4:	d10a      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f005 fe9a 	bl	8009cf0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f003 fa27 	bl	8007424 <USB_ReadInterrupts>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d115      	bne.n	800400c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f005 fe92 	bl	8009d1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
 8004008:	e000      	b.n	800400c <HAL_PCD_IRQHandler+0x93c>
      return;
 800400a:	bf00      	nop
    }
  }
}
 800400c:	3734      	adds	r7, #52	@ 0x34
 800400e:	46bd      	mov	sp, r7
 8004010:	bd90      	pop	{r4, r7, pc}

08004012 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_PCD_SetAddress+0x1a>
 8004028:	2302      	movs	r3, #2
 800402a:	e012      	b.n	8004052 <HAL_PCD_SetAddress+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f003 f986 	bl	8007354 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	4608      	mov	r0, r1
 8004064:	4611      	mov	r1, r2
 8004066:	461a      	mov	r2, r3
 8004068:	4603      	mov	r3, r0
 800406a:	70fb      	strb	r3, [r7, #3]
 800406c:	460b      	mov	r3, r1
 800406e:	803b      	strh	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407c:	2b00      	cmp	r3, #0
 800407e:	da0f      	bge.n	80040a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3310      	adds	r3, #16
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	705a      	strb	r2, [r3, #1]
 800409e:	e00f      	b.n	80040c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80040cc:	883b      	ldrh	r3, [r7, #0]
 80040ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	78ba      	ldrb	r2, [r7, #2]
 80040da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	785b      	ldrb	r3, [r3, #1]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040ee:	78bb      	ldrb	r3, [r7, #2]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d102      	bne.n	80040fa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_PCD_EP_Open+0xae>
 8004104:	2302      	movs	r3, #2
 8004106:	e00e      	b.n	8004126 <HAL_PCD_EP_Open+0xcc>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68f9      	ldr	r1, [r7, #12]
 8004116:	4618      	mov	r0, r3
 8004118:	f002 fb06 	bl	8006728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004124:	7afb      	ldrb	r3, [r7, #11]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800413a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800413e:	2b00      	cmp	r3, #0
 8004140:	da0f      	bge.n	8004162 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	f003 020f 	and.w	r2, r3, #15
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	3310      	adds	r3, #16
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	705a      	strb	r2, [r3, #1]
 8004160:	e00f      	b.n	8004182 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	3304      	adds	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_PCD_EP_Close+0x6e>
 8004198:	2302      	movs	r3, #2
 800419a:	e00e      	b.n	80041ba <HAL_PCD_EP_Close+0x8c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f002 fb44 	bl	8006838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	460b      	mov	r3, r1
 80041d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d2:	7afb      	ldrb	r3, [r7, #11]
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	3304      	adds	r3, #4
 80041ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2200      	movs	r2, #0
 80041fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	b2da      	uxtb	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	799b      	ldrb	r3, [r3, #6]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d102      	bne.n	800421e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	799b      	ldrb	r3, [r3, #6]
 8004226:	461a      	mov	r2, r3
 8004228:	6979      	ldr	r1, [r7, #20]
 800422a:	f002 fbe1 	bl	80069f0 <USB_EPStartXfer>

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	f003 020f 	and.w	r2, r3, #15
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	460b      	mov	r3, r1
 8004276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	7afb      	ldrb	r3, [r7, #11]
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	3310      	adds	r3, #16
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2201      	movs	r2, #1
 80042a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a8:	7afb      	ldrb	r3, [r7, #11]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	799b      	ldrb	r3, [r3, #6]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d102      	bne.n	80042c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	799b      	ldrb	r3, [r3, #6]
 80042ca:	461a      	mov	r2, r3
 80042cc:	6979      	ldr	r1, [r7, #20]
 80042ce:	f002 fb8f 	bl	80069f0 <USB_EPStartXfer>

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	7912      	ldrb	r2, [r2, #4]
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e04f      	b.n	800439a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	da0f      	bge.n	8004322 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	f003 020f 	and.w	r2, r3, #15
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	3310      	adds	r3, #16
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	3304      	adds	r3, #4
 8004318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	705a      	strb	r2, [r3, #1]
 8004320:	e00d      	b.n	800433e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	3304      	adds	r3, #4
 8004336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_PCD_EP_SetStall+0x82>
 800435a:	2302      	movs	r3, #2
 800435c:	e01d      	b.n	800439a <HAL_PCD_EP_SetStall+0xbe>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	4618      	mov	r0, r3
 800436e:	f002 ff1d 	bl	80071ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7999      	ldrb	r1, [r3, #6]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800438a:	461a      	mov	r2, r3
 800438c:	f003 f90e 	bl	80075ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	7912      	ldrb	r2, [r2, #4]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e042      	b.n	8004446 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da0f      	bge.n	80043e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 020f 	and.w	r2, r3, #15
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	3310      	adds	r3, #16
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4413      	add	r3, r2
 80043dc:	3304      	adds	r3, #4
 80043de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	705a      	strb	r2, [r3, #1]
 80043e6:	e00f      	b.n	8004408 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 020f 	and.w	r2, r3, #15
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	3304      	adds	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	b2da      	uxtb	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_PCD_EP_ClrStall+0x86>
 8004424:	2302      	movs	r3, #2
 8004426:	e00e      	b.n	8004446 <HAL_PCD_EP_ClrStall+0xa4>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	4618      	mov	r0, r3
 8004438:	f002 ff26 	bl	8007288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800445a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	da0c      	bge.n	800447c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	3310      	adds	r3, #16
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	3304      	adds	r3, #4
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e00c      	b.n	8004496 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	3304      	adds	r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	4618      	mov	r0, r3
 800449e:	f002 fd45 	bl	8006f2c <USB_EPStopXfer>
 80044a2:	4603      	mov	r3, r0
 80044a4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044a6:	7afb      	ldrb	r3, [r7, #11]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	@ 0x28
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3310      	adds	r3, #16
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	3304      	adds	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d901      	bls.n	80044e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e06b      	b.n	80045c0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d902      	bls.n	8004504 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	3303      	adds	r3, #3
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800450c:	e02a      	b.n	8004564 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	429a      	cmp	r2, r3
 8004522:	d902      	bls.n	800452a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3303      	adds	r3, #3
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68d9      	ldr	r1, [r3, #12]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	4603      	mov	r3, r0
 8004546:	6978      	ldr	r0, [r7, #20]
 8004548:	f002 fd9a 	bl	8007080 <USB_WritePacket>

    ep->xfer_buff  += len;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	441a      	add	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	429a      	cmp	r2, r3
 8004578:	d809      	bhi.n	800458e <PCD_WriteEmptyTxFifo+0xde>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004582:	429a      	cmp	r2, r3
 8004584:	d203      	bcs.n	800458e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1bf      	bne.n	800450e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	429a      	cmp	r2, r3
 8004598:	d811      	bhi.n	80045be <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	2201      	movs	r2, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	6939      	ldr	r1, [r7, #16]
 80045b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045ba:	4013      	ands	r3, r2
 80045bc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	333c      	adds	r3, #60	@ 0x3c
 80045e0:	3304      	adds	r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	799b      	ldrb	r3, [r3, #6]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d17b      	bne.n	80046f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d015      	beq.n	8004634 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4a61      	ldr	r2, [pc, #388]	@ (8004790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	f240 80b9 	bls.w	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80b3 	beq.w	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462a:	461a      	mov	r2, r3
 800462c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004630:	6093      	str	r3, [r2, #8]
 8004632:	e0a7      	b.n	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464a:	461a      	mov	r2, r3
 800464c:	2320      	movs	r3, #32
 800464e:	6093      	str	r3, [r2, #8]
 8004650:	e098      	b.n	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	f040 8093 	bne.w	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	4a4b      	ldr	r2, [pc, #300]	@ (8004790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d90f      	bls.n	8004686 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800467c:	461a      	mov	r2, r3
 800467e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004682:	6093      	str	r3, [r2, #8]
 8004684:	e07e      	b.n	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4413      	add	r3, r2
 8004698:	3304      	adds	r3, #4
 800469a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	0159      	lsls	r1, r3, #5
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	440b      	add	r3, r1
 80046a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b2:	1ad2      	subs	r2, r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d114      	bne.n	80046e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046d0:	461a      	mov	r2, r3
 80046d2:	2101      	movs	r1, #1
 80046d4:	f002 ff6a 	bl	80075ac <USB_EP0_OutStart>
 80046d8:	e006      	b.n	80046e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	441a      	add	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f005 fa44 	bl	8009b7c <HAL_PCD_DataOutStageCallback>
 80046f4:	e046      	b.n	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4a26      	ldr	r2, [pc, #152]	@ (8004794 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d124      	bne.n	8004748 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	461a      	mov	r2, r3
 8004716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471a:	6093      	str	r3, [r2, #8]
 800471c:	e032      	b.n	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	2320      	movs	r3, #32
 8004738:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f005 fa1b 	bl	8009b7c <HAL_PCD_DataOutStageCallback>
 8004746:	e01d      	b.n	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d114      	bne.n	8004778 <PCD_EP_OutXfrComplete_int+0x1b0>
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d108      	bne.n	8004778 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004770:	461a      	mov	r2, r3
 8004772:	2100      	movs	r1, #0
 8004774:	f002 ff1a 	bl	80075ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	4619      	mov	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f005 f9fc 	bl	8009b7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	4f54300a 	.word	0x4f54300a
 8004794:	4f54310a 	.word	0x4f54310a

08004798 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	333c      	adds	r3, #60	@ 0x3c
 80047b0:	3304      	adds	r3, #4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a15      	ldr	r2, [pc, #84]	@ (8004820 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d90e      	bls.n	80047ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e4:	461a      	mov	r2, r3
 80047e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f005 f9b3 	bl	8009b58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004820 <PCD_EP_OutSetupPacket_int+0x88>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d90c      	bls.n	8004814 <PCD_EP_OutSetupPacket_int+0x7c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	799b      	ldrb	r3, [r3, #6]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d108      	bne.n	8004814 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800480c:	461a      	mov	r2, r3
 800480e:	2101      	movs	r1, #1
 8004810:	f002 fecc 	bl	80075ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	4f54300a 	.word	0x4f54300a

08004824 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
 8004830:	4613      	mov	r3, r2
 8004832:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004842:	883b      	ldrh	r3, [r7, #0]
 8004844:	0419      	lsls	r1, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	430a      	orrs	r2, r1
 800484e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004850:	e028      	b.n	80048a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4413      	add	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004860:	2300      	movs	r3, #0
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	e00d      	b.n	8004882 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	3340      	adds	r3, #64	@ 0x40
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4413      	add	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	3301      	adds	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	3b01      	subs	r3, #1
 8004888:	429a      	cmp	r2, r3
 800488a:	d3ec      	bcc.n	8004866 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800488c:	883b      	ldrh	r3, [r7, #0]
 800488e:	0418      	lsls	r0, r3, #16
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	3b01      	subs	r3, #1
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4302      	orrs	r2, r0
 800489c:	3340      	adds	r3, #64	@ 0x40
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	887a      	ldrh	r2, [r7, #2]
 80048c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e267      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d075      	beq.n	80049f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800490a:	4b88      	ldr	r3, [pc, #544]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b04      	cmp	r3, #4
 8004914:	d00c      	beq.n	8004930 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004916:	4b85      	ldr	r3, [pc, #532]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800491e:	2b08      	cmp	r3, #8
 8004920:	d112      	bne.n	8004948 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004922:	4b82      	ldr	r3, [pc, #520]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800492a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800492e:	d10b      	bne.n	8004948 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004930:	4b7e      	ldr	r3, [pc, #504]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d05b      	beq.n	80049f4 <HAL_RCC_OscConfig+0x108>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d157      	bne.n	80049f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e242      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004950:	d106      	bne.n	8004960 <HAL_RCC_OscConfig+0x74>
 8004952:	4b76      	ldr	r3, [pc, #472]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a75      	ldr	r2, [pc, #468]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e01d      	b.n	800499c <HAL_RCC_OscConfig+0xb0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0x98>
 800496a:	4b70      	ldr	r3, [pc, #448]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6f      	ldr	r2, [pc, #444]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b6d      	ldr	r3, [pc, #436]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a6c      	ldr	r2, [pc, #432]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0xb0>
 8004984:	4b69      	ldr	r3, [pc, #420]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a68      	ldr	r2, [pc, #416]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 800498a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	4b66      	ldr	r3, [pc, #408]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a65      	ldr	r2, [pc, #404]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800499a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d013      	beq.n	80049cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fd fa44 	bl	8001e30 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fd fa40 	bl	8001e30 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	@ 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e207      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	4b5b      	ldr	r3, [pc, #364]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0xc0>
 80049ca:	e014      	b.n	80049f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fd fa30 	bl	8001e30 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d4:	f7fd fa2c 	bl	8001e30 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	@ 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e1f3      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e6:	4b51      	ldr	r3, [pc, #324]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0xe8>
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d063      	beq.n	8004aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a02:	4b4a      	ldr	r3, [pc, #296]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a0e:	4b47      	ldr	r3, [pc, #284]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d11c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1a:	4b44      	ldr	r3, [pc, #272]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d116      	bne.n	8004a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	4b41      	ldr	r3, [pc, #260]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_RCC_OscConfig+0x152>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e1c7      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4937      	ldr	r1, [pc, #220]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	e03a      	b.n	8004aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a5c:	4b34      	ldr	r3, [pc, #208]	@ (8004b30 <HAL_RCC_OscConfig+0x244>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fd f9e5 	bl	8001e30 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6a:	f7fd f9e1 	bl	8001e30 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e1a8      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a88:	4b28      	ldr	r3, [pc, #160]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4925      	ldr	r1, [pc, #148]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	600b      	str	r3, [r1, #0]
 8004a9c:	e015      	b.n	8004aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9e:	4b24      	ldr	r3, [pc, #144]	@ (8004b30 <HAL_RCC_OscConfig+0x244>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd f9c4 	bl	8001e30 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aac:	f7fd f9c0 	bl	8001e30 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e187      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004abe:	4b1b      	ldr	r3, [pc, #108]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d036      	beq.n	8004b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d016      	beq.n	8004b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ade:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <HAL_RCC_OscConfig+0x248>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae4:	f7fd f9a4 	bl	8001e30 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aec:	f7fd f9a0 	bl	8001e30 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e167      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afe:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <HAL_RCC_OscConfig+0x240>)
 8004b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x200>
 8004b0a:	e01b      	b.n	8004b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b0c:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <HAL_RCC_OscConfig+0x248>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b12:	f7fd f98d 	bl	8001e30 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	e00e      	b.n	8004b38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1a:	f7fd f989 	bl	8001e30 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d907      	bls.n	8004b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e150      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	42470000 	.word	0x42470000
 8004b34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b38:	4b88      	ldr	r3, [pc, #544]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ea      	bne.n	8004b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8097 	beq.w	8004c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b56:	4b81      	ldr	r3, [pc, #516]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10f      	bne.n	8004b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	4b7d      	ldr	r3, [pc, #500]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b72:	4b7a      	ldr	r3, [pc, #488]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b82:	4b77      	ldr	r3, [pc, #476]	@ (8004d60 <HAL_RCC_OscConfig+0x474>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d118      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b8e:	4b74      	ldr	r3, [pc, #464]	@ (8004d60 <HAL_RCC_OscConfig+0x474>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a73      	ldr	r2, [pc, #460]	@ (8004d60 <HAL_RCC_OscConfig+0x474>)
 8004b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9a:	f7fd f949 	bl	8001e30 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba2:	f7fd f945 	bl	8001e30 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e10c      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8004d60 <HAL_RCC_OscConfig+0x474>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d106      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x2ea>
 8004bc8:	4b64      	ldr	r3, [pc, #400]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bcc:	4a63      	ldr	r2, [pc, #396]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd4:	e01c      	b.n	8004c10 <HAL_RCC_OscConfig+0x324>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x30c>
 8004bde:	4b5f      	ldr	r3, [pc, #380]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004be4:	f043 0304 	orr.w	r3, r3, #4
 8004be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bea:	4b5c      	ldr	r3, [pc, #368]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bee:	4a5b      	ldr	r2, [pc, #364]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0x324>
 8004bf8:	4b58      	ldr	r3, [pc, #352]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfc:	4a57      	ldr	r2, [pc, #348]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c04:	4b55      	ldr	r3, [pc, #340]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c08:	4a54      	ldr	r2, [pc, #336]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004c0a:	f023 0304 	bic.w	r3, r3, #4
 8004c0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d015      	beq.n	8004c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fd f90a 	bl	8001e30 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fd f906 	bl	8001e30 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e0cb      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c36:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0ee      	beq.n	8004c20 <HAL_RCC_OscConfig+0x334>
 8004c42:	e014      	b.n	8004c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c44:	f7fd f8f4 	bl	8001e30 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4c:	f7fd f8f0 	bl	8001e30 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e0b5      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c62:	4b3e      	ldr	r3, [pc, #248]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ee      	bne.n	8004c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d105      	bne.n	8004c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c74:	4b39      	ldr	r3, [pc, #228]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	4a38      	ldr	r2, [pc, #224]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80a1 	beq.w	8004dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c8a:	4b34      	ldr	r3, [pc, #208]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d05c      	beq.n	8004d50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d141      	bne.n	8004d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9e:	4b31      	ldr	r3, [pc, #196]	@ (8004d64 <HAL_RCC_OscConfig+0x478>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fd f8c4 	bl	8001e30 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fd f8c0 	bl	8001e30 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e087      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	4b27      	ldr	r3, [pc, #156]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	019b      	lsls	r3, r3, #6
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	491b      	ldr	r1, [pc, #108]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_RCC_OscConfig+0x478>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fd f899 	bl	8001e30 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fd f895 	bl	8001e30 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e05c      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d14:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x416>
 8004d20:	e054      	b.n	8004dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d22:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <HAL_RCC_OscConfig+0x478>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fd f882 	bl	8001e30 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d30:	f7fd f87e 	bl	8001e30 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e045      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <HAL_RCC_OscConfig+0x470>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x444>
 8004d4e:	e03d      	b.n	8004dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e038      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40007000 	.word	0x40007000
 8004d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd8 <HAL_RCC_OscConfig+0x4ec>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d028      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d121      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d11a      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d111      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	3b01      	subs	r3, #1
 8004db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0cc      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004df0:	4b68      	ldr	r3, [pc, #416]	@ (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d90c      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b65      	ldr	r3, [pc, #404]	@ (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b63      	ldr	r3, [pc, #396]	@ (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0b8      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e30:	4b59      	ldr	r3, [pc, #356]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4a58      	ldr	r2, [pc, #352]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e48:	4b53      	ldr	r3, [pc, #332]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a52      	ldr	r2, [pc, #328]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b50      	ldr	r3, [pc, #320]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	494d      	ldr	r1, [pc, #308]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d044      	beq.n	8004efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b47      	ldr	r3, [pc, #284]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d119      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d003      	beq.n	8004e9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e06f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e067      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eba:	4b37      	ldr	r3, [pc, #220]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 0203 	bic.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4934      	ldr	r1, [pc, #208]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ecc:	f7fc ffb0 	bl	8001e30 <HAL_GetTick>
 8004ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed4:	f7fc ffac 	bl	8001e30 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e04f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	4b2b      	ldr	r3, [pc, #172]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 020c 	and.w	r2, r3, #12
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1eb      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004efc:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d20c      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b22      	ldr	r3, [pc, #136]	@ (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b20      	ldr	r3, [pc, #128]	@ (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e032      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f30:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4916      	ldr	r1, [pc, #88]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	490e      	ldr	r1, [pc, #56]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f62:	f000 f821 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	490a      	ldr	r1, [pc, #40]	@ (8004f9c <HAL_RCC_ClockConfig+0x1c0>)
 8004f74:	5ccb      	ldrb	r3, [r1, r3]
 8004f76:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7a:	4a09      	ldr	r2, [pc, #36]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f7e:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fc ff10 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023c00 	.word	0x40023c00
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	0800b7a8 	.word	0x0800b7a8
 8004fa0:	20000008 	.word	0x20000008
 8004fa4:	2000000c 	.word	0x2000000c

08004fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fac:	b094      	sub	sp, #80	@ 0x50
 8004fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fc0:	4b79      	ldr	r3, [pc, #484]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 030c 	and.w	r3, r3, #12
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d00d      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	f200 80e1 	bhi.w	8005194 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x34>
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fda:	e0db      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fdc:	4b73      	ldr	r3, [pc, #460]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004fde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fe0:	e0db      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fe2:	4b73      	ldr	r3, [pc, #460]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fe6:	e0d8      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ff0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d063      	beq.n	80050c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	099b      	lsrs	r3, r3, #6
 8005004:	2200      	movs	r2, #0
 8005006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005008:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005010:	633b      	str	r3, [r7, #48]	@ 0x30
 8005012:	2300      	movs	r3, #0
 8005014:	637b      	str	r3, [r7, #52]	@ 0x34
 8005016:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800501a:	4622      	mov	r2, r4
 800501c:	462b      	mov	r3, r5
 800501e:	f04f 0000 	mov.w	r0, #0
 8005022:	f04f 0100 	mov.w	r1, #0
 8005026:	0159      	lsls	r1, r3, #5
 8005028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800502c:	0150      	lsls	r0, r2, #5
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4621      	mov	r1, r4
 8005034:	1a51      	subs	r1, r2, r1
 8005036:	6139      	str	r1, [r7, #16]
 8005038:	4629      	mov	r1, r5
 800503a:	eb63 0301 	sbc.w	r3, r3, r1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800504c:	4659      	mov	r1, fp
 800504e:	018b      	lsls	r3, r1, #6
 8005050:	4651      	mov	r1, sl
 8005052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005056:	4651      	mov	r1, sl
 8005058:	018a      	lsls	r2, r1, #6
 800505a:	4651      	mov	r1, sl
 800505c:	ebb2 0801 	subs.w	r8, r2, r1
 8005060:	4659      	mov	r1, fp
 8005062:	eb63 0901 	sbc.w	r9, r3, r1
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800507a:	4690      	mov	r8, r2
 800507c:	4699      	mov	r9, r3
 800507e:	4623      	mov	r3, r4
 8005080:	eb18 0303 	adds.w	r3, r8, r3
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	462b      	mov	r3, r5
 8005088:	eb49 0303 	adc.w	r3, r9, r3
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800509a:	4629      	mov	r1, r5
 800509c:	024b      	lsls	r3, r1, #9
 800509e:	4621      	mov	r1, r4
 80050a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050a4:	4621      	mov	r1, r4
 80050a6:	024a      	lsls	r2, r1, #9
 80050a8:	4610      	mov	r0, r2
 80050aa:	4619      	mov	r1, r3
 80050ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ae:	2200      	movs	r2, #0
 80050b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050b8:	f7fb f8fa 	bl	80002b0 <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4613      	mov	r3, r2
 80050c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c4:	e058      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4b38      	ldr	r3, [pc, #224]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	2200      	movs	r2, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	4611      	mov	r1, r2
 80050d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	2300      	movs	r3, #0
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
 80050dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050e0:	4642      	mov	r2, r8
 80050e2:	464b      	mov	r3, r9
 80050e4:	f04f 0000 	mov.w	r0, #0
 80050e8:	f04f 0100 	mov.w	r1, #0
 80050ec:	0159      	lsls	r1, r3, #5
 80050ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f2:	0150      	lsls	r0, r2, #5
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4641      	mov	r1, r8
 80050fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80050fe:	4649      	mov	r1, r9
 8005100:	eb63 0b01 	sbc.w	fp, r3, r1
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005110:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005114:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005118:	ebb2 040a 	subs.w	r4, r2, sl
 800511c:	eb63 050b 	sbc.w	r5, r3, fp
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	00eb      	lsls	r3, r5, #3
 800512a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512e:	00e2      	lsls	r2, r4, #3
 8005130:	4614      	mov	r4, r2
 8005132:	461d      	mov	r5, r3
 8005134:	4643      	mov	r3, r8
 8005136:	18e3      	adds	r3, r4, r3
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	464b      	mov	r3, r9
 800513c:	eb45 0303 	adc.w	r3, r5, r3
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800514e:	4629      	mov	r1, r5
 8005150:	028b      	lsls	r3, r1, #10
 8005152:	4621      	mov	r1, r4
 8005154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005158:	4621      	mov	r1, r4
 800515a:	028a      	lsls	r2, r1, #10
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005162:	2200      	movs	r2, #0
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	61fa      	str	r2, [r7, #28]
 8005168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800516c:	f7fb f8a0 	bl	80002b0 <__aeabi_uldivmod>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4613      	mov	r3, r2
 8005176:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005178:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	3301      	adds	r3, #1
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005188:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800518a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800518c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005190:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005192:	e002      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005194:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005196:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800519a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800519c:	4618      	mov	r0, r3
 800519e:	3750      	adds	r7, #80	@ 0x50
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
 80051ac:	00f42400 	.word	0x00f42400
 80051b0:	007a1200 	.word	0x007a1200

080051b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051b8:	4b03      	ldr	r3, [pc, #12]	@ (80051c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ba:	681b      	ldr	r3, [r3, #0]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000008 	.word	0x20000008

080051cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051d0:	f7ff fff0 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 80051d4:	4602      	mov	r2, r0
 80051d6:	4b05      	ldr	r3, [pc, #20]	@ (80051ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	0a9b      	lsrs	r3, r3, #10
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	4903      	ldr	r1, [pc, #12]	@ (80051f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e2:	5ccb      	ldrb	r3, [r1, r3]
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40023800 	.word	0x40023800
 80051f0:	0800b7b8 	.word	0x0800b7b8

080051f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e041      	b.n	800528a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc fbd8 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f000 fbce 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e041      	b.n	8005328 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fc fbb1 	bl	8001a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f000 fb7f 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e097      	b.n	8005474 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fc fabf 	bl	80018dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005374:	f023 0307 	bic.w	r3, r3, #7
 8005378:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f000 fb25 	bl	80059d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	4313      	orrs	r3, r2
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80053d0:	f023 030c 	bic.w	r3, r3, #12
 80053d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	4313      	orrs	r3, r2
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	011a      	lsls	r2, r3, #4
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	031b      	lsls	r3, r3, #12
 8005400:	4313      	orrs	r3, r2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	4313      	orrs	r3, r2
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d020      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01b      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0202 	mvn.w	r2, #2
 80054b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa65 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fa57 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa68 	bl	80059aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d020      	beq.n	800552c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0204 	mvn.w	r2, #4
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa3f 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa31 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fa42 	bl	80059aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d020      	beq.n	8005578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0208 	mvn.w	r2, #8
 8005548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2204      	movs	r2, #4
 800554e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa19 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 8005564:	e005      	b.n	8005572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa0b 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fa1c 	bl	80059aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	d020      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01b      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0210 	mvn.w	r2, #16
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2208      	movs	r2, #8
 800559a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f9f3 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9e5 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f9f6 	bl	80059aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0201 	mvn.w	r2, #1
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f9c3 	bl	800596e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fd0e 	bl	8006028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9c7 	bl	80059be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0220 	mvn.w	r2, #32
 800564c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fce0 	bl	8006014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005676:	2302      	movs	r3, #2
 8005678:	e0ae      	b.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b0c      	cmp	r3, #12
 8005686:	f200 809f 	bhi.w	80057c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800568a:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056c5 	.word	0x080056c5
 8005694:	080057c9 	.word	0x080057c9
 8005698:	080057c9 	.word	0x080057c9
 800569c:	080057c9 	.word	0x080057c9
 80056a0:	08005705 	.word	0x08005705
 80056a4:	080057c9 	.word	0x080057c9
 80056a8:	080057c9 	.word	0x080057c9
 80056ac:	080057c9 	.word	0x080057c9
 80056b0:	08005747 	.word	0x08005747
 80056b4:	080057c9 	.word	0x080057c9
 80056b8:	080057c9 	.word	0x080057c9
 80056bc:	080057c9 	.word	0x080057c9
 80056c0:	08005787 	.word	0x08005787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fa0e 	bl	8005aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0208 	orr.w	r2, r2, #8
 80056de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0204 	bic.w	r2, r2, #4
 80056ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6999      	ldr	r1, [r3, #24]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	619a      	str	r2, [r3, #24]
      break;
 8005702:	e064      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fa54 	bl	8005bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800571e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800572e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	021a      	lsls	r2, r3, #8
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	619a      	str	r2, [r3, #24]
      break;
 8005744:	e043      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fa9f 	bl	8005c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0208 	orr.w	r2, r2, #8
 8005760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0204 	bic.w	r2, r2, #4
 8005770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69d9      	ldr	r1, [r3, #28]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	61da      	str	r2, [r3, #28]
      break;
 8005784:	e023      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fae9 	bl	8005d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69d9      	ldr	r1, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	021a      	lsls	r2, r3, #8
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	61da      	str	r2, [r3, #28]
      break;
 80057c6:	e002      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	75fb      	strb	r3, [r7, #23]
      break;
 80057cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIM_ConfigClockSource+0x1c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0b4      	b.n	8005966 <HAL_TIM_ConfigClockSource+0x186>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800581a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005822:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005834:	d03e      	beq.n	80058b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800583a:	f200 8087 	bhi.w	800594c <HAL_TIM_ConfigClockSource+0x16c>
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005842:	f000 8086 	beq.w	8005952 <HAL_TIM_ConfigClockSource+0x172>
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584a:	d87f      	bhi.n	800594c <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b70      	cmp	r3, #112	@ 0x70
 800584e:	d01a      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0xa6>
 8005850:	2b70      	cmp	r3, #112	@ 0x70
 8005852:	d87b      	bhi.n	800594c <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b60      	cmp	r3, #96	@ 0x60
 8005856:	d050      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x11a>
 8005858:	2b60      	cmp	r3, #96	@ 0x60
 800585a:	d877      	bhi.n	800594c <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b50      	cmp	r3, #80	@ 0x50
 800585e:	d03c      	beq.n	80058da <HAL_TIM_ConfigClockSource+0xfa>
 8005860:	2b50      	cmp	r3, #80	@ 0x50
 8005862:	d873      	bhi.n	800594c <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b40      	cmp	r3, #64	@ 0x40
 8005866:	d058      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x13a>
 8005868:	2b40      	cmp	r3, #64	@ 0x40
 800586a:	d86f      	bhi.n	800594c <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b30      	cmp	r3, #48	@ 0x30
 800586e:	d064      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x15a>
 8005870:	2b30      	cmp	r3, #48	@ 0x30
 8005872:	d86b      	bhi.n	800594c <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b20      	cmp	r3, #32
 8005876:	d060      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x15a>
 8005878:	2b20      	cmp	r3, #32
 800587a:	d867      	bhi.n	800594c <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d05c      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x15a>
 8005880:	2b10      	cmp	r3, #16
 8005882:	d05a      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x15a>
 8005884:	e062      	b.n	800594c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005896:	f000 fb2f 	bl	8005ef8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	609a      	str	r2, [r3, #8]
      break;
 80058b2:	e04f      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058c4:	f000 fb18 	bl	8005ef8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058d6:	609a      	str	r2, [r3, #8]
      break;
 80058d8:	e03c      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 fa8c 	bl	8005e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2150      	movs	r1, #80	@ 0x50
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fae5 	bl	8005ec2 <TIM_ITRx_SetConfig>
      break;
 80058f8:	e02c      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005906:	461a      	mov	r2, r3
 8005908:	f000 faab 	bl	8005e62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2160      	movs	r1, #96	@ 0x60
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fad5 	bl	8005ec2 <TIM_ITRx_SetConfig>
      break;
 8005918:	e01c      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005926:	461a      	mov	r2, r3
 8005928:	f000 fa6c 	bl	8005e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2140      	movs	r1, #64	@ 0x40
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fac5 	bl	8005ec2 <TIM_ITRx_SetConfig>
      break;
 8005938:	e00c      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f000 fabc 	bl	8005ec2 <TIM_ITRx_SetConfig>
      break;
 800594a:	e003      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
      break;
 8005950:	e000      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005964:	7bfb      	ldrb	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a3a      	ldr	r2, [pc, #232]	@ (8005ad0 <TIM_Base_SetConfig+0xfc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a37      	ldr	r2, [pc, #220]	@ (8005ad4 <TIM_Base_SetConfig+0x100>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a36      	ldr	r2, [pc, #216]	@ (8005ad8 <TIM_Base_SetConfig+0x104>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a35      	ldr	r2, [pc, #212]	@ (8005adc <TIM_Base_SetConfig+0x108>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2b      	ldr	r2, [pc, #172]	@ (8005ad0 <TIM_Base_SetConfig+0xfc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2c:	d017      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a28      	ldr	r2, [pc, #160]	@ (8005ad4 <TIM_Base_SetConfig+0x100>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a27      	ldr	r2, [pc, #156]	@ (8005ad8 <TIM_Base_SetConfig+0x104>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a26      	ldr	r2, [pc, #152]	@ (8005adc <TIM_Base_SetConfig+0x108>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a25      	ldr	r2, [pc, #148]	@ (8005ae0 <TIM_Base_SetConfig+0x10c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a24      	ldr	r2, [pc, #144]	@ (8005ae4 <TIM_Base_SetConfig+0x110>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a23      	ldr	r2, [pc, #140]	@ (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad0 <TIM_Base_SetConfig+0xfc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d105      	bne.n	8005ac2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f023 0201 	bic.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40000400 	.word	0x40000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	40000c00 	.word	0x40000c00
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800

08005aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f023 0201 	bic.w	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0303 	bic.w	r3, r3, #3
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0302 	bic.w	r3, r3, #2
 8005b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb4 <TIM_OC1_SetConfig+0xc8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10c      	bne.n	8005b62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0308 	bic.w	r3, r3, #8
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a13      	ldr	r2, [pc, #76]	@ (8005bb4 <TIM_OC1_SetConfig+0xc8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d111      	bne.n	8005b8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40010000 	.word	0x40010000

08005bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f023 0210 	bic.w	r2, r3, #16
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 0320 	bic.w	r3, r3, #32
 8005c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1e      	ldr	r2, [pc, #120]	@ (8005c8c <TIM_OC2_SetConfig+0xd4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d10d      	bne.n	8005c34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a15      	ldr	r2, [pc, #84]	@ (8005c8c <TIM_OC2_SetConfig+0xd4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d113      	bne.n	8005c64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40010000 	.word	0x40010000

08005c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d60 <TIM_OC3_SetConfig+0xd0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10d      	bne.n	8005d0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a14      	ldr	r2, [pc, #80]	@ (8005d60 <TIM_OC3_SetConfig+0xd0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d113      	bne.n	8005d3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40010000 	.word	0x40010000

08005d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	031b      	lsls	r3, r3, #12
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a10      	ldr	r2, [pc, #64]	@ (8005e00 <TIM_OC4_SetConfig+0x9c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000

08005e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f023 0201 	bic.w	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f023 030a 	bic.w	r3, r3, #10
 8005e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f023 0210 	bic.w	r2, r3, #16
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	031b      	lsls	r3, r3, #12
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f043 0307 	orr.w	r3, r3, #7
 8005ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	609a      	str	r2, [r3, #8]
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	021a      	lsls	r2, r3, #8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	609a      	str	r2, [r3, #8]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e050      	b.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9c:	d013      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a15      	ldr	r2, [pc, #84]	@ (800600c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40014000 	.word	0x40014000

08006014 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800603c:	b084      	sub	sp, #16
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	f107 001c 	add.w	r0, r7, #28
 800604a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800604e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006052:	2b01      	cmp	r3, #1
 8006054:	d123      	bne.n	800609e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800606a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800607e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006082:	2b01      	cmp	r3, #1
 8006084:	d105      	bne.n	8006092 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fae8 	bl	8007668 <USB_CoreReset>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
 800609c:	e01b      	b.n	80060d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fadc 	bl	8007668 <USB_CoreReset>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80060c8:	e005      	b.n	80060d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060d6:	7fbb      	ldrb	r3, [r7, #30]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10b      	bne.n	80060f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f043 0206 	orr.w	r2, r3, #6
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f043 0220 	orr.w	r2, r3, #32
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006100:	b004      	add	sp, #16
 8006102:	4770      	bx	lr

08006104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d165      	bne.n	80061e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4a41      	ldr	r2, [pc, #260]	@ (8006220 <USB_SetTurnaroundTime+0x11c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d906      	bls.n	800612e <USB_SetTurnaroundTime+0x2a>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4a40      	ldr	r2, [pc, #256]	@ (8006224 <USB_SetTurnaroundTime+0x120>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d202      	bcs.n	800612e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006128:	230f      	movs	r3, #15
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e062      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	4a3c      	ldr	r2, [pc, #240]	@ (8006224 <USB_SetTurnaroundTime+0x120>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d306      	bcc.n	8006144 <USB_SetTurnaroundTime+0x40>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4a3b      	ldr	r2, [pc, #236]	@ (8006228 <USB_SetTurnaroundTime+0x124>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d202      	bcs.n	8006144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800613e:	230e      	movs	r3, #14
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	e057      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4a38      	ldr	r2, [pc, #224]	@ (8006228 <USB_SetTurnaroundTime+0x124>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d306      	bcc.n	800615a <USB_SetTurnaroundTime+0x56>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4a37      	ldr	r2, [pc, #220]	@ (800622c <USB_SetTurnaroundTime+0x128>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d202      	bcs.n	800615a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006154:	230d      	movs	r3, #13
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e04c      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4a33      	ldr	r2, [pc, #204]	@ (800622c <USB_SetTurnaroundTime+0x128>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d306      	bcc.n	8006170 <USB_SetTurnaroundTime+0x6c>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4a32      	ldr	r2, [pc, #200]	@ (8006230 <USB_SetTurnaroundTime+0x12c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d802      	bhi.n	8006170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800616a:	230c      	movs	r3, #12
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	e041      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4a2f      	ldr	r2, [pc, #188]	@ (8006230 <USB_SetTurnaroundTime+0x12c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d906      	bls.n	8006186 <USB_SetTurnaroundTime+0x82>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4a2e      	ldr	r2, [pc, #184]	@ (8006234 <USB_SetTurnaroundTime+0x130>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d802      	bhi.n	8006186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006180:	230b      	movs	r3, #11
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	e036      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4a2a      	ldr	r2, [pc, #168]	@ (8006234 <USB_SetTurnaroundTime+0x130>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d906      	bls.n	800619c <USB_SetTurnaroundTime+0x98>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4a29      	ldr	r2, [pc, #164]	@ (8006238 <USB_SetTurnaroundTime+0x134>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d802      	bhi.n	800619c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006196:	230a      	movs	r3, #10
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	e02b      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4a26      	ldr	r2, [pc, #152]	@ (8006238 <USB_SetTurnaroundTime+0x134>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d906      	bls.n	80061b2 <USB_SetTurnaroundTime+0xae>
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4a25      	ldr	r2, [pc, #148]	@ (800623c <USB_SetTurnaroundTime+0x138>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d202      	bcs.n	80061b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80061ac:	2309      	movs	r3, #9
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e020      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4a21      	ldr	r2, [pc, #132]	@ (800623c <USB_SetTurnaroundTime+0x138>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d306      	bcc.n	80061c8 <USB_SetTurnaroundTime+0xc4>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4a20      	ldr	r2, [pc, #128]	@ (8006240 <USB_SetTurnaroundTime+0x13c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d802      	bhi.n	80061c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80061c2:	2308      	movs	r3, #8
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e015      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006240 <USB_SetTurnaroundTime+0x13c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d906      	bls.n	80061de <USB_SetTurnaroundTime+0xda>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006244 <USB_SetTurnaroundTime+0x140>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d202      	bcs.n	80061de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80061d8:	2307      	movs	r3, #7
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	e00a      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80061de:	2306      	movs	r3, #6
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e007      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80061ea:	2309      	movs	r3, #9
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	e001      	b.n	80061f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80061f0:	2309      	movs	r3, #9
 80061f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800620c:	431a      	orrs	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	00d8acbf 	.word	0x00d8acbf
 8006224:	00e4e1c0 	.word	0x00e4e1c0
 8006228:	00f42400 	.word	0x00f42400
 800622c:	01067380 	.word	0x01067380
 8006230:	011a499f 	.word	0x011a499f
 8006234:	01312cff 	.word	0x01312cff
 8006238:	014ca43f 	.word	0x014ca43f
 800623c:	016e3600 	.word	0x016e3600
 8006240:	01a6ab1f 	.word	0x01a6ab1f
 8006244:	01e84800 	.word	0x01e84800

08006248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f043 0201 	orr.w	r2, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f023 0201 	bic.w	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d115      	bne.n	80062da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062ba:	200a      	movs	r0, #10
 80062bc:	f7fb fdc4 	bl	8001e48 <HAL_Delay>
      ms += 10U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	330a      	adds	r3, #10
 80062c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f93f 	bl	800754a <USB_GetMode>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d01e      	beq.n	8006310 <USB_SetCurrentMode+0x84>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80062d6:	d9f0      	bls.n	80062ba <USB_SetCurrentMode+0x2e>
 80062d8:	e01a      	b.n	8006310 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d115      	bne.n	800630c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062ec:	200a      	movs	r0, #10
 80062ee:	f7fb fdab 	bl	8001e48 <HAL_Delay>
      ms += 10U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	330a      	adds	r3, #10
 80062f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f926 	bl	800754a <USB_GetMode>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <USB_SetCurrentMode+0x84>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2bc7      	cmp	r3, #199	@ 0xc7
 8006308:	d9f0      	bls.n	80062ec <USB_SetCurrentMode+0x60>
 800630a:	e001      	b.n	8006310 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e005      	b.n	800631c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2bc8      	cmp	r3, #200	@ 0xc8
 8006314:	d101      	bne.n	800631a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006324:	b084      	sub	sp, #16
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800633e:	2300      	movs	r3, #0
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	e009      	b.n	8006358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3340      	adds	r3, #64	@ 0x40
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	2200      	movs	r2, #0
 8006350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	3301      	adds	r3, #1
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b0e      	cmp	r3, #14
 800635c:	d9f2      	bls.n	8006344 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800635e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11c      	bne.n	80063a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006374:	f043 0302 	orr.w	r3, r3, #2
 8006378:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006396:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	639a      	str	r2, [r3, #56]	@ 0x38
 800639e:	e00b      	b.n	80063b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063be:	461a      	mov	r2, r3
 80063c0:	2300      	movs	r3, #0
 80063c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d10d      	bne.n	80063e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063d4:	2100      	movs	r1, #0
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f968 	bl	80066ac <USB_SetDevSpeed>
 80063dc:	e008      	b.n	80063f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063de:	2101      	movs	r1, #1
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f963 	bl	80066ac <USB_SetDevSpeed>
 80063e6:	e003      	b.n	80063f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063e8:	2103      	movs	r1, #3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f95e 	bl	80066ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063f0:	2110      	movs	r1, #16
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8fa 	bl	80065ec <USB_FlushTxFifo>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f924 	bl	8006650 <USB_FlushRxFifo>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006418:	461a      	mov	r2, r3
 800641a:	2300      	movs	r3, #0
 800641c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006430:	461a      	mov	r2, r3
 8006432:	2300      	movs	r3, #0
 8006434:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	e043      	b.n	80064c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800644e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006452:	d118      	bne.n	8006486 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006466:	461a      	mov	r2, r3
 8006468:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e013      	b.n	8006498 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647c:	461a      	mov	r2, r3
 800647e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e008      	b.n	8006498 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006492:	461a      	mov	r2, r3
 8006494:	2300      	movs	r3, #0
 8006496:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a4:	461a      	mov	r2, r3
 80064a6:	2300      	movs	r3, #0
 80064a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b6:	461a      	mov	r2, r3
 80064b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	3301      	adds	r3, #1
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064c8:	461a      	mov	r2, r3
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d3b5      	bcc.n	800643c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064d0:	2300      	movs	r3, #0
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	e043      	b.n	800655e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ec:	d118      	bne.n	8006520 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006500:	461a      	mov	r2, r3
 8006502:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e013      	b.n	8006532 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006516:	461a      	mov	r2, r3
 8006518:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	e008      	b.n	8006532 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652c:	461a      	mov	r2, r3
 800652e:	2300      	movs	r3, #0
 8006530:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653e:	461a      	mov	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006550:	461a      	mov	r2, r3
 8006552:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006556:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3301      	adds	r3, #1
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006562:	461a      	mov	r2, r3
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4293      	cmp	r3, r2
 8006568:	d3b5      	bcc.n	80064d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800657c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800658a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800658c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006590:	2b00      	cmp	r3, #0
 8006592:	d105      	bne.n	80065a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f043 0210 	orr.w	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	4b10      	ldr	r3, [pc, #64]	@ (80065e8 <USB_DevInit+0x2c4>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f043 0208 	orr.w	r2, r3, #8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d107      	bne.n	80065d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065d0:	f043 0304 	orr.w	r3, r3, #4
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065e4:	b004      	add	sp, #16
 80065e6:	4770      	bx	lr
 80065e8:	803c3800 	.word	0x803c3800

080065ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006606:	d901      	bls.n	800660c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e01b      	b.n	8006644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	daf2      	bge.n	80065fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	019b      	lsls	r3, r3, #6
 800661c:	f043 0220 	orr.w	r2, r3, #32
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006630:	d901      	bls.n	8006636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e006      	b.n	8006644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b20      	cmp	r3, #32
 8006640:	d0f0      	beq.n	8006624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006668:	d901      	bls.n	800666e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e018      	b.n	80066a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	daf2      	bge.n	800665c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2210      	movs	r2, #16
 800667e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3301      	adds	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800668c:	d901      	bls.n	8006692 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e006      	b.n	80066a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b10      	cmp	r3, #16
 800669c:	d0f0      	beq.n	8006680 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	68f9      	ldr	r1, [r7, #12]
 80066c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0306 	and.w	r3, r3, #6
 80066f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d102      	bne.n	8006704 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
 8006702:	e00a      	b.n	800671a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d002      	beq.n	8006710 <USB_GetDevSpeed+0x32>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b06      	cmp	r3, #6
 800670e:	d102      	bne.n	8006716 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006710:	2302      	movs	r3, #2
 8006712:	75fb      	strb	r3, [r7, #23]
 8006714:	e001      	b.n	800671a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006716:	230f      	movs	r3, #15
 8006718:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800671a:	7dfb      	ldrb	r3, [r7, #23]
}
 800671c:	4618      	mov	r0, r3
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d13a      	bne.n	80067ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	2101      	movs	r1, #1
 8006756:	fa01 f303 	lsl.w	r3, r1, r3
 800675a:	b29b      	uxth	r3, r3
 800675c:	68f9      	ldr	r1, [r7, #12]
 800675e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006762:	4313      	orrs	r3, r2
 8006764:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d155      	bne.n	8006828 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	791b      	ldrb	r3, [r3, #4]
 8006796:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006798:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	059b      	lsls	r3, r3, #22
 800679e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067a0:	4313      	orrs	r3, r2
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e036      	b.n	8006828 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c0:	69da      	ldr	r2, [r3, #28]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	2101      	movs	r1, #1
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	041b      	lsls	r3, r3, #16
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067d8:	4313      	orrs	r3, r2
 80067da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11a      	bne.n	8006828 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	791b      	ldrb	r3, [r3, #4]
 800680c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800680e:	430b      	orrs	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800681e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006826:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d161      	bne.n	8006918 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800686a:	d11f      	bne.n	80068ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006886:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800688a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	43db      	mvns	r3, r3
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068cc:	4013      	ands	r3, r2
 80068ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	2101      	movs	r1, #1
 80068e2:	fa01 f303 	lsl.w	r3, r1, r3
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	43db      	mvns	r3, r3
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068f0:	4013      	ands	r3, r2
 80068f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	0159      	lsls	r1, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	440b      	add	r3, r1
 800690a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690e:	4619      	mov	r1, r3
 8006910:	4b35      	ldr	r3, [pc, #212]	@ (80069e8 <USB_DeactivateEndpoint+0x1b0>)
 8006912:	4013      	ands	r3, r2
 8006914:	600b      	str	r3, [r1, #0]
 8006916:	e060      	b.n	80069da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800692a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800692e:	d11f      	bne.n	8006970 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800694a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800694e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800696a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800696e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	2101      	movs	r1, #1
 8006982:	fa01 f303 	lsl.w	r3, r1, r3
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	43db      	mvns	r3, r3
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006990:	4013      	ands	r3, r2
 8006992:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	2101      	movs	r1, #1
 80069a6:	fa01 f303 	lsl.w	r3, r1, r3
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	43db      	mvns	r3, r3
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069b4:	4013      	ands	r3, r2
 80069b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	0159      	lsls	r1, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	440b      	add	r3, r1
 80069ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d2:	4619      	mov	r1, r3
 80069d4:	4b05      	ldr	r3, [pc, #20]	@ (80069ec <USB_DeactivateEndpoint+0x1b4>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	ec337800 	.word	0xec337800
 80069ec:	eff37800 	.word	0xeff37800

080069f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	@ 0x28
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	f040 817f 	bne.w	8006d10 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d132      	bne.n	8006a80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a78:	0cdb      	lsrs	r3, r3, #19
 8006a7a:	04db      	lsls	r3, r3, #19
 8006a7c:	6113      	str	r3, [r2, #16]
 8006a7e:	e097      	b.n	8006bb0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9a:	0cdb      	lsrs	r3, r3, #19
 8006a9c:	04db      	lsls	r3, r3, #19
 8006a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006abe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ac2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d11a      	bne.n	8006b00 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d903      	bls.n	8006ade <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006afc:	6113      	str	r3, [r2, #16]
 8006afe:	e044      	b.n	8006b8a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	4413      	add	r3, r2
 8006b0a:	1e5a      	subs	r2, r3, #1
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	8afb      	ldrh	r3, [r7, #22]
 8006b26:	04d9      	lsls	r1, r3, #19
 8006b28:	4ba4      	ldr	r3, [pc, #656]	@ (8006dbc <USB_EPStartXfer+0x3cc>)
 8006b2a:	400b      	ands	r3, r1
 8006b2c:	69b9      	ldr	r1, [r7, #24]
 8006b2e:	0148      	lsls	r0, r1, #5
 8006b30:	69f9      	ldr	r1, [r7, #28]
 8006b32:	4401      	add	r1, r0
 8006b34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	791b      	ldrb	r3, [r3, #4]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d122      	bne.n	8006b8a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b5e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006b62:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	8afb      	ldrh	r3, [r7, #22]
 8006b74:	075b      	lsls	r3, r3, #29
 8006b76:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006b7a:	69b9      	ldr	r1, [r7, #24]
 8006b7c:	0148      	lsls	r0, r1, #5
 8006b7e:	69f9      	ldr	r1, [r7, #28]
 8006b80:	4401      	add	r1, r0
 8006b82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b86:	4313      	orrs	r3, r2
 8006b88:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	0148      	lsls	r0, r1, #5
 8006ba4:	69f9      	ldr	r1, [r7, #28]
 8006ba6:	4401      	add	r1, r0
 8006ba8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bac:	4313      	orrs	r3, r2
 8006bae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d14b      	bne.n	8006c4e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d128      	bne.n	8006c2c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d110      	bne.n	8006c0c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	69fa      	ldr	r2, [r7, #28]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	e00f      	b.n	8006c2c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	e166      	b.n	8006f1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c6c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d015      	beq.n	8006ca2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 814e 	beq.w	8006f1c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	2101      	movs	r1, #1
 8006c92:	fa01 f303 	lsl.w	r3, r1, r3
 8006c96:	69f9      	ldr	r1, [r7, #28]
 8006c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006ca0:	e13c      	b.n	8006f1c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d110      	bne.n	8006cd4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ccc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	e00f      	b.n	8006cf4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cf2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	68d9      	ldr	r1, [r3, #12]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	b298      	uxth	r0, r3
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	4603      	mov	r3, r0
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f9b9 	bl	8007080 <USB_WritePacket>
 8006d0e:	e105      	b.n	8006f1c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d2a:	0cdb      	lsrs	r3, r3, #19
 8006d2c:	04db      	lsls	r3, r3, #19
 8006d2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d52:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d132      	bne.n	8006dc0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d88:	69b9      	ldr	r1, [r7, #24]
 8006d8a:	0148      	lsls	r0, r1, #5
 8006d8c:	69f9      	ldr	r1, [r7, #28]
 8006d8e:	4401      	add	r1, r0
 8006d90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d94:	4313      	orrs	r3, r2
 8006d96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006db6:	6113      	str	r3, [r2, #16]
 8006db8:	e062      	b.n	8006e80 <USB_EPStartXfer+0x490>
 8006dba:	bf00      	nop
 8006dbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d123      	bne.n	8006e10 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dde:	69b9      	ldr	r1, [r7, #24]
 8006de0:	0148      	lsls	r0, r1, #5
 8006de2:	69f9      	ldr	r1, [r7, #28]
 8006de4:	4401      	add	r1, r0
 8006de6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006dea:	4313      	orrs	r3, r2
 8006dec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e0c:	6113      	str	r3, [r2, #16]
 8006e0e:	e037      	b.n	8006e80 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	4413      	add	r3, r2
 8006e1a:	1e5a      	subs	r2, r3, #1
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	8afa      	ldrh	r2, [r7, #22]
 8006e2c:	fb03 f202 	mul.w	r2, r3, r2
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	8afb      	ldrh	r3, [r7, #22]
 8006e44:	04d9      	lsls	r1, r3, #19
 8006e46:	4b38      	ldr	r3, [pc, #224]	@ (8006f28 <USB_EPStartXfer+0x538>)
 8006e48:	400b      	ands	r3, r1
 8006e4a:	69b9      	ldr	r1, [r7, #24]
 8006e4c:	0148      	lsls	r0, r1, #5
 8006e4e:	69f9      	ldr	r1, [r7, #28]
 8006e50:	4401      	add	r1, r0
 8006e52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e56:	4313      	orrs	r3, r2
 8006e58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e70:	69b9      	ldr	r1, [r7, #24]
 8006e72:	0148      	lsls	r0, r1, #5
 8006e74:	69f9      	ldr	r1, [r7, #28]
 8006e76:	4401      	add	r1, r0
 8006e78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d10d      	bne.n	8006ea2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68d9      	ldr	r1, [r3, #12]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9e:	460a      	mov	r2, r1
 8006ea0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	791b      	ldrb	r3, [r3, #4]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d128      	bne.n	8006efc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d110      	bne.n	8006edc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e00f      	b.n	8006efc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	0151      	lsls	r1, r2, #5
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	440a      	add	r2, r1
 8006f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	1ff80000 	.word	0x1ff80000

08006f2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d14a      	bne.n	8006fe0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f62:	f040 8086 	bne.w	8007072 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	7812      	ldrb	r2, [r2, #0]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d902      	bls.n	8006fc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fc2:	e056      	b.n	8007072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fdc:	d0e7      	beq.n	8006fae <USB_EPStopXfer+0x82>
 8006fde:	e048      	b.n	8007072 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ff8:	d13b      	bne.n	8007072 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007018:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800701c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800703c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800704e:	4293      	cmp	r3, r2
 8007050:	d902      	bls.n	8007058 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
          break;
 8007056:	e00c      	b.n	8007072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800706c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007070:	d0e7      	beq.n	8007042 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
}
 8007074:	4618      	mov	r0, r3
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	@ 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	4611      	mov	r1, r2
 800708c:	461a      	mov	r2, r3
 800708e:	460b      	mov	r3, r1
 8007090:	71fb      	strb	r3, [r7, #7]
 8007092:	4613      	mov	r3, r2
 8007094:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800709e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d123      	bne.n	80070ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070a6:	88bb      	ldrh	r3, [r7, #4]
 80070a8:	3303      	adds	r3, #3
 80070aa:	089b      	lsrs	r3, r3, #2
 80070ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e018      	b.n	80070e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	031a      	lsls	r2, r3, #12
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070c0:	461a      	mov	r2, r3
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	3301      	adds	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3301      	adds	r3, #1
 80070d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	3301      	adds	r3, #1
 80070de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	3301      	adds	r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3e2      	bcc.n	80070b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3724      	adds	r7, #36	@ 0x24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b08b      	sub	sp, #44	@ 0x2c
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	089b      	lsrs	r3, r3, #2
 8007116:	b29b      	uxth	r3, r3
 8007118:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007122:	2300      	movs	r3, #0
 8007124:	623b      	str	r3, [r7, #32]
 8007126:	e014      	b.n	8007152 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	601a      	str	r2, [r3, #0]
    pDest++;
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	3301      	adds	r3, #1
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	3301      	adds	r3, #1
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	3301      	adds	r3, #1
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	3301      	adds	r3, #1
 800714a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	3301      	adds	r3, #1
 8007150:	623b      	str	r3, [r7, #32]
 8007152:	6a3a      	ldr	r2, [r7, #32]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	429a      	cmp	r2, r3
 8007158:	d3e6      	bcc.n	8007128 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800715a:	8bfb      	ldrh	r3, [r7, #30]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01e      	beq.n	800719e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800716a:	461a      	mov	r2, r3
 800716c:	f107 0310 	add.w	r3, r7, #16
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	b2da      	uxtb	r2, r3
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	701a      	strb	r2, [r3, #0]
      i++;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	3301      	adds	r3, #1
 800718a:	623b      	str	r3, [r7, #32]
      pDest++;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	3301      	adds	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007192:	8bfb      	ldrh	r3, [r7, #30]
 8007194:	3b01      	subs	r3, #1
 8007196:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007198:	8bfb      	ldrh	r3, [r7, #30]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1ea      	bne.n	8007174 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	372c      	adds	r7, #44	@ 0x2c
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d12c      	bne.n	8007222 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	db12      	blt.n	8007200 <USB_EPSetStall+0x54>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00f      	beq.n	8007200 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	0151      	lsls	r1, r2, #5
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	440a      	add	r2, r1
 80071f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	0151      	lsls	r1, r2, #5
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	440a      	add	r2, r1
 8007216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800721a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	e02b      	b.n	800727a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	db12      	blt.n	800725a <USB_EPSetStall+0xae>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00f      	beq.n	800725a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	0151      	lsls	r1, r2, #5
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	440a      	add	r2, r1
 8007250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007254:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007258:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d128      	bne.n	80072f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	791b      	ldrb	r3, [r3, #4]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d003      	beq.n	80072d4 <USB_EPClearStall+0x4c>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	791b      	ldrb	r3, [r3, #4]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d138      	bne.n	8007346 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	e027      	b.n	8007346 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007310:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007314:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	791b      	ldrb	r3, [r3, #4]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d003      	beq.n	8007326 <USB_EPClearStall+0x9e>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d10f      	bne.n	8007346 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007344:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007372:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007376:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007388:	68f9      	ldr	r1, [r7, #12]
 800738a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800738e:	4313      	orrs	r3, r2
 8007390:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ce:	f023 0302 	bic.w	r3, r3, #2
 80073d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80073fc:	f023 0303 	bic.w	r3, r3, #3
 8007400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007410:	f043 0302 	orr.w	r3, r3, #2
 8007414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4013      	ands	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800743c:	68fb      	ldr	r3, [r7, #12]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	4013      	ands	r3, r2
 800746c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	0c1b      	lsrs	r3, r3, #16
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	4013      	ands	r3, r2
 80074a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	b29b      	uxth	r3, r3
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074e0:	68bb      	ldr	r3, [r7, #8]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007510:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	fa22 f303 	lsr.w	r3, r2, r3
 800751e:	01db      	lsls	r3, r3, #7
 8007520:	b2db      	uxtb	r3, r3
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4013      	ands	r3, r2
 800753a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800753c:	68bb      	ldr	r3, [r7, #8]
}
 800753e:	4618      	mov	r0, r3
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f003 0301 	and.w	r3, r3, #1
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007580:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007584:	f023 0307 	bic.w	r3, r3, #7
 8007588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800759c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	460b      	mov	r3, r1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	333c      	adds	r3, #60	@ 0x3c
 80075c2:	3304      	adds	r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	4a26      	ldr	r2, [pc, #152]	@ (8007664 <USB_EP0_OutStart+0xb8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d90a      	bls.n	80075e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075e0:	d101      	bne.n	80075e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e037      	b.n	8007656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007614:	f043 0318 	orr.w	r3, r3, #24
 8007618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007628:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800762c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800762e:	7afb      	ldrb	r3, [r7, #11]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d10f      	bne.n	8007654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800764e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	4f54300a 	.word	0x4f54300a

08007668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007680:	d901      	bls.n	8007686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e01b      	b.n	80076be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	daf2      	bge.n	8007674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f043 0201 	orr.w	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076aa:	d901      	bls.n	80076b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e006      	b.n	80076be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d0f0      	beq.n	800769e <USB_CoreReset+0x36>

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
	...

080076cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076d8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80076dc:	f002 fcc4 	bl	800a068 <USBD_static_malloc>
 80076e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d109      	bne.n	80076fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	32b0      	adds	r2, #176	@ 0xb0
 80076f2:	2100      	movs	r1, #0
 80076f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80076f8:	2302      	movs	r3, #2
 80076fa:	e0d4      	b.n	80078a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80076fc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007700:	2100      	movs	r1, #0
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f002 feb5 	bl	800a472 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	32b0      	adds	r2, #176	@ 0xb0
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	32b0      	adds	r2, #176	@ 0xb0
 8007722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7c1b      	ldrb	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d138      	bne.n	80077a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007734:	4b5e      	ldr	r3, [pc, #376]	@ (80078b0 <USBD_CDC_Init+0x1e4>)
 8007736:	7819      	ldrb	r1, [r3, #0]
 8007738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800773c:	2202      	movs	r2, #2
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f002 fb6f 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007744:	4b5a      	ldr	r3, [pc, #360]	@ (80078b0 <USBD_CDC_Init+0x1e4>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	3324      	adds	r3, #36	@ 0x24
 800775a:	2201      	movs	r2, #1
 800775c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800775e:	4b55      	ldr	r3, [pc, #340]	@ (80078b4 <USBD_CDC_Init+0x1e8>)
 8007760:	7819      	ldrb	r1, [r3, #0]
 8007762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007766:	2202      	movs	r2, #2
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f002 fb5a 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800776e:	4b51      	ldr	r3, [pc, #324]	@ (80078b4 <USBD_CDC_Init+0x1e8>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f003 020f 	and.w	r2, r3, #15
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007786:	2201      	movs	r2, #1
 8007788:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800778a:	4b4b      	ldr	r3, [pc, #300]	@ (80078b8 <USBD_CDC_Init+0x1ec>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	f003 020f 	and.w	r2, r3, #15
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	3326      	adds	r3, #38	@ 0x26
 80077a0:	2210      	movs	r2, #16
 80077a2:	801a      	strh	r2, [r3, #0]
 80077a4:	e035      	b.n	8007812 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077a6:	4b42      	ldr	r3, [pc, #264]	@ (80078b0 <USBD_CDC_Init+0x1e4>)
 80077a8:	7819      	ldrb	r1, [r3, #0]
 80077aa:	2340      	movs	r3, #64	@ 0x40
 80077ac:	2202      	movs	r2, #2
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f002 fb37 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077b4:	4b3e      	ldr	r3, [pc, #248]	@ (80078b0 <USBD_CDC_Init+0x1e4>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 020f 	and.w	r2, r3, #15
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	3324      	adds	r3, #36	@ 0x24
 80077ca:	2201      	movs	r2, #1
 80077cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077ce:	4b39      	ldr	r3, [pc, #228]	@ (80078b4 <USBD_CDC_Init+0x1e8>)
 80077d0:	7819      	ldrb	r1, [r3, #0]
 80077d2:	2340      	movs	r3, #64	@ 0x40
 80077d4:	2202      	movs	r2, #2
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f002 fb23 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077dc:	4b35      	ldr	r3, [pc, #212]	@ (80078b4 <USBD_CDC_Init+0x1e8>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80077f4:	2201      	movs	r2, #1
 80077f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80077f8:	4b2f      	ldr	r3, [pc, #188]	@ (80078b8 <USBD_CDC_Init+0x1ec>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3326      	adds	r3, #38	@ 0x26
 800780e:	2210      	movs	r2, #16
 8007810:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007812:	4b29      	ldr	r3, [pc, #164]	@ (80078b8 <USBD_CDC_Init+0x1ec>)
 8007814:	7819      	ldrb	r1, [r3, #0]
 8007816:	2308      	movs	r3, #8
 8007818:	2203      	movs	r2, #3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f002 fb01 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007820:	4b25      	ldr	r3, [pc, #148]	@ (80078b8 <USBD_CDC_Init+0x1ec>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	f003 020f 	and.w	r2, r3, #15
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3324      	adds	r3, #36	@ 0x24
 8007836:	2201      	movs	r2, #1
 8007838:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	33b0      	adds	r3, #176	@ 0xb0
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007870:	2302      	movs	r3, #2
 8007872:	e018      	b.n	80078a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	7c1b      	ldrb	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800787c:	4b0d      	ldr	r3, [pc, #52]	@ (80078b4 <USBD_CDC_Init+0x1e8>)
 800787e:	7819      	ldrb	r1, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f002 fbb8 	bl	800a000 <USBD_LL_PrepareReceive>
 8007890:	e008      	b.n	80078a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007892:	4b08      	ldr	r3, [pc, #32]	@ (80078b4 <USBD_CDC_Init+0x1e8>)
 8007894:	7819      	ldrb	r1, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800789c:	2340      	movs	r3, #64	@ 0x40
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f002 fbae 	bl	800a000 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	2000009b 	.word	0x2000009b
 80078b4:	2000009c 	.word	0x2000009c
 80078b8:	2000009d 	.word	0x2000009d

080078bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80078c8:	4b3a      	ldr	r3, [pc, #232]	@ (80079b4 <USBD_CDC_DeInit+0xf8>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f002 facd 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80078d4:	4b37      	ldr	r3, [pc, #220]	@ (80079b4 <USBD_CDC_DeInit+0xf8>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f003 020f 	and.w	r2, r3, #15
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	3324      	adds	r3, #36	@ 0x24
 80078ea:	2200      	movs	r2, #0
 80078ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80078ee:	4b32      	ldr	r3, [pc, #200]	@ (80079b8 <USBD_CDC_DeInit+0xfc>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f002 faba 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80078fa:	4b2f      	ldr	r3, [pc, #188]	@ (80079b8 <USBD_CDC_DeInit+0xfc>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	f003 020f 	and.w	r2, r3, #15
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007912:	2200      	movs	r2, #0
 8007914:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007916:	4b29      	ldr	r3, [pc, #164]	@ (80079bc <USBD_CDC_DeInit+0x100>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f002 faa6 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007922:	4b26      	ldr	r3, [pc, #152]	@ (80079bc <USBD_CDC_DeInit+0x100>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	f003 020f 	and.w	r2, r3, #15
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	3324      	adds	r3, #36	@ 0x24
 8007938:	2200      	movs	r2, #0
 800793a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800793c:	4b1f      	ldr	r3, [pc, #124]	@ (80079bc <USBD_CDC_DeInit+0x100>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f003 020f 	and.w	r2, r3, #15
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	3326      	adds	r3, #38	@ 0x26
 8007952:	2200      	movs	r2, #0
 8007954:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	32b0      	adds	r2, #176	@ 0xb0
 8007960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01f      	beq.n	80079a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	33b0      	adds	r3, #176	@ 0xb0
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32b0      	adds	r2, #176	@ 0xb0
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	4618      	mov	r0, r3
 800798c:	f002 fb7a 	bl	800a084 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32b0      	adds	r2, #176	@ 0xb0
 800799a:	2100      	movs	r1, #0
 800799c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	2000009b 	.word	0x2000009b
 80079b8:	2000009c 	.word	0x2000009c
 80079bc:	2000009d 	.word	0x2000009d

080079c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	32b0      	adds	r2, #176	@ 0xb0
 80079d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e0bf      	b.n	8007b70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d050      	beq.n	8007a9e <USBD_CDC_Setup+0xde>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	f040 80af 	bne.w	8007b60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d03a      	beq.n	8007a80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	b25b      	sxtb	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	da1b      	bge.n	8007a4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	33b0      	adds	r3, #176	@ 0xb0
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	88d2      	ldrh	r2, [r2, #6]
 8007a30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	88db      	ldrh	r3, [r3, #6]
 8007a36:	2b07      	cmp	r3, #7
 8007a38:	bf28      	it	cs
 8007a3a:	2307      	movcs	r3, #7
 8007a3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	89fa      	ldrh	r2, [r7, #14]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fd93 	bl	8009570 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007a4a:	e090      	b.n	8007b6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	785a      	ldrb	r2, [r3, #1]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	88db      	ldrh	r3, [r3, #6]
 8007a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007a5c:	d803      	bhi.n	8007a66 <USBD_CDC_Setup+0xa6>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	88db      	ldrh	r3, [r3, #6]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	e000      	b.n	8007a68 <USBD_CDC_Setup+0xa8>
 8007a66:	2240      	movs	r2, #64	@ 0x40
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007a6e:	6939      	ldr	r1, [r7, #16]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007a76:	461a      	mov	r2, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fda5 	bl	80095c8 <USBD_CtlPrepareRx>
      break;
 8007a7e:	e076      	b.n	8007b6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	33b0      	adds	r3, #176	@ 0xb0
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	7850      	ldrb	r0, [r2, #1]
 8007a96:	2200      	movs	r2, #0
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	4798      	blx	r3
      break;
 8007a9c:	e067      	b.n	8007b6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	2b0b      	cmp	r3, #11
 8007aa4:	d851      	bhi.n	8007b4a <USBD_CDC_Setup+0x18a>
 8007aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8007aac <USBD_CDC_Setup+0xec>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007add 	.word	0x08007add
 8007ab0:	08007b59 	.word	0x08007b59
 8007ab4:	08007b4b 	.word	0x08007b4b
 8007ab8:	08007b4b 	.word	0x08007b4b
 8007abc:	08007b4b 	.word	0x08007b4b
 8007ac0:	08007b4b 	.word	0x08007b4b
 8007ac4:	08007b4b 	.word	0x08007b4b
 8007ac8:	08007b4b 	.word	0x08007b4b
 8007acc:	08007b4b 	.word	0x08007b4b
 8007ad0:	08007b4b 	.word	0x08007b4b
 8007ad4:	08007b07 	.word	0x08007b07
 8007ad8:	08007b31 	.word	0x08007b31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d107      	bne.n	8007af8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ae8:	f107 030a 	add.w	r3, r7, #10
 8007aec:	2202      	movs	r2, #2
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fd3d 	bl	8009570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007af6:	e032      	b.n	8007b5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fcbb 	bl	8009476 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	75fb      	strb	r3, [r7, #23]
          break;
 8007b04:	e02b      	b.n	8007b5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d107      	bne.n	8007b22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b12:	f107 030d 	add.w	r3, r7, #13
 8007b16:	2201      	movs	r2, #1
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fd28 	bl	8009570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b20:	e01d      	b.n	8007b5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fca6 	bl	8009476 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b2e:	e016      	b.n	8007b5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d00f      	beq.n	8007b5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 fc99 	bl	8009476 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b44:	2303      	movs	r3, #3
 8007b46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b48:	e008      	b.n	8007b5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 fc92 	bl	8009476 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b52:	2303      	movs	r3, #3
 8007b54:	75fb      	strb	r3, [r7, #23]
          break;
 8007b56:	e002      	b.n	8007b5e <USBD_CDC_Setup+0x19e>
          break;
 8007b58:	bf00      	nop
 8007b5a:	e008      	b.n	8007b6e <USBD_CDC_Setup+0x1ae>
          break;
 8007b5c:	bf00      	nop
      }
      break;
 8007b5e:	e006      	b.n	8007b6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 fc87 	bl	8009476 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	32b0      	adds	r2, #176	@ 0xb0
 8007b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e065      	b.n	8007c6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	32b0      	adds	r2, #176	@ 0xb0
 8007bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	f003 020f 	and.w	r2, r3, #15
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d02f      	beq.n	8007c2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	f003 020f 	and.w	r2, r3, #15
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3318      	adds	r3, #24
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	f003 010f 	and.w	r1, r3, #15
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	460b      	mov	r3, r1
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	440b      	add	r3, r1
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4403      	add	r3, r0
 8007bf4:	331c      	adds	r3, #28
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bfc:	fb01 f303 	mul.w	r3, r1, r3
 8007c00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d112      	bne.n	8007c2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	f003 020f 	and.w	r2, r3, #15
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	3318      	adds	r3, #24
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c1e:	78f9      	ldrb	r1, [r7, #3]
 8007c20:	2300      	movs	r3, #0
 8007c22:	2200      	movs	r2, #0
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f002 f9ca 	bl	8009fbe <USBD_LL_Transmit>
 8007c2a:	e01f      	b.n	8007c6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	33b0      	adds	r3, #176	@ 0xb0
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d010      	beq.n	8007c6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	33b0      	adds	r3, #176	@ 0xb0
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007c68:	78fa      	ldrb	r2, [r7, #3]
 8007c6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	32b0      	adds	r2, #176	@ 0xb0
 8007c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	32b0      	adds	r2, #176	@ 0xb0
 8007c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e01a      	b.n	8007cde <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f002 f9c8 	bl	800a042 <USBD_LL_GetRxDataSize>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	33b0      	adds	r3, #176	@ 0xb0
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	32b0      	adds	r2, #176	@ 0xb0
 8007cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e024      	b.n	8007d52 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	33b0      	adds	r3, #176	@ 0xb0
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d019      	beq.n	8007d50 <USBD_CDC_EP0_RxReady+0x6a>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007d22:	2bff      	cmp	r3, #255	@ 0xff
 8007d24:	d014      	beq.n	8007d50 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	33b0      	adds	r3, #176	@ 0xb0
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007d3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	22ff      	movs	r2, #255	@ 0xff
 8007d4c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d64:	2182      	movs	r1, #130	@ 0x82
 8007d66:	4818      	ldr	r0, [pc, #96]	@ (8007dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d68:	f000 fd4f 	bl	800880a <USBD_GetEpDesc>
 8007d6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d6e:	2101      	movs	r1, #1
 8007d70:	4815      	ldr	r0, [pc, #84]	@ (8007dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d72:	f000 fd4a 	bl	800880a <USBD_GetEpDesc>
 8007d76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d78:	2181      	movs	r1, #129	@ 0x81
 8007d7a:	4813      	ldr	r0, [pc, #76]	@ (8007dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d7c:	f000 fd45 	bl	800880a <USBD_GetEpDesc>
 8007d80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2210      	movs	r2, #16
 8007d8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d006      	beq.n	8007da2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d9c:	711a      	strb	r2, [r3, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d006      	beq.n	8007db6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007db0:	711a      	strb	r2, [r3, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2243      	movs	r2, #67	@ 0x43
 8007dba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dbc:	4b02      	ldr	r3, [pc, #8]	@ (8007dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000058 	.word	0x20000058

08007dcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007dd4:	2182      	movs	r1, #130	@ 0x82
 8007dd6:	4818      	ldr	r0, [pc, #96]	@ (8007e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007dd8:	f000 fd17 	bl	800880a <USBD_GetEpDesc>
 8007ddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dde:	2101      	movs	r1, #1
 8007de0:	4815      	ldr	r0, [pc, #84]	@ (8007e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007de2:	f000 fd12 	bl	800880a <USBD_GetEpDesc>
 8007de6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007de8:	2181      	movs	r1, #129	@ 0x81
 8007dea:	4813      	ldr	r0, [pc, #76]	@ (8007e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007dec:	f000 fd0d 	bl	800880a <USBD_GetEpDesc>
 8007df0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2210      	movs	r2, #16
 8007dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d006      	beq.n	8007e12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2200      	movs	r2, #0
 8007e08:	711a      	strb	r2, [r3, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f042 0202 	orr.w	r2, r2, #2
 8007e10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d006      	beq.n	8007e26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	711a      	strb	r2, [r3, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f042 0202 	orr.w	r2, r2, #2
 8007e24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2243      	movs	r2, #67	@ 0x43
 8007e2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e2c:	4b02      	ldr	r3, [pc, #8]	@ (8007e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000058 	.word	0x20000058

08007e3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e44:	2182      	movs	r1, #130	@ 0x82
 8007e46:	4818      	ldr	r0, [pc, #96]	@ (8007ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e48:	f000 fcdf 	bl	800880a <USBD_GetEpDesc>
 8007e4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e4e:	2101      	movs	r1, #1
 8007e50:	4815      	ldr	r0, [pc, #84]	@ (8007ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e52:	f000 fcda 	bl	800880a <USBD_GetEpDesc>
 8007e56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e58:	2181      	movs	r1, #129	@ 0x81
 8007e5a:	4813      	ldr	r0, [pc, #76]	@ (8007ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e5c:	f000 fcd5 	bl	800880a <USBD_GetEpDesc>
 8007e60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2210      	movs	r2, #16
 8007e6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d006      	beq.n	8007e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e7c:	711a      	strb	r2, [r3, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d006      	beq.n	8007e96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e90:	711a      	strb	r2, [r3, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2243      	movs	r2, #67	@ 0x43
 8007e9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e9c:	4b02      	ldr	r3, [pc, #8]	@ (8007ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000058 	.word	0x20000058

08007eac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	220a      	movs	r2, #10
 8007eb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007eba:	4b03      	ldr	r3, [pc, #12]	@ (8007ec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	20000014 	.word	0x20000014

08007ecc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e009      	b.n	8007ef4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	33b0      	adds	r3, #176	@ 0xb0
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	32b0      	adds	r2, #176	@ 0xb0
 8007f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e008      	b.n	8007f38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	32b0      	adds	r2, #176	@ 0xb0
 8007f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e004      	b.n	8007f72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	32b0      	adds	r2, #176	@ 0xb0
 8007f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f96:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e025      	b.n	8007ff2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11f      	bne.n	8007ff0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007fb8:	4b10      	ldr	r3, [pc, #64]	@ (8007ffc <USBD_CDC_TransmitPacket+0x7c>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	f003 020f 	and.w	r2, r3, #15
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4403      	add	r3, r0
 8007fd2:	3318      	adds	r3, #24
 8007fd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007fd6:	4b09      	ldr	r3, [pc, #36]	@ (8007ffc <USBD_CDC_TransmitPacket+0x7c>)
 8007fd8:	7819      	ldrb	r1, [r3, #0]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 ffe9 	bl	8009fbe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	2000009b 	.word	0x2000009b

08008000 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	32b0      	adds	r2, #176	@ 0xb0
 8008012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008016:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	32b0      	adds	r2, #176	@ 0xb0
 8008022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	e018      	b.n	8008060 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	7c1b      	ldrb	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10a      	bne.n	800804c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008036:	4b0c      	ldr	r3, [pc, #48]	@ (8008068 <USBD_CDC_ReceivePacket+0x68>)
 8008038:	7819      	ldrb	r1, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008040:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 ffdb 	bl	800a000 <USBD_LL_PrepareReceive>
 800804a:	e008      	b.n	800805e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800804c:	4b06      	ldr	r3, [pc, #24]	@ (8008068 <USBD_CDC_ReceivePacket+0x68>)
 800804e:	7819      	ldrb	r1, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008056:	2340      	movs	r3, #64	@ 0x40
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f001 ffd1 	bl	800a000 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	2000009c 	.word	0x2000009c

0800806c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e01f      	b.n	80080c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	79fa      	ldrb	r2, [r7, #7]
 80080b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f001 fe4b 	bl	8009d54 <USBD_LL_Init>
 80080be:	4603      	mov	r3, r0
 80080c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e025      	b.n	8008130 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	32ae      	adds	r2, #174	@ 0xae
 80080f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00f      	beq.n	8008120 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	32ae      	adds	r2, #174	@ 0xae
 800810a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	f107 020e 	add.w	r2, r7, #14
 8008114:	4610      	mov	r0, r2
 8008116:	4798      	blx	r3
 8008118:	4602      	mov	r2, r0
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 fe53 	bl	8009dec <USBD_LL_Start>
 8008146:	4603      	mov	r3, r0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	78fa      	ldrb	r2, [r7, #3]
 800818a:	4611      	mov	r1, r2
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	4798      	blx	r3
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008194:	7bfb      	ldrb	r3, [r7, #15]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	4611      	mov	r1, r2
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80081c4:	2303      	movs	r3, #3
 80081c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 f90c 	bl	8009402 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80081f8:	461a      	mov	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008206:	f003 031f 	and.w	r3, r3, #31
 800820a:	2b02      	cmp	r3, #2
 800820c:	d01a      	beq.n	8008244 <USBD_LL_SetupStage+0x72>
 800820e:	2b02      	cmp	r3, #2
 8008210:	d822      	bhi.n	8008258 <USBD_LL_SetupStage+0x86>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <USBD_LL_SetupStage+0x4a>
 8008216:	2b01      	cmp	r3, #1
 8008218:	d00a      	beq.n	8008230 <USBD_LL_SetupStage+0x5e>
 800821a:	e01d      	b.n	8008258 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fb63 	bl	80088f0 <USBD_StdDevReq>
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]
      break;
 800822e:	e020      	b.n	8008272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fbcb 	bl	80089d4 <USBD_StdItfReq>
 800823e:	4603      	mov	r3, r0
 8008240:	73fb      	strb	r3, [r7, #15]
      break;
 8008242:	e016      	b.n	8008272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc2d 	bl	8008aac <USBD_StdEPReq>
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
      break;
 8008256:	e00c      	b.n	8008272 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800825e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008262:	b2db      	uxtb	r3, r3
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 fe20 	bl	8009eac <USBD_LL_StallEP>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
      break;
 8008270:	bf00      	nop
  }

  return ret;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	460b      	mov	r3, r1
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d16e      	bne.n	8008372 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800829a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	f040 8098 	bne.w	80083d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d913      	bls.n	80082dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	1ad2      	subs	r2, r2, r3
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	4293      	cmp	r3, r2
 80082cc:	bf28      	it	cs
 80082ce:	4613      	movcs	r3, r2
 80082d0:	461a      	mov	r2, r3
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f001 f994 	bl	8009602 <USBD_CtlContinueRx>
 80082da:	e07d      	b.n	80083d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d014      	beq.n	8008314 <USBD_LL_DataOutStage+0x98>
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d81d      	bhi.n	800832a <USBD_LL_DataOutStage+0xae>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <USBD_LL_DataOutStage+0x7c>
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d003      	beq.n	80082fe <USBD_LL_DataOutStage+0x82>
 80082f6:	e018      	b.n	800832a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	75bb      	strb	r3, [r7, #22]
            break;
 80082fc:	e018      	b.n	8008330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008304:	b2db      	uxtb	r3, r3
 8008306:	4619      	mov	r1, r3
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fa64 	bl	80087d6 <USBD_CoreFindIF>
 800830e:	4603      	mov	r3, r0
 8008310:	75bb      	strb	r3, [r7, #22]
            break;
 8008312:	e00d      	b.n	8008330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800831a:	b2db      	uxtb	r3, r3
 800831c:	4619      	mov	r1, r3
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fa66 	bl	80087f0 <USBD_CoreFindEP>
 8008324:	4603      	mov	r3, r0
 8008326:	75bb      	strb	r3, [r7, #22]
            break;
 8008328:	e002      	b.n	8008330 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	75bb      	strb	r3, [r7, #22]
            break;
 800832e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008330:	7dbb      	ldrb	r3, [r7, #22]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d119      	bne.n	800836a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b03      	cmp	r3, #3
 8008340:	d113      	bne.n	800836a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008342:	7dba      	ldrb	r2, [r7, #22]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	32ae      	adds	r2, #174	@ 0xae
 8008348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00b      	beq.n	800836a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008352:	7dba      	ldrb	r2, [r7, #22]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800835a:	7dba      	ldrb	r2, [r7, #22]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	32ae      	adds	r2, #174	@ 0xae
 8008360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f001 f95a 	bl	8009624 <USBD_CtlSendStatus>
 8008370:	e032      	b.n	80083d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008372:	7afb      	ldrb	r3, [r7, #11]
 8008374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008378:	b2db      	uxtb	r3, r3
 800837a:	4619      	mov	r1, r3
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 fa37 	bl	80087f0 <USBD_CoreFindEP>
 8008382:	4603      	mov	r3, r0
 8008384:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008386:	7dbb      	ldrb	r3, [r7, #22]
 8008388:	2bff      	cmp	r3, #255	@ 0xff
 800838a:	d025      	beq.n	80083d8 <USBD_LL_DataOutStage+0x15c>
 800838c:	7dbb      	ldrb	r3, [r7, #22]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d122      	bne.n	80083d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b03      	cmp	r3, #3
 800839c:	d117      	bne.n	80083ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800839e:	7dba      	ldrb	r2, [r7, #22]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	32ae      	adds	r2, #174	@ 0xae
 80083a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00f      	beq.n	80083ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80083ae:	7dba      	ldrb	r2, [r7, #22]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80083b6:	7dba      	ldrb	r2, [r7, #22]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	32ae      	adds	r2, #174	@ 0xae
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	7afa      	ldrb	r2, [r7, #11]
 80083c4:	4611      	mov	r1, r2
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	4798      	blx	r3
 80083ca:	4603      	mov	r3, r0
 80083cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	e000      	b.n	80083da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b086      	sub	sp, #24
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	460b      	mov	r3, r1
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d16f      	bne.n	80084d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3314      	adds	r3, #20
 80083fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008402:	2b02      	cmp	r3, #2
 8008404:	d15a      	bne.n	80084bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	429a      	cmp	r2, r3
 8008410:	d914      	bls.n	800843c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	461a      	mov	r2, r3
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f001 f8bc 	bl	80095a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800842e:	2300      	movs	r3, #0
 8008430:	2200      	movs	r2, #0
 8008432:	2100      	movs	r1, #0
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f001 fde3 	bl	800a000 <USBD_LL_PrepareReceive>
 800843a:	e03f      	b.n	80084bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	429a      	cmp	r2, r3
 8008446:	d11c      	bne.n	8008482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008450:	429a      	cmp	r2, r3
 8008452:	d316      	bcc.n	8008482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800845e:	429a      	cmp	r2, r3
 8008460:	d20f      	bcs.n	8008482 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008462:	2200      	movs	r2, #0
 8008464:	2100      	movs	r1, #0
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f001 f89d 	bl	80095a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008474:	2300      	movs	r3, #0
 8008476:	2200      	movs	r2, #0
 8008478:	2100      	movs	r1, #0
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f001 fdc0 	bl	800a000 <USBD_LL_PrepareReceive>
 8008480:	e01c      	b.n	80084bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b03      	cmp	r3, #3
 800848c:	d10f      	bne.n	80084ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ae:	2180      	movs	r1, #128	@ 0x80
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f001 fcfb 	bl	8009eac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f001 f8c7 	bl	800964a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d03a      	beq.n	800853c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7ff fe42 	bl	8008150 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80084d4:	e032      	b.n	800853c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80084d6:	7afb      	ldrb	r3, [r7, #11]
 80084d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 f985 	bl	80087f0 <USBD_CoreFindEP>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2bff      	cmp	r3, #255	@ 0xff
 80084ee:	d025      	beq.n	800853c <USBD_LL_DataInStage+0x15a>
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d122      	bne.n	800853c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d11c      	bne.n	800853c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008502:	7dfa      	ldrb	r2, [r7, #23]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	32ae      	adds	r2, #174	@ 0xae
 8008508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d014      	beq.n	800853c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008512:	7dfa      	ldrb	r2, [r7, #23]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800851a:	7dfa      	ldrb	r2, [r7, #23]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	32ae      	adds	r2, #174	@ 0xae
 8008520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	7afa      	ldrb	r2, [r7, #11]
 8008528:	4611      	mov	r1, r2
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	4798      	blx	r3
 800852e:	4603      	mov	r3, r0
 8008530:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008532:	7dbb      	ldrb	r3, [r7, #22]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008538:	7dbb      	ldrb	r3, [r7, #22]
 800853a:	e000      	b.n	800853e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d014      	beq.n	80085ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00e      	beq.n	80085ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6852      	ldr	r2, [r2, #4]
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	4611      	mov	r1, r2
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80085a8:	2303      	movs	r3, #3
 80085aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085ac:	2340      	movs	r3, #64	@ 0x40
 80085ae:	2200      	movs	r2, #0
 80085b0:	2100      	movs	r1, #0
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fc35 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2240      	movs	r2, #64	@ 0x40
 80085c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085c8:	2340      	movs	r3, #64	@ 0x40
 80085ca:	2200      	movs	r2, #0
 80085cc:	2180      	movs	r1, #128	@ 0x80
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 fc27 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2240      	movs	r2, #64	@ 0x40
 80085de:	621a      	str	r2, [r3, #32]

  return ret;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	78fa      	ldrb	r2, [r7, #3]
 80085fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b04      	cmp	r3, #4
 800861c:	d006      	beq.n	800862c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008624:	b2da      	uxtb	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2204      	movs	r2, #4
 8008630:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b04      	cmp	r3, #4
 8008654:	d106      	bne.n	8008664 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800865c:	b2da      	uxtb	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b03      	cmp	r3, #3
 8008684:	d110      	bne.n	80086a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	32ae      	adds	r2, #174	@ 0xae
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e01c      	b.n	800870e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d115      	bne.n	800870c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	32ae      	adds	r2, #174	@ 0xae
 80086ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	32ae      	adds	r2, #174	@ 0xae
 80086fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	4611      	mov	r1, r2
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	32ae      	adds	r2, #174	@ 0xae
 800872c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008734:	2303      	movs	r3, #3
 8008736:	e01c      	b.n	8008772 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b03      	cmp	r3, #3
 8008742:	d115      	bne.n	8008770 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	32ae      	adds	r2, #174	@ 0xae
 800874e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	32ae      	adds	r2, #174	@ 0xae
 8008762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008768:	78fa      	ldrb	r2, [r7, #3]
 800876a:	4611      	mov	r1, r2
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00e      	beq.n	80087cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6852      	ldr	r2, [r2, #4]
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	4611      	mov	r1, r2
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4798      	blx	r3
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80087c8:	2303      	movs	r3, #3
 80087ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087fe:	4618      	mov	r0, r3
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	b29b      	uxth	r3, r3
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	7812      	ldrb	r2, [r2, #0]
 800882c:	4293      	cmp	r3, r2
 800882e:	d91f      	bls.n	8008870 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008836:	e013      	b.n	8008860 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008838:	f107 030a 	add.w	r3, r7, #10
 800883c:	4619      	mov	r1, r3
 800883e:	6978      	ldr	r0, [r7, #20]
 8008840:	f000 f81b 	bl	800887a <USBD_GetNextDesc>
 8008844:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	2b05      	cmp	r3, #5
 800884c:	d108      	bne.n	8008860 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	789b      	ldrb	r3, [r3, #2]
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	429a      	cmp	r2, r3
 800885a:	d008      	beq.n	800886e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	885b      	ldrh	r3, [r3, #2]
 8008864:	b29a      	uxth	r2, r3
 8008866:	897b      	ldrh	r3, [r7, #10]
 8008868:	429a      	cmp	r2, r3
 800886a:	d8e5      	bhi.n	8008838 <USBD_GetEpDesc+0x2e>
 800886c:	e000      	b.n	8008870 <USBD_GetEpDesc+0x66>
          break;
 800886e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008870:	693b      	ldr	r3, [r7, #16]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	7812      	ldrb	r2, [r2, #0]
 8008890:	4413      	add	r3, r2
 8008892:	b29a      	uxth	r2, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4413      	add	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088a4:	68fb      	ldr	r3, [r7, #12]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b087      	sub	sp, #28
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	3301      	adds	r3, #1
 80088c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088d0:	8a3b      	ldrh	r3, [r7, #16]
 80088d2:	021b      	lsls	r3, r3, #8
 80088d4:	b21a      	sxth	r2, r3
 80088d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088da:	4313      	orrs	r3, r2
 80088dc:	b21b      	sxth	r3, r3
 80088de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088e0:	89fb      	ldrh	r3, [r7, #14]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
	...

080088f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008906:	2b40      	cmp	r3, #64	@ 0x40
 8008908:	d005      	beq.n	8008916 <USBD_StdDevReq+0x26>
 800890a:	2b40      	cmp	r3, #64	@ 0x40
 800890c:	d857      	bhi.n	80089be <USBD_StdDevReq+0xce>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00f      	beq.n	8008932 <USBD_StdDevReq+0x42>
 8008912:	2b20      	cmp	r3, #32
 8008914:	d153      	bne.n	80089be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	32ae      	adds	r2, #174	@ 0xae
 8008920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]
      break;
 8008930:	e04a      	b.n	80089c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	2b09      	cmp	r3, #9
 8008938:	d83b      	bhi.n	80089b2 <USBD_StdDevReq+0xc2>
 800893a:	a201      	add	r2, pc, #4	@ (adr r2, 8008940 <USBD_StdDevReq+0x50>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	08008995 	.word	0x08008995
 8008944:	080089a9 	.word	0x080089a9
 8008948:	080089b3 	.word	0x080089b3
 800894c:	0800899f 	.word	0x0800899f
 8008950:	080089b3 	.word	0x080089b3
 8008954:	08008973 	.word	0x08008973
 8008958:	08008969 	.word	0x08008969
 800895c:	080089b3 	.word	0x080089b3
 8008960:	0800898b 	.word	0x0800898b
 8008964:	0800897d 	.word	0x0800897d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa3c 	bl	8008de8 <USBD_GetDescriptor>
          break;
 8008970:	e024      	b.n	80089bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fba1 	bl	80090bc <USBD_SetAddress>
          break;
 800897a:	e01f      	b.n	80089bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fbe0 	bl	8009144 <USBD_SetConfig>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
          break;
 8008988:	e018      	b.n	80089bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc83 	bl	8009298 <USBD_GetConfig>
          break;
 8008992:	e013      	b.n	80089bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fcb4 	bl	8009304 <USBD_GetStatus>
          break;
 800899c:	e00e      	b.n	80089bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fce3 	bl	800936c <USBD_SetFeature>
          break;
 80089a6:	e009      	b.n	80089bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fd07 	bl	80093be <USBD_ClrFeature>
          break;
 80089b0:	e004      	b.n	80089bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fd5e 	bl	8009476 <USBD_CtlError>
          break;
 80089ba:	bf00      	nop
      }
      break;
 80089bc:	e004      	b.n	80089c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fd58 	bl	8009476 <USBD_CtlError>
      break;
 80089c6:	bf00      	nop
  }

  return ret;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop

080089d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089ea:	2b40      	cmp	r3, #64	@ 0x40
 80089ec:	d005      	beq.n	80089fa <USBD_StdItfReq+0x26>
 80089ee:	2b40      	cmp	r3, #64	@ 0x40
 80089f0:	d852      	bhi.n	8008a98 <USBD_StdItfReq+0xc4>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <USBD_StdItfReq+0x26>
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d14e      	bne.n	8008a98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d840      	bhi.n	8008a8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	889b      	ldrh	r3, [r3, #4]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d836      	bhi.n	8008a80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	889b      	ldrh	r3, [r3, #4]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff fedb 	bl	80087d6 <USBD_CoreFindIF>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	2bff      	cmp	r3, #255	@ 0xff
 8008a28:	d01d      	beq.n	8008a66 <USBD_StdItfReq+0x92>
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d11a      	bne.n	8008a66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a30:	7bba      	ldrb	r2, [r7, #14]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	32ae      	adds	r2, #174	@ 0xae
 8008a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00f      	beq.n	8008a60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a40:	7bba      	ldrb	r2, [r7, #14]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a48:	7bba      	ldrb	r2, [r7, #14]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	32ae      	adds	r2, #174	@ 0xae
 8008a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a5e:	e004      	b.n	8008a6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a60:	2303      	movs	r3, #3
 8008a62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a64:	e001      	b.n	8008a6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a66:	2303      	movs	r3, #3
 8008a68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	88db      	ldrh	r3, [r3, #6]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d110      	bne.n	8008a94 <USBD_StdItfReq+0xc0>
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10d      	bne.n	8008a94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fdd3 	bl	8009624 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a7e:	e009      	b.n	8008a94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fcf7 	bl	8009476 <USBD_CtlError>
          break;
 8008a88:	e004      	b.n	8008a94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fcf2 	bl	8009476 <USBD_CtlError>
          break;
 8008a92:	e000      	b.n	8008a96 <USBD_StdItfReq+0xc2>
          break;
 8008a94:	bf00      	nop
      }
      break;
 8008a96:	e004      	b.n	8008aa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fceb 	bl	8009476 <USBD_CtlError>
      break;
 8008aa0:	bf00      	nop
  }

  return ret;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	889b      	ldrh	r3, [r3, #4]
 8008abe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ac8:	2b40      	cmp	r3, #64	@ 0x40
 8008aca:	d007      	beq.n	8008adc <USBD_StdEPReq+0x30>
 8008acc:	2b40      	cmp	r3, #64	@ 0x40
 8008ace:	f200 817f 	bhi.w	8008dd0 <USBD_StdEPReq+0x324>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d02a      	beq.n	8008b2c <USBD_StdEPReq+0x80>
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	f040 817a 	bne.w	8008dd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff fe85 	bl	80087f0 <USBD_CoreFindEP>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008aea:	7b7b      	ldrb	r3, [r7, #13]
 8008aec:	2bff      	cmp	r3, #255	@ 0xff
 8008aee:	f000 8174 	beq.w	8008dda <USBD_StdEPReq+0x32e>
 8008af2:	7b7b      	ldrb	r3, [r7, #13]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f040 8170 	bne.w	8008dda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008afa:	7b7a      	ldrb	r2, [r7, #13]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b02:	7b7a      	ldrb	r2, [r7, #13]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	32ae      	adds	r2, #174	@ 0xae
 8008b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 8163 	beq.w	8008dda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b14:	7b7a      	ldrb	r2, [r7, #13]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	32ae      	adds	r2, #174	@ 0xae
 8008b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	4798      	blx	r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b2a:	e156      	b.n	8008dda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d008      	beq.n	8008b46 <USBD_StdEPReq+0x9a>
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	f300 8145 	bgt.w	8008dc4 <USBD_StdEPReq+0x318>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 809b 	beq.w	8008c76 <USBD_StdEPReq+0x1ca>
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d03c      	beq.n	8008bbe <USBD_StdEPReq+0x112>
 8008b44:	e13e      	b.n	8008dc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d002      	beq.n	8008b58 <USBD_StdEPReq+0xac>
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d016      	beq.n	8008b84 <USBD_StdEPReq+0xd8>
 8008b56:	e02c      	b.n	8008bb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00d      	beq.n	8008b7a <USBD_StdEPReq+0xce>
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	2b80      	cmp	r3, #128	@ 0x80
 8008b62:	d00a      	beq.n	8008b7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 f99f 	bl	8009eac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b6e:	2180      	movs	r1, #128	@ 0x80
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 f99b 	bl	8009eac <USBD_LL_StallEP>
 8008b76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b78:	e020      	b.n	8008bbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fc7a 	bl	8009476 <USBD_CtlError>
              break;
 8008b82:	e01b      	b.n	8008bbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	885b      	ldrh	r3, [r3, #2]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10e      	bne.n	8008baa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <USBD_StdEPReq+0xfe>
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	2b80      	cmp	r3, #128	@ 0x80
 8008b96:	d008      	beq.n	8008baa <USBD_StdEPReq+0xfe>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	88db      	ldrh	r3, [r3, #6]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 f981 	bl	8009eac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fd3a 	bl	8009624 <USBD_CtlSendStatus>

              break;
 8008bb0:	e004      	b.n	8008bbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc5e 	bl	8009476 <USBD_CtlError>
              break;
 8008bba:	bf00      	nop
          }
          break;
 8008bbc:	e107      	b.n	8008dce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d002      	beq.n	8008bd0 <USBD_StdEPReq+0x124>
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d016      	beq.n	8008bfc <USBD_StdEPReq+0x150>
 8008bce:	e04b      	b.n	8008c68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00d      	beq.n	8008bf2 <USBD_StdEPReq+0x146>
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	2b80      	cmp	r3, #128	@ 0x80
 8008bda:	d00a      	beq.n	8008bf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 f963 	bl	8009eac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008be6:	2180      	movs	r1, #128	@ 0x80
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 f95f 	bl	8009eac <USBD_LL_StallEP>
 8008bee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bf0:	e040      	b.n	8008c74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fc3e 	bl	8009476 <USBD_CtlError>
              break;
 8008bfa:	e03b      	b.n	8008c74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	885b      	ldrh	r3, [r3, #2]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d136      	bne.n	8008c72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d004      	beq.n	8008c18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 f969 	bl	8009eea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fd03 	bl	8009624 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff fde4 	bl	80087f0 <USBD_CoreFindEP>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c2c:	7b7b      	ldrb	r3, [r7, #13]
 8008c2e:	2bff      	cmp	r3, #255	@ 0xff
 8008c30:	d01f      	beq.n	8008c72 <USBD_StdEPReq+0x1c6>
 8008c32:	7b7b      	ldrb	r3, [r7, #13]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d11c      	bne.n	8008c72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008c38:	7b7a      	ldrb	r2, [r7, #13]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c40:	7b7a      	ldrb	r2, [r7, #13]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	32ae      	adds	r2, #174	@ 0xae
 8008c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d010      	beq.n	8008c72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c50:	7b7a      	ldrb	r2, [r7, #13]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	32ae      	adds	r2, #174	@ 0xae
 8008c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c66:	e004      	b.n	8008c72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fc03 	bl	8009476 <USBD_CtlError>
              break;
 8008c70:	e000      	b.n	8008c74 <USBD_StdEPReq+0x1c8>
              break;
 8008c72:	bf00      	nop
          }
          break;
 8008c74:	e0ab      	b.n	8008dce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d002      	beq.n	8008c88 <USBD_StdEPReq+0x1dc>
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d032      	beq.n	8008cec <USBD_StdEPReq+0x240>
 8008c86:	e097      	b.n	8008db8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <USBD_StdEPReq+0x1f2>
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	2b80      	cmp	r3, #128	@ 0x80
 8008c92:	d004      	beq.n	8008c9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fbed 	bl	8009476 <USBD_CtlError>
                break;
 8008c9c:	e091      	b.n	8008dc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	da0b      	bge.n	8008cbe <USBD_StdEPReq+0x212>
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	3310      	adds	r3, #16
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	4413      	add	r3, r2
 8008cba:	3304      	adds	r3, #4
 8008cbc:	e00b      	b.n	8008cd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fc43 	bl	8009570 <USBD_CtlSendData>
              break;
 8008cea:	e06a      	b.n	8008dc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da11      	bge.n	8008d18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	f003 020f 	and.w	r2, r3, #15
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	3324      	adds	r3, #36	@ 0x24
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d117      	bne.n	8008d3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fbb0 	bl	8009476 <USBD_CtlError>
                  break;
 8008d16:	e054      	b.n	8008dc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	f003 020f 	and.w	r2, r3, #15
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	440b      	add	r3, r1
 8008d2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fb9d 	bl	8009476 <USBD_CtlError>
                  break;
 8008d3c:	e041      	b.n	8008dc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	da0b      	bge.n	8008d5e <USBD_StdEPReq+0x2b2>
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	3310      	adds	r3, #16
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	4413      	add	r3, r2
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	e00b      	b.n	8008d76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	4413      	add	r3, r2
 8008d74:	3304      	adds	r3, #4
 8008d76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <USBD_StdEPReq+0x2d8>
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b80      	cmp	r3, #128	@ 0x80
 8008d82:	d103      	bne.n	8008d8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	e00e      	b.n	8008daa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 f8c9 	bl	8009f28 <USBD_LL_IsStallEP>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e002      	b.n	8008daa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2202      	movs	r2, #2
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fbdd 	bl	8009570 <USBD_CtlSendData>
              break;
 8008db6:	e004      	b.n	8008dc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fb5b 	bl	8009476 <USBD_CtlError>
              break;
 8008dc0:	bf00      	nop
          }
          break;
 8008dc2:	e004      	b.n	8008dce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fb55 	bl	8009476 <USBD_CtlError>
          break;
 8008dcc:	bf00      	nop
      }
      break;
 8008dce:	e005      	b.n	8008ddc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fb4f 	bl	8009476 <USBD_CtlError>
      break;
 8008dd8:	e000      	b.n	8008ddc <USBD_StdEPReq+0x330>
      break;
 8008dda:	bf00      	nop
  }

  return ret;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	0a1b      	lsrs	r3, r3, #8
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	2b06      	cmp	r3, #6
 8008e0a:	f200 8128 	bhi.w	800905e <USBD_GetDescriptor+0x276>
 8008e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e14 <USBD_GetDescriptor+0x2c>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e31 	.word	0x08008e31
 8008e18:	08008e49 	.word	0x08008e49
 8008e1c:	08008e89 	.word	0x08008e89
 8008e20:	0800905f 	.word	0x0800905f
 8008e24:	0800905f 	.word	0x0800905f
 8008e28:	08008fff 	.word	0x08008fff
 8008e2c:	0800902b 	.word	0x0800902b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
      break;
 8008e46:	e112      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7c1b      	ldrb	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10d      	bne.n	8008e6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	f107 0208 	add.w	r2, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	2202      	movs	r2, #2
 8008e68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e6a:	e100      	b.n	800906e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	f107 0208 	add.w	r2, r7, #8
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
 8008e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	2202      	movs	r2, #2
 8008e84:	701a      	strb	r2, [r3, #0]
      break;
 8008e86:	e0f2      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	885b      	ldrh	r3, [r3, #2]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b05      	cmp	r3, #5
 8008e90:	f200 80ac 	bhi.w	8008fec <USBD_GetDescriptor+0x204>
 8008e94:	a201      	add	r2, pc, #4	@ (adr r2, 8008e9c <USBD_GetDescriptor+0xb4>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008f1d 	.word	0x08008f1d
 8008ea8:	08008f51 	.word	0x08008f51
 8008eac:	08008f85 	.word	0x08008f85
 8008eb0:	08008fb9 	.word	0x08008fb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	7c12      	ldrb	r2, [r2, #16]
 8008ecc:	f107 0108 	add.w	r1, r7, #8
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ed6:	e091      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 facb 	bl	8009476 <USBD_CtlError>
            err++;
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ee6:	e089      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00b      	beq.n	8008f0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	7c12      	ldrb	r2, [r2, #16]
 8008f00:	f107 0108 	add.w	r1, r7, #8
 8008f04:	4610      	mov	r0, r2
 8008f06:	4798      	blx	r3
 8008f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0a:	e077      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fab1 	bl	8009476 <USBD_CtlError>
            err++;
 8008f14:	7afb      	ldrb	r3, [r7, #11]
 8008f16:	3301      	adds	r3, #1
 8008f18:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1a:	e06f      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	7c12      	ldrb	r2, [r2, #16]
 8008f34:	f107 0108 	add.w	r1, r7, #8
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4798      	blx	r3
 8008f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f3e:	e05d      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa97 	bl	8009476 <USBD_CtlError>
            err++;
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f4e:	e055      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00b      	beq.n	8008f74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	7c12      	ldrb	r2, [r2, #16]
 8008f68:	f107 0108 	add.w	r1, r7, #8
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
 8008f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f72:	e043      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa7d 	bl	8009476 <USBD_CtlError>
            err++;
 8008f7c:	7afb      	ldrb	r3, [r7, #11]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	72fb      	strb	r3, [r7, #11]
          break;
 8008f82:	e03b      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	7c12      	ldrb	r2, [r2, #16]
 8008f9c:	f107 0108 	add.w	r1, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
 8008fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fa6:	e029      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa63 	bl	8009476 <USBD_CtlError>
            err++;
 8008fb0:	7afb      	ldrb	r3, [r7, #11]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fb6:	e021      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	7c12      	ldrb	r2, [r2, #16]
 8008fd0:	f107 0108 	add.w	r1, r7, #8
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4798      	blx	r3
 8008fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fda:	e00f      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa49 	bl	8009476 <USBD_CtlError>
            err++;
 8008fe4:	7afb      	ldrb	r3, [r7, #11]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fea:	e007      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa41 	bl	8009476 <USBD_CtlError>
          err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ffa:	bf00      	nop
      }
      break;
 8008ffc:	e037      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	7c1b      	ldrb	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800900c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800900e:	f107 0208 	add.w	r2, r7, #8
 8009012:	4610      	mov	r0, r2
 8009014:	4798      	blx	r3
 8009016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009018:	e029      	b.n	800906e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa2a 	bl	8009476 <USBD_CtlError>
        err++;
 8009022:	7afb      	ldrb	r3, [r7, #11]
 8009024:	3301      	adds	r3, #1
 8009026:	72fb      	strb	r3, [r7, #11]
      break;
 8009028:	e021      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	7c1b      	ldrb	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10d      	bne.n	800904e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903a:	f107 0208 	add.w	r2, r7, #8
 800903e:	4610      	mov	r0, r2
 8009040:	4798      	blx	r3
 8009042:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3301      	adds	r3, #1
 8009048:	2207      	movs	r2, #7
 800904a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800904c:	e00f      	b.n	800906e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fa10 	bl	8009476 <USBD_CtlError>
        err++;
 8009056:	7afb      	ldrb	r3, [r7, #11]
 8009058:	3301      	adds	r3, #1
 800905a:	72fb      	strb	r3, [r7, #11]
      break;
 800905c:	e007      	b.n	800906e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fa08 	bl	8009476 <USBD_CtlError>
      err++;
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	3301      	adds	r3, #1
 800906a:	72fb      	strb	r3, [r7, #11]
      break;
 800906c:	bf00      	nop
  }

  if (err != 0U)
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d11e      	bne.n	80090b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	88db      	ldrh	r3, [r3, #6]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d016      	beq.n	80090aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800907c:	893b      	ldrh	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00e      	beq.n	80090a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88da      	ldrh	r2, [r3, #6]
 8009086:	893b      	ldrh	r3, [r7, #8]
 8009088:	4293      	cmp	r3, r2
 800908a:	bf28      	it	cs
 800908c:	4613      	movcs	r3, r2
 800908e:	b29b      	uxth	r3, r3
 8009090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009092:	893b      	ldrh	r3, [r7, #8]
 8009094:	461a      	mov	r2, r3
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa69 	bl	8009570 <USBD_CtlSendData>
 800909e:	e009      	b.n	80090b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f9e7 	bl	8009476 <USBD_CtlError>
 80090a8:	e004      	b.n	80090b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 faba 	bl	8009624 <USBD_CtlSendStatus>
 80090b0:	e000      	b.n	80090b4 <USBD_GetDescriptor+0x2cc>
    return;
 80090b2:	bf00      	nop
  }
}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop

080090bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	889b      	ldrh	r3, [r3, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d131      	bne.n	8009132 <USBD_SetAddress+0x76>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	88db      	ldrh	r3, [r3, #6]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d12d      	bne.n	8009132 <USBD_SetAddress+0x76>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	885b      	ldrh	r3, [r3, #2]
 80090da:	2b7f      	cmp	r3, #127	@ 0x7f
 80090dc:	d829      	bhi.n	8009132 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d104      	bne.n	8009100 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f9bc 	bl	8009476 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fe:	e01d      	b.n	800913c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	7bfa      	ldrb	r2, [r7, #15]
 8009104:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 ff37 	bl	8009f80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa86 	bl	8009624 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d004      	beq.n	8009128 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2202      	movs	r2, #2
 8009122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009126:	e009      	b.n	800913c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009130:	e004      	b.n	800913c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f99e 	bl	8009476 <USBD_CtlError>
  }
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	885b      	ldrh	r3, [r3, #2]
 8009156:	b2da      	uxtb	r2, r3
 8009158:	4b4e      	ldr	r3, [pc, #312]	@ (8009294 <USBD_SetConfig+0x150>)
 800915a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800915c:	4b4d      	ldr	r3, [pc, #308]	@ (8009294 <USBD_SetConfig+0x150>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d905      	bls.n	8009170 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f985 	bl	8009476 <USBD_CtlError>
    return USBD_FAIL;
 800916c:	2303      	movs	r3, #3
 800916e:	e08c      	b.n	800928a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	d002      	beq.n	8009182 <USBD_SetConfig+0x3e>
 800917c:	2b03      	cmp	r3, #3
 800917e:	d029      	beq.n	80091d4 <USBD_SetConfig+0x90>
 8009180:	e075      	b.n	800926e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009182:	4b44      	ldr	r3, [pc, #272]	@ (8009294 <USBD_SetConfig+0x150>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d020      	beq.n	80091cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800918a:	4b42      	ldr	r3, [pc, #264]	@ (8009294 <USBD_SetConfig+0x150>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009194:	4b3f      	ldr	r3, [pc, #252]	@ (8009294 <USBD_SetConfig+0x150>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7fe ffe3 	bl	8008166 <USBD_SetClassConfig>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d008      	beq.n	80091bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f962 	bl	8009476 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2202      	movs	r2, #2
 80091b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091ba:	e065      	b.n	8009288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fa31 	bl	8009624 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2203      	movs	r2, #3
 80091c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80091ca:	e05d      	b.n	8009288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fa29 	bl	8009624 <USBD_CtlSendStatus>
      break;
 80091d2:	e059      	b.n	8009288 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091d4:	4b2f      	ldr	r3, [pc, #188]	@ (8009294 <USBD_SetConfig+0x150>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d112      	bne.n	8009202 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80091e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009294 <USBD_SetConfig+0x150>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ee:	4b29      	ldr	r3, [pc, #164]	@ (8009294 <USBD_SetConfig+0x150>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7fe ffd2 	bl	800819e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fa12 	bl	8009624 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009200:	e042      	b.n	8009288 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009202:	4b24      	ldr	r3, [pc, #144]	@ (8009294 <USBD_SetConfig+0x150>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	429a      	cmp	r2, r3
 800920e:	d02a      	beq.n	8009266 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7fe ffc0 	bl	800819e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800921e:	4b1d      	ldr	r3, [pc, #116]	@ (8009294 <USBD_SetConfig+0x150>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009228:	4b1a      	ldr	r3, [pc, #104]	@ (8009294 <USBD_SetConfig+0x150>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7fe ff99 	bl	8008166 <USBD_SetClassConfig>
 8009234:	4603      	mov	r3, r0
 8009236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00f      	beq.n	800925e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f918 	bl	8009476 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7fe ffa5 	bl	800819e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2202      	movs	r2, #2
 8009258:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800925c:	e014      	b.n	8009288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f9e0 	bl	8009624 <USBD_CtlSendStatus>
      break;
 8009264:	e010      	b.n	8009288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f9dc 	bl	8009624 <USBD_CtlSendStatus>
      break;
 800926c:	e00c      	b.n	8009288 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f900 	bl	8009476 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009276:	4b07      	ldr	r3, [pc, #28]	@ (8009294 <USBD_SetConfig+0x150>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7fe ff8e 	bl	800819e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009282:	2303      	movs	r3, #3
 8009284:	73fb      	strb	r3, [r7, #15]
      break;
 8009286:	bf00      	nop
  }

  return ret;
 8009288:	7bfb      	ldrb	r3, [r7, #15]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	200002f8 	.word	0x200002f8

08009298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	88db      	ldrh	r3, [r3, #6]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d004      	beq.n	80092b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f8e2 	bl	8009476 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092b2:	e023      	b.n	80092fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b02      	cmp	r3, #2
 80092be:	dc02      	bgt.n	80092c6 <USBD_GetConfig+0x2e>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dc03      	bgt.n	80092cc <USBD_GetConfig+0x34>
 80092c4:	e015      	b.n	80092f2 <USBD_GetConfig+0x5a>
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d00b      	beq.n	80092e2 <USBD_GetConfig+0x4a>
 80092ca:	e012      	b.n	80092f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3308      	adds	r3, #8
 80092d6:	2201      	movs	r2, #1
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f948 	bl	8009570 <USBD_CtlSendData>
        break;
 80092e0:	e00c      	b.n	80092fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3304      	adds	r3, #4
 80092e6:	2201      	movs	r2, #1
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f940 	bl	8009570 <USBD_CtlSendData>
        break;
 80092f0:	e004      	b.n	80092fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f8be 	bl	8009476 <USBD_CtlError>
        break;
 80092fa:	bf00      	nop
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009314:	b2db      	uxtb	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	2b02      	cmp	r3, #2
 800931a:	d81e      	bhi.n	800935a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	88db      	ldrh	r3, [r3, #6]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d004      	beq.n	800932e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f8a5 	bl	8009476 <USBD_CtlError>
        break;
 800932c:	e01a      	b.n	8009364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f043 0202 	orr.w	r2, r3, #2
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	330c      	adds	r3, #12
 800934e:	2202      	movs	r2, #2
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f90c 	bl	8009570 <USBD_CtlSendData>
      break;
 8009358:	e004      	b.n	8009364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f88a 	bl	8009476 <USBD_CtlError>
      break;
 8009362:	bf00      	nop
  }
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	885b      	ldrh	r3, [r3, #2]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d107      	bne.n	800938e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f94c 	bl	8009624 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800938c:	e013      	b.n	80093b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	885b      	ldrh	r3, [r3, #2]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d10b      	bne.n	80093ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	889b      	ldrh	r3, [r3, #4]
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	b29b      	uxth	r3, r3
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f93c 	bl	8009624 <USBD_CtlSendStatus>
}
 80093ac:	e003      	b.n	80093b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f860 	bl	8009476 <USBD_CtlError>
}
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	3b01      	subs	r3, #1
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d80b      	bhi.n	80093ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	885b      	ldrh	r3, [r3, #2]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d10c      	bne.n	80093f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f91c 	bl	8009624 <USBD_CtlSendStatus>
      }
      break;
 80093ec:	e004      	b.n	80093f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f840 	bl	8009476 <USBD_CtlError>
      break;
 80093f6:	e000      	b.n	80093fa <USBD_ClrFeature+0x3c>
      break;
 80093f8:	bf00      	nop
  }
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	781a      	ldrb	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3301      	adds	r3, #1
 800941c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	781a      	ldrb	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3301      	adds	r3, #1
 800942a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7ff fa40 	bl	80088b2 <SWAPBYTE>
 8009432:	4603      	mov	r3, r0
 8009434:	461a      	mov	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3301      	adds	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f7ff fa33 	bl	80088b2 <SWAPBYTE>
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3301      	adds	r3, #1
 800945e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff fa26 	bl	80088b2 <SWAPBYTE>
 8009466:	4603      	mov	r3, r0
 8009468:	461a      	mov	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	80da      	strh	r2, [r3, #6]
}
 800946e:	bf00      	nop
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009480:	2180      	movs	r1, #128	@ 0x80
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fd12 	bl	8009eac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009488:	2100      	movs	r1, #0
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fd0e 	bl	8009eac <USBD_LL_StallEP>
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d042      	beq.n	8009534 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80094b2:	6938      	ldr	r0, [r7, #16]
 80094b4:	f000 f842 	bl	800953c <USBD_GetLen>
 80094b8:	4603      	mov	r3, r0
 80094ba:	3301      	adds	r3, #1
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094c2:	d808      	bhi.n	80094d6 <USBD_GetString+0x3e>
 80094c4:	6938      	ldr	r0, [r7, #16]
 80094c6:	f000 f839 	bl	800953c <USBD_GetLen>
 80094ca:	4603      	mov	r3, r0
 80094cc:	3301      	adds	r3, #1
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	e001      	b.n	80094da <USBD_GetString+0x42>
 80094d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	4413      	add	r3, r2
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	7812      	ldrb	r2, [r2, #0]
 80094e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	3301      	adds	r3, #1
 80094ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	4413      	add	r3, r2
 80094f6:	2203      	movs	r2, #3
 80094f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	3301      	adds	r3, #1
 80094fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009500:	e013      	b.n	800952a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	4413      	add	r3, r2
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	3301      	adds	r3, #1
 8009512:	613b      	str	r3, [r7, #16]
    idx++;
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	3301      	adds	r3, #1
 8009518:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	4413      	add	r3, r2
 8009520:	2200      	movs	r2, #0
 8009522:	701a      	strb	r2, [r3, #0]
    idx++;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	3301      	adds	r3, #1
 8009528:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e7      	bne.n	8009502 <USBD_GetString+0x6a>
 8009532:	e000      	b.n	8009536 <USBD_GetString+0x9e>
    return;
 8009534:	bf00      	nop
  }
}
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800954c:	e005      	b.n	800955a <USBD_GetLen+0x1e>
  {
    len++;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	3301      	adds	r3, #1
 8009552:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	3301      	adds	r3, #1
 8009558:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1f5      	bne.n	800954e <USBD_GetLen+0x12>
  }

  return len;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2202      	movs	r2, #2
 8009580:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	2100      	movs	r1, #0
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fd11 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	60b9      	str	r1, [r7, #8]
 80095b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	2100      	movs	r1, #0
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fd00 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2203      	movs	r2, #3
 80095d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	2100      	movs	r1, #0
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 fd04 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	2100      	movs	r1, #0
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 fcf3 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2204      	movs	r2, #4
 8009630:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009634:	2300      	movs	r3, #0
 8009636:	2200      	movs	r2, #0
 8009638:	2100      	movs	r1, #0
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fcbf 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2205      	movs	r2, #5
 8009656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800965a:	2300      	movs	r3, #0
 800965c:	2200      	movs	r2, #0
 800965e:	2100      	movs	r1, #0
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fccd 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009674:	2200      	movs	r2, #0
 8009676:	4912      	ldr	r1, [pc, #72]	@ (80096c0 <MX_USB_DEVICE_Init+0x50>)
 8009678:	4812      	ldr	r0, [pc, #72]	@ (80096c4 <MX_USB_DEVICE_Init+0x54>)
 800967a:	f7fe fcf7 	bl	800806c <USBD_Init>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009684:	f7f8 f8b4 	bl	80017f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009688:	490f      	ldr	r1, [pc, #60]	@ (80096c8 <MX_USB_DEVICE_Init+0x58>)
 800968a:	480e      	ldr	r0, [pc, #56]	@ (80096c4 <MX_USB_DEVICE_Init+0x54>)
 800968c:	f7fe fd1e 	bl	80080cc <USBD_RegisterClass>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009696:	f7f8 f8ab 	bl	80017f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800969a:	490c      	ldr	r1, [pc, #48]	@ (80096cc <MX_USB_DEVICE_Init+0x5c>)
 800969c:	4809      	ldr	r0, [pc, #36]	@ (80096c4 <MX_USB_DEVICE_Init+0x54>)
 800969e:	f7fe fc15 	bl	8007ecc <USBD_CDC_RegisterInterface>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096a8:	f7f8 f8a2 	bl	80017f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096ac:	4805      	ldr	r0, [pc, #20]	@ (80096c4 <MX_USB_DEVICE_Init+0x54>)
 80096ae:	f7fe fd43 	bl	8008138 <USBD_Start>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096b8:	f7f8 f89a 	bl	80017f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096bc:	bf00      	nop
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	200000b4 	.word	0x200000b4
 80096c4:	200002fc 	.word	0x200002fc
 80096c8:	20000020 	.word	0x20000020
 80096cc:	200000a0 	.word	0x200000a0

080096d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096d4:	2200      	movs	r2, #0
 80096d6:	4905      	ldr	r1, [pc, #20]	@ (80096ec <CDC_Init_FS+0x1c>)
 80096d8:	4805      	ldr	r0, [pc, #20]	@ (80096f0 <CDC_Init_FS+0x20>)
 80096da:	f7fe fc11 	bl	8007f00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096de:	4905      	ldr	r1, [pc, #20]	@ (80096f4 <CDC_Init_FS+0x24>)
 80096e0:	4803      	ldr	r0, [pc, #12]	@ (80096f0 <CDC_Init_FS+0x20>)
 80096e2:	f7fe fc2f 	bl	8007f44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	20000dd8 	.word	0x20000dd8
 80096f0:	200002fc 	.word	0x200002fc
 80096f4:	200005d8 	.word	0x200005d8

080096f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096fe:	4618      	mov	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	6039      	str	r1, [r7, #0]
 8009712:	71fb      	strb	r3, [r7, #7]
 8009714:	4613      	mov	r3, r2
 8009716:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009718:	79fb      	ldrb	r3, [r7, #7]
 800971a:	2b23      	cmp	r3, #35	@ 0x23
 800971c:	d84a      	bhi.n	80097b4 <CDC_Control_FS+0xac>
 800971e:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <CDC_Control_FS+0x1c>)
 8009720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009724:	080097b5 	.word	0x080097b5
 8009728:	080097b5 	.word	0x080097b5
 800972c:	080097b5 	.word	0x080097b5
 8009730:	080097b5 	.word	0x080097b5
 8009734:	080097b5 	.word	0x080097b5
 8009738:	080097b5 	.word	0x080097b5
 800973c:	080097b5 	.word	0x080097b5
 8009740:	080097b5 	.word	0x080097b5
 8009744:	080097b5 	.word	0x080097b5
 8009748:	080097b5 	.word	0x080097b5
 800974c:	080097b5 	.word	0x080097b5
 8009750:	080097b5 	.word	0x080097b5
 8009754:	080097b5 	.word	0x080097b5
 8009758:	080097b5 	.word	0x080097b5
 800975c:	080097b5 	.word	0x080097b5
 8009760:	080097b5 	.word	0x080097b5
 8009764:	080097b5 	.word	0x080097b5
 8009768:	080097b5 	.word	0x080097b5
 800976c:	080097b5 	.word	0x080097b5
 8009770:	080097b5 	.word	0x080097b5
 8009774:	080097b5 	.word	0x080097b5
 8009778:	080097b5 	.word	0x080097b5
 800977c:	080097b5 	.word	0x080097b5
 8009780:	080097b5 	.word	0x080097b5
 8009784:	080097b5 	.word	0x080097b5
 8009788:	080097b5 	.word	0x080097b5
 800978c:	080097b5 	.word	0x080097b5
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097b5 	.word	0x080097b5
 8009798:	080097b5 	.word	0x080097b5
 800979c:	080097b5 	.word	0x080097b5
 80097a0:	080097b5 	.word	0x080097b5
 80097a4:	080097b5 	.word	0x080097b5
 80097a8:	080097b5 	.word	0x080097b5
 80097ac:	080097b5 	.word	0x080097b5
 80097b0:	080097b5 	.word	0x080097b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097b4:	bf00      	nop
  }

  return (USBD_OK);
 80097b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80097ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80097d2:	480a      	ldr	r0, [pc, #40]	@ (80097fc <CDC_Receive_FS+0x38>)
 80097d4:	f7f8 fe23 	bl	800241e <HAL_GPIO_TogglePin>
	CDC_ReceiveCallback(Buf, *Len);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7f6 ff2e 	bl	8000640 <CDC_ReceiveCallback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4806      	ldr	r0, [pc, #24]	@ (8009800 <CDC_Receive_FS+0x3c>)
 80097e8:	f7fe fbac 	bl	8007f44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097ec:	4804      	ldr	r0, [pc, #16]	@ (8009800 <CDC_Receive_FS+0x3c>)
 80097ee:	f7fe fc07 	bl	8008000 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80097f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	40020000 	.word	0x40020000
 8009800:	200002fc 	.word	0x200002fc

08009804 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009814:	4b0d      	ldr	r3, [pc, #52]	@ (800984c <CDC_Transmit_FS+0x48>)
 8009816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800981a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009826:	2301      	movs	r3, #1
 8009828:	e00b      	b.n	8009842 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800982a:	887b      	ldrh	r3, [r7, #2]
 800982c:	461a      	mov	r2, r3
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4806      	ldr	r0, [pc, #24]	@ (800984c <CDC_Transmit_FS+0x48>)
 8009832:	f7fe fb65 	bl	8007f00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009836:	4805      	ldr	r0, [pc, #20]	@ (800984c <CDC_Transmit_FS+0x48>)
 8009838:	f7fe fba2 	bl	8007f80 <USBD_CDC_TransmitPacket>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009840:	7bfb      	ldrb	r3, [r7, #15]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	200002fc 	.word	0x200002fc

08009850 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009866:	4618      	mov	r0, r3
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	6039      	str	r1, [r7, #0]
 800987e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2212      	movs	r2, #18
 8009884:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009886:	4b03      	ldr	r3, [pc, #12]	@ (8009894 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	200000d0 	.word	0x200000d0

08009898 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	6039      	str	r1, [r7, #0]
 80098a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2204      	movs	r2, #4
 80098a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098aa:	4b03      	ldr	r3, [pc, #12]	@ (80098b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	200000e4 	.word	0x200000e4

080098bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d105      	bne.n	80098da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4907      	ldr	r1, [pc, #28]	@ (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098d2:	4808      	ldr	r0, [pc, #32]	@ (80098f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098d4:	f7ff fde0 	bl	8009498 <USBD_GetString>
 80098d8:	e004      	b.n	80098e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	4904      	ldr	r1, [pc, #16]	@ (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098de:	4805      	ldr	r0, [pc, #20]	@ (80098f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098e0:	f7ff fdda 	bl	8009498 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098e4:	4b02      	ldr	r3, [pc, #8]	@ (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200015d8 	.word	0x200015d8
 80098f4:	0800b760 	.word	0x0800b760

080098f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	4904      	ldr	r1, [pc, #16]	@ (8009918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009908:	4804      	ldr	r0, [pc, #16]	@ (800991c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800990a:	f7ff fdc5 	bl	8009498 <USBD_GetString>
  return USBD_StrDesc;
 800990e:	4b02      	ldr	r3, [pc, #8]	@ (8009918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	200015d8 	.word	0x200015d8
 800991c:	0800b778 	.word	0x0800b778

08009920 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	221a      	movs	r2, #26
 8009930:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009932:	f000 f843 	bl	80099bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009936:	4b02      	ldr	r3, [pc, #8]	@ (8009940 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	200000e8 	.word	0x200000e8

08009944 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4907      	ldr	r1, [pc, #28]	@ (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
 800995a:	4808      	ldr	r0, [pc, #32]	@ (800997c <USBD_FS_ConfigStrDescriptor+0x38>)
 800995c:	f7ff fd9c 	bl	8009498 <USBD_GetString>
 8009960:	e004      	b.n	800996c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4904      	ldr	r1, [pc, #16]	@ (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009966:	4805      	ldr	r0, [pc, #20]	@ (800997c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009968:	f7ff fd96 	bl	8009498 <USBD_GetString>
  }
  return USBD_StrDesc;
 800996c:	4b02      	ldr	r3, [pc, #8]	@ (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200015d8 	.word	0x200015d8
 800997c:	0800b78c 	.word	0x0800b78c

08009980 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d105      	bne.n	800999e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	4907      	ldr	r1, [pc, #28]	@ (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009996:	4808      	ldr	r0, [pc, #32]	@ (80099b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009998:	f7ff fd7e 	bl	8009498 <USBD_GetString>
 800999c:	e004      	b.n	80099a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4904      	ldr	r1, [pc, #16]	@ (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099a2:	4805      	ldr	r0, [pc, #20]	@ (80099b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099a4:	f7ff fd78 	bl	8009498 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099a8:	4b02      	ldr	r3, [pc, #8]	@ (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	200015d8 	.word	0x200015d8
 80099b8:	0800b798 	.word	0x0800b798

080099bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009a00 <Get_SerialNum+0x44>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009a04 <Get_SerialNum+0x48>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009a08 <Get_SerialNum+0x4c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4413      	add	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099e2:	2208      	movs	r2, #8
 80099e4:	4909      	ldr	r1, [pc, #36]	@ (8009a0c <Get_SerialNum+0x50>)
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 f814 	bl	8009a14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099ec:	2204      	movs	r2, #4
 80099ee:	4908      	ldr	r1, [pc, #32]	@ (8009a10 <Get_SerialNum+0x54>)
 80099f0:	68b8      	ldr	r0, [r7, #8]
 80099f2:	f000 f80f 	bl	8009a14 <IntToUnicode>
  }
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	1fff7a10 	.word	0x1fff7a10
 8009a04:	1fff7a14 	.word	0x1fff7a14
 8009a08:	1fff7a18 	.word	0x1fff7a18
 8009a0c:	200000ea 	.word	0x200000ea
 8009a10:	200000fa 	.word	0x200000fa

08009a14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	75fb      	strb	r3, [r7, #23]
 8009a2a:	e027      	b.n	8009a7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	0f1b      	lsrs	r3, r3, #28
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d80b      	bhi.n	8009a4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	0f1b      	lsrs	r3, r3, #28
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	005b      	lsls	r3, r3, #1
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	440b      	add	r3, r1
 8009a44:	3230      	adds	r2, #48	@ 0x30
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	e00a      	b.n	8009a62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	0f1b      	lsrs	r3, r3, #28
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	4619      	mov	r1, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	440b      	add	r3, r1
 8009a5c:	3237      	adds	r2, #55	@ 0x37
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	011b      	lsls	r3, r3, #4
 8009a66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	4413      	add	r3, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
 8009a7c:	7dfa      	ldrb	r2, [r7, #23]
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d3d3      	bcc.n	8009a2c <IntToUnicode+0x18>
  }
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	371c      	adds	r7, #28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
	...

08009a94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	@ 0x28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a9c:	f107 0314 	add.w	r3, r7, #20
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	60da      	str	r2, [r3, #12]
 8009aaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ab4:	d147      	bne.n	8009b46 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	4b25      	ldr	r3, [pc, #148]	@ (8009b50 <HAL_PCD_MspInit+0xbc>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abe:	4a24      	ldr	r2, [pc, #144]	@ (8009b50 <HAL_PCD_MspInit+0xbc>)
 8009ac0:	f043 0301 	orr.w	r3, r3, #1
 8009ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ac6:	4b22      	ldr	r3, [pc, #136]	@ (8009b50 <HAL_PCD_MspInit+0xbc>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	613b      	str	r3, [r7, #16]
 8009ad0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009adc:	2300      	movs	r3, #0
 8009ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ae0:	f107 0314 	add.w	r3, r7, #20
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	481b      	ldr	r0, [pc, #108]	@ (8009b54 <HAL_PCD_MspInit+0xc0>)
 8009ae8:	f7f8 fae4 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_DATAM_Pin|USB_DATAP_Pin;
 8009aec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af2:	2302      	movs	r3, #2
 8009af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009afa:	2303      	movs	r3, #3
 8009afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009afe:	230a      	movs	r3, #10
 8009b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b02:	f107 0314 	add.w	r3, r7, #20
 8009b06:	4619      	mov	r1, r3
 8009b08:	4812      	ldr	r0, [pc, #72]	@ (8009b54 <HAL_PCD_MspInit+0xc0>)
 8009b0a:	f7f8 fad3 	bl	80020b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b0e:	4b10      	ldr	r3, [pc, #64]	@ (8009b50 <HAL_PCD_MspInit+0xbc>)
 8009b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b12:	4a0f      	ldr	r2, [pc, #60]	@ (8009b50 <HAL_PCD_MspInit+0xbc>)
 8009b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b18:	6353      	str	r3, [r2, #52]	@ 0x34
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b50 <HAL_PCD_MspInit+0xbc>)
 8009b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b22:	4a0b      	ldr	r2, [pc, #44]	@ (8009b50 <HAL_PCD_MspInit+0xbc>)
 8009b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b2a:	4b09      	ldr	r3, [pc, #36]	@ (8009b50 <HAL_PCD_MspInit+0xbc>)
 8009b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	2043      	movs	r0, #67	@ 0x43
 8009b3c:	f7f8 fa83 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b40:	2043      	movs	r0, #67	@ 0x43
 8009b42:	f7f8 fa9c 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b46:	bf00      	nop
 8009b48:	3728      	adds	r7, #40	@ 0x28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40023800 	.word	0x40023800
 8009b54:	40020000 	.word	0x40020000

08009b58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f7fe fb2f 	bl	80081d2 <USBD_LL_SetupStage>
}
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009b8e:	78fa      	ldrb	r2, [r7, #3]
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	4613      	mov	r3, r2
 8009b94:	00db      	lsls	r3, r3, #3
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	440b      	add	r3, r1
 8009b9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	78fb      	ldrb	r3, [r7, #3]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	f7fe fb69 	bl	800827c <USBD_LL_DataOutStage>
}
 8009baa:	bf00      	nop
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009bc4:	78fa      	ldrb	r2, [r7, #3]
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	00db      	lsls	r3, r3, #3
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	3320      	adds	r3, #32
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	78fb      	ldrb	r3, [r7, #3]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	f7fe fc02 	bl	80083e2 <USBD_LL_DataInStage>
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe fd3c 	bl	8008672 <USBD_LL_SOF>
}
 8009bfa:	bf00      	nop
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	79db      	ldrb	r3, [r3, #7]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d001      	beq.n	8009c1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c16:	f7f7 fdeb 	bl	80017f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c20:	7bfa      	ldrb	r2, [r7, #15]
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fe fce0 	bl	80085ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe fc88 	bl	8008546 <USBD_LL_Reset>
}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fcdb 	bl	800860a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6812      	ldr	r2, [r2, #0]
 8009c62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009c66:	f043 0301 	orr.w	r3, r3, #1
 8009c6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	7adb      	ldrb	r3, [r3, #11]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c74:	4b04      	ldr	r3, [pc, #16]	@ (8009c88 <HAL_PCD_SuspendCallback+0x48>)
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	4a03      	ldr	r2, [pc, #12]	@ (8009c88 <HAL_PCD_SuspendCallback+0x48>)
 8009c7a:	f043 0306 	orr.w	r3, r3, #6
 8009c7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	e000ed00 	.word	0xe000ed00

08009c8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fcd1 	bl	8008642 <USBD_LL_Resume>
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe fd29 	bl	8008716 <USBD_LL_IsoOUTIncomplete>
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fce5 	bl	80086b2 <USBD_LL_IsoINIncomplete>
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fd3b 	bl	800877a <USBD_LL_DevConnected>
  /* USER CODE BEGIN */
  	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8009d04:	2200      	movs	r2, #0
 8009d06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009d0a:	4803      	ldr	r0, [pc, #12]	@ (8009d18 <HAL_PCD_ConnectCallback+0x28>)
 8009d0c:	f7f8 fb6e 	bl	80023ec <HAL_GPIO_WritePin>

  /* USER CODE END */
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	40020000 	.word	0x40020000

08009d1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fd30 	bl	8008790 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN 5*/
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8009d30:	2201      	movs	r2, #1
 8009d32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009d36:	4806      	ldr	r0, [pc, #24]	@ (8009d50 <HAL_PCD_DisconnectCallback+0x34>)
 8009d38:	f7f8 fb58 	bl	80023ec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);//
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d42:	4803      	ldr	r0, [pc, #12]	@ (8009d50 <HAL_PCD_DisconnectCallback+0x34>)
 8009d44:	f7f8 fb52 	bl	80023ec <HAL_GPIO_WritePin>
    /* USER CODE END 5*/
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	40020000 	.word	0x40020000

08009d54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d13c      	bne.n	8009dde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d64:	4a20      	ldr	r2, [pc, #128]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d70:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d74:	4b1c      	ldr	r3, [pc, #112]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009d7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d7e:	2204      	movs	r2, #4
 8009d80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d82:	4b19      	ldr	r3, [pc, #100]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d84:	2202      	movs	r2, #2
 8009d86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d88:	4b17      	ldr	r3, [pc, #92]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d8e:	4b16      	ldr	r3, [pc, #88]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d90:	2202      	movs	r2, #2
 8009d92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d94:	4b14      	ldr	r3, [pc, #80]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d9a:	4b13      	ldr	r3, [pc, #76]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009da0:	4b11      	ldr	r3, [pc, #68]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009da6:	4b10      	ldr	r3, [pc, #64]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009da8:	2201      	movs	r2, #1
 8009daa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009dac:	4b0e      	ldr	r3, [pc, #56]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009db2:	480d      	ldr	r0, [pc, #52]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009db4:	f7f9 fb48 	bl	8003448 <HAL_PCD_Init>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009dbe:	f7f7 fd17 	bl	80017f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dc2:	2180      	movs	r1, #128	@ 0x80
 8009dc4:	4808      	ldr	r0, [pc, #32]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009dc6:	f7fa fd74 	bl	80048b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dca:	2240      	movs	r2, #64	@ 0x40
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4806      	ldr	r0, [pc, #24]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009dd0:	f7fa fd28 	bl	8004824 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dd4:	2280      	movs	r2, #128	@ 0x80
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	4803      	ldr	r0, [pc, #12]	@ (8009de8 <USBD_LL_Init+0x94>)
 8009dda:	f7fa fd23 	bl	8004824 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	200017d8 	.word	0x200017d8

08009dec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7f9 fc2f 	bl	8003666 <HAL_PCD_Start>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f942 	bl	800a098 <USBD_Get_USB_Status>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	461a      	mov	r2, r3
 8009e30:	4603      	mov	r3, r0
 8009e32:	70fb      	strb	r3, [r7, #3]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70bb      	strb	r3, [r7, #2]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e4a:	78bb      	ldrb	r3, [r7, #2]
 8009e4c:	883a      	ldrh	r2, [r7, #0]
 8009e4e:	78f9      	ldrb	r1, [r7, #3]
 8009e50:	f7fa f903 	bl	800405a <HAL_PCD_EP_Open>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 f91c 	bl	800a098 <USBD_Get_USB_Status>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e88:	78fa      	ldrb	r2, [r7, #3]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fa f94e 	bl	800412e <HAL_PCD_EP_Close>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 f8fd 	bl	800a098 <USBD_Get_USB_Status>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fa fa06 	bl	80042dc <HAL_PCD_EP_SetStall>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f8de 	bl	800a098 <USBD_Get_USB_Status>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f04:	78fa      	ldrb	r2, [r7, #3]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fa fa4a 	bl	80043a2 <HAL_PCD_EP_ClrStall>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 f8bf 	bl	800a098 <USBD_Get_USB_Status>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	da0b      	bge.n	8009f5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	3316      	adds	r3, #22
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	e00b      	b.n	8009f74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	4613      	mov	r3, r2
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	440b      	add	r3, r1
 8009f6e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009f72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f9a:	78fa      	ldrb	r2, [r7, #3]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fa f837 	bl	8004012 <HAL_PCD_SetAddress>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f874 	bl	800a098 <USBD_Get_USB_Status>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009fdc:	7af9      	ldrb	r1, [r7, #11]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	f7fa f941 	bl	8004268 <HAL_PCD_EP_Transmit>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 f853 	bl	800a098 <USBD_Get_USB_Status>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ff6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	460b      	mov	r3, r1
 800a00e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a01e:	7af9      	ldrb	r1, [r7, #11]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	f7fa f8cd 	bl	80041c2 <HAL_PCD_EP_Receive>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f832 	bl	800a098 <USBD_Get_USB_Status>
 800a034:	4603      	mov	r3, r0
 800a036:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a038:	7dbb      	ldrb	r3, [r7, #22]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fa f8ed 	bl	8004238 <HAL_PCD_EP_GetRxCount>
 800a05e:	4603      	mov	r3, r0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a070:	4b03      	ldr	r3, [pc, #12]	@ (800a080 <USBD_static_malloc+0x18>)
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	20001cbc 	.word	0x20001cbc

0800a084 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d817      	bhi.n	800a0dc <USBD_Get_USB_Status+0x44>
 800a0ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b4 <USBD_Get_USB_Status+0x1c>)
 800a0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b2:	bf00      	nop
 800a0b4:	0800a0c5 	.word	0x0800a0c5
 800a0b8:	0800a0cb 	.word	0x0800a0cb
 800a0bc:	0800a0d1 	.word	0x0800a0d1
 800a0c0:	0800a0d7 	.word	0x0800a0d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c8:	e00b      	b.n	800a0e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ce:	e008      	b.n	800a0e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d4:	e005      	b.n	800a0e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0da:	e002      	b.n	800a0e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e0:	bf00      	nop
  }
  return usb_status;
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <atoi>:
 800a0f0:	220a      	movs	r2, #10
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	f000 b87a 	b.w	800a1ec <strtol>

0800a0f8 <_strtol_l.constprop.0>:
 800a0f8:	2b24      	cmp	r3, #36	@ 0x24
 800a0fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fe:	4686      	mov	lr, r0
 800a100:	4690      	mov	r8, r2
 800a102:	d801      	bhi.n	800a108 <_strtol_l.constprop.0+0x10>
 800a104:	2b01      	cmp	r3, #1
 800a106:	d106      	bne.n	800a116 <_strtol_l.constprop.0+0x1e>
 800a108:	f000 fa70 	bl	800a5ec <__errno>
 800a10c:	2316      	movs	r3, #22
 800a10e:	6003      	str	r3, [r0, #0]
 800a110:	2000      	movs	r0, #0
 800a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a116:	4834      	ldr	r0, [pc, #208]	@ (800a1e8 <_strtol_l.constprop.0+0xf0>)
 800a118:	460d      	mov	r5, r1
 800a11a:	462a      	mov	r2, r5
 800a11c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a120:	5d06      	ldrb	r6, [r0, r4]
 800a122:	f016 0608 	ands.w	r6, r6, #8
 800a126:	d1f8      	bne.n	800a11a <_strtol_l.constprop.0+0x22>
 800a128:	2c2d      	cmp	r4, #45	@ 0x2d
 800a12a:	d12d      	bne.n	800a188 <_strtol_l.constprop.0+0x90>
 800a12c:	782c      	ldrb	r4, [r5, #0]
 800a12e:	2601      	movs	r6, #1
 800a130:	1c95      	adds	r5, r2, #2
 800a132:	f033 0210 	bics.w	r2, r3, #16
 800a136:	d109      	bne.n	800a14c <_strtol_l.constprop.0+0x54>
 800a138:	2c30      	cmp	r4, #48	@ 0x30
 800a13a:	d12a      	bne.n	800a192 <_strtol_l.constprop.0+0x9a>
 800a13c:	782a      	ldrb	r2, [r5, #0]
 800a13e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a142:	2a58      	cmp	r2, #88	@ 0x58
 800a144:	d125      	bne.n	800a192 <_strtol_l.constprop.0+0x9a>
 800a146:	786c      	ldrb	r4, [r5, #1]
 800a148:	2310      	movs	r3, #16
 800a14a:	3502      	adds	r5, #2
 800a14c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a150:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a154:	2200      	movs	r2, #0
 800a156:	fbbc f9f3 	udiv	r9, ip, r3
 800a15a:	4610      	mov	r0, r2
 800a15c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a160:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a164:	2f09      	cmp	r7, #9
 800a166:	d81b      	bhi.n	800a1a0 <_strtol_l.constprop.0+0xa8>
 800a168:	463c      	mov	r4, r7
 800a16a:	42a3      	cmp	r3, r4
 800a16c:	dd27      	ble.n	800a1be <_strtol_l.constprop.0+0xc6>
 800a16e:	1c57      	adds	r7, r2, #1
 800a170:	d007      	beq.n	800a182 <_strtol_l.constprop.0+0x8a>
 800a172:	4581      	cmp	r9, r0
 800a174:	d320      	bcc.n	800a1b8 <_strtol_l.constprop.0+0xc0>
 800a176:	d101      	bne.n	800a17c <_strtol_l.constprop.0+0x84>
 800a178:	45a2      	cmp	sl, r4
 800a17a:	db1d      	blt.n	800a1b8 <_strtol_l.constprop.0+0xc0>
 800a17c:	fb00 4003 	mla	r0, r0, r3, r4
 800a180:	2201      	movs	r2, #1
 800a182:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a186:	e7eb      	b.n	800a160 <_strtol_l.constprop.0+0x68>
 800a188:	2c2b      	cmp	r4, #43	@ 0x2b
 800a18a:	bf04      	itt	eq
 800a18c:	782c      	ldrbeq	r4, [r5, #0]
 800a18e:	1c95      	addeq	r5, r2, #2
 800a190:	e7cf      	b.n	800a132 <_strtol_l.constprop.0+0x3a>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1da      	bne.n	800a14c <_strtol_l.constprop.0+0x54>
 800a196:	2c30      	cmp	r4, #48	@ 0x30
 800a198:	bf0c      	ite	eq
 800a19a:	2308      	moveq	r3, #8
 800a19c:	230a      	movne	r3, #10
 800a19e:	e7d5      	b.n	800a14c <_strtol_l.constprop.0+0x54>
 800a1a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a1a4:	2f19      	cmp	r7, #25
 800a1a6:	d801      	bhi.n	800a1ac <_strtol_l.constprop.0+0xb4>
 800a1a8:	3c37      	subs	r4, #55	@ 0x37
 800a1aa:	e7de      	b.n	800a16a <_strtol_l.constprop.0+0x72>
 800a1ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a1b0:	2f19      	cmp	r7, #25
 800a1b2:	d804      	bhi.n	800a1be <_strtol_l.constprop.0+0xc6>
 800a1b4:	3c57      	subs	r4, #87	@ 0x57
 800a1b6:	e7d8      	b.n	800a16a <_strtol_l.constprop.0+0x72>
 800a1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1bc:	e7e1      	b.n	800a182 <_strtol_l.constprop.0+0x8a>
 800a1be:	1c53      	adds	r3, r2, #1
 800a1c0:	d108      	bne.n	800a1d4 <_strtol_l.constprop.0+0xdc>
 800a1c2:	2322      	movs	r3, #34	@ 0x22
 800a1c4:	f8ce 3000 	str.w	r3, [lr]
 800a1c8:	4660      	mov	r0, ip
 800a1ca:	f1b8 0f00 	cmp.w	r8, #0
 800a1ce:	d0a0      	beq.n	800a112 <_strtol_l.constprop.0+0x1a>
 800a1d0:	1e69      	subs	r1, r5, #1
 800a1d2:	e006      	b.n	800a1e2 <_strtol_l.constprop.0+0xea>
 800a1d4:	b106      	cbz	r6, 800a1d8 <_strtol_l.constprop.0+0xe0>
 800a1d6:	4240      	negs	r0, r0
 800a1d8:	f1b8 0f00 	cmp.w	r8, #0
 800a1dc:	d099      	beq.n	800a112 <_strtol_l.constprop.0+0x1a>
 800a1de:	2a00      	cmp	r2, #0
 800a1e0:	d1f6      	bne.n	800a1d0 <_strtol_l.constprop.0+0xd8>
 800a1e2:	f8c8 1000 	str.w	r1, [r8]
 800a1e6:	e794      	b.n	800a112 <_strtol_l.constprop.0+0x1a>
 800a1e8:	0800b7c1 	.word	0x0800b7c1

0800a1ec <strtol>:
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	460a      	mov	r2, r1
 800a1f0:	4601      	mov	r1, r0
 800a1f2:	4802      	ldr	r0, [pc, #8]	@ (800a1fc <strtol+0x10>)
 800a1f4:	6800      	ldr	r0, [r0, #0]
 800a1f6:	f7ff bf7f 	b.w	800a0f8 <_strtol_l.constprop.0>
 800a1fa:	bf00      	nop
 800a1fc:	20000110 	.word	0x20000110

0800a200 <std>:
 800a200:	2300      	movs	r3, #0
 800a202:	b510      	push	{r4, lr}
 800a204:	4604      	mov	r4, r0
 800a206:	e9c0 3300 	strd	r3, r3, [r0]
 800a20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a20e:	6083      	str	r3, [r0, #8]
 800a210:	8181      	strh	r1, [r0, #12]
 800a212:	6643      	str	r3, [r0, #100]	@ 0x64
 800a214:	81c2      	strh	r2, [r0, #14]
 800a216:	6183      	str	r3, [r0, #24]
 800a218:	4619      	mov	r1, r3
 800a21a:	2208      	movs	r2, #8
 800a21c:	305c      	adds	r0, #92	@ 0x5c
 800a21e:	f000 f928 	bl	800a472 <memset>
 800a222:	4b0d      	ldr	r3, [pc, #52]	@ (800a258 <std+0x58>)
 800a224:	6263      	str	r3, [r4, #36]	@ 0x24
 800a226:	4b0d      	ldr	r3, [pc, #52]	@ (800a25c <std+0x5c>)
 800a228:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a22a:	4b0d      	ldr	r3, [pc, #52]	@ (800a260 <std+0x60>)
 800a22c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a22e:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <std+0x64>)
 800a230:	6323      	str	r3, [r4, #48]	@ 0x30
 800a232:	4b0d      	ldr	r3, [pc, #52]	@ (800a268 <std+0x68>)
 800a234:	6224      	str	r4, [r4, #32]
 800a236:	429c      	cmp	r4, r3
 800a238:	d006      	beq.n	800a248 <std+0x48>
 800a23a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a23e:	4294      	cmp	r4, r2
 800a240:	d002      	beq.n	800a248 <std+0x48>
 800a242:	33d0      	adds	r3, #208	@ 0xd0
 800a244:	429c      	cmp	r4, r3
 800a246:	d105      	bne.n	800a254 <std+0x54>
 800a248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a250:	f000 b9f6 	b.w	800a640 <__retarget_lock_init_recursive>
 800a254:	bd10      	pop	{r4, pc}
 800a256:	bf00      	nop
 800a258:	0800a3ed 	.word	0x0800a3ed
 800a25c:	0800a40f 	.word	0x0800a40f
 800a260:	0800a447 	.word	0x0800a447
 800a264:	0800a46b 	.word	0x0800a46b
 800a268:	20001edc 	.word	0x20001edc

0800a26c <stdio_exit_handler>:
 800a26c:	4a02      	ldr	r2, [pc, #8]	@ (800a278 <stdio_exit_handler+0xc>)
 800a26e:	4903      	ldr	r1, [pc, #12]	@ (800a27c <stdio_exit_handler+0x10>)
 800a270:	4803      	ldr	r0, [pc, #12]	@ (800a280 <stdio_exit_handler+0x14>)
 800a272:	f000 b869 	b.w	800a348 <_fwalk_sglue>
 800a276:	bf00      	nop
 800a278:	20000104 	.word	0x20000104
 800a27c:	0800af59 	.word	0x0800af59
 800a280:	20000114 	.word	0x20000114

0800a284 <cleanup_stdio>:
 800a284:	6841      	ldr	r1, [r0, #4]
 800a286:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b8 <cleanup_stdio+0x34>)
 800a288:	4299      	cmp	r1, r3
 800a28a:	b510      	push	{r4, lr}
 800a28c:	4604      	mov	r4, r0
 800a28e:	d001      	beq.n	800a294 <cleanup_stdio+0x10>
 800a290:	f000 fe62 	bl	800af58 <_fflush_r>
 800a294:	68a1      	ldr	r1, [r4, #8]
 800a296:	4b09      	ldr	r3, [pc, #36]	@ (800a2bc <cleanup_stdio+0x38>)
 800a298:	4299      	cmp	r1, r3
 800a29a:	d002      	beq.n	800a2a2 <cleanup_stdio+0x1e>
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 fe5b 	bl	800af58 <_fflush_r>
 800a2a2:	68e1      	ldr	r1, [r4, #12]
 800a2a4:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <cleanup_stdio+0x3c>)
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	d004      	beq.n	800a2b4 <cleanup_stdio+0x30>
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b0:	f000 be52 	b.w	800af58 <_fflush_r>
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20001edc 	.word	0x20001edc
 800a2bc:	20001f44 	.word	0x20001f44
 800a2c0:	20001fac 	.word	0x20001fac

0800a2c4 <global_stdio_init.part.0>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f4 <global_stdio_init.part.0+0x30>)
 800a2c8:	4c0b      	ldr	r4, [pc, #44]	@ (800a2f8 <global_stdio_init.part.0+0x34>)
 800a2ca:	4a0c      	ldr	r2, [pc, #48]	@ (800a2fc <global_stdio_init.part.0+0x38>)
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2104      	movs	r1, #4
 800a2d4:	f7ff ff94 	bl	800a200 <std>
 800a2d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2dc:	2201      	movs	r2, #1
 800a2de:	2109      	movs	r1, #9
 800a2e0:	f7ff ff8e 	bl	800a200 <std>
 800a2e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ee:	2112      	movs	r1, #18
 800a2f0:	f7ff bf86 	b.w	800a200 <std>
 800a2f4:	20002014 	.word	0x20002014
 800a2f8:	20001edc 	.word	0x20001edc
 800a2fc:	0800a26d 	.word	0x0800a26d

0800a300 <__sfp_lock_acquire>:
 800a300:	4801      	ldr	r0, [pc, #4]	@ (800a308 <__sfp_lock_acquire+0x8>)
 800a302:	f000 b99e 	b.w	800a642 <__retarget_lock_acquire_recursive>
 800a306:	bf00      	nop
 800a308:	2000201d 	.word	0x2000201d

0800a30c <__sfp_lock_release>:
 800a30c:	4801      	ldr	r0, [pc, #4]	@ (800a314 <__sfp_lock_release+0x8>)
 800a30e:	f000 b999 	b.w	800a644 <__retarget_lock_release_recursive>
 800a312:	bf00      	nop
 800a314:	2000201d 	.word	0x2000201d

0800a318 <__sinit>:
 800a318:	b510      	push	{r4, lr}
 800a31a:	4604      	mov	r4, r0
 800a31c:	f7ff fff0 	bl	800a300 <__sfp_lock_acquire>
 800a320:	6a23      	ldr	r3, [r4, #32]
 800a322:	b11b      	cbz	r3, 800a32c <__sinit+0x14>
 800a324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a328:	f7ff bff0 	b.w	800a30c <__sfp_lock_release>
 800a32c:	4b04      	ldr	r3, [pc, #16]	@ (800a340 <__sinit+0x28>)
 800a32e:	6223      	str	r3, [r4, #32]
 800a330:	4b04      	ldr	r3, [pc, #16]	@ (800a344 <__sinit+0x2c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1f5      	bne.n	800a324 <__sinit+0xc>
 800a338:	f7ff ffc4 	bl	800a2c4 <global_stdio_init.part.0>
 800a33c:	e7f2      	b.n	800a324 <__sinit+0xc>
 800a33e:	bf00      	nop
 800a340:	0800a285 	.word	0x0800a285
 800a344:	20002014 	.word	0x20002014

0800a348 <_fwalk_sglue>:
 800a348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a34c:	4607      	mov	r7, r0
 800a34e:	4688      	mov	r8, r1
 800a350:	4614      	mov	r4, r2
 800a352:	2600      	movs	r6, #0
 800a354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a358:	f1b9 0901 	subs.w	r9, r9, #1
 800a35c:	d505      	bpl.n	800a36a <_fwalk_sglue+0x22>
 800a35e:	6824      	ldr	r4, [r4, #0]
 800a360:	2c00      	cmp	r4, #0
 800a362:	d1f7      	bne.n	800a354 <_fwalk_sglue+0xc>
 800a364:	4630      	mov	r0, r6
 800a366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a36a:	89ab      	ldrh	r3, [r5, #12]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d907      	bls.n	800a380 <_fwalk_sglue+0x38>
 800a370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a374:	3301      	adds	r3, #1
 800a376:	d003      	beq.n	800a380 <_fwalk_sglue+0x38>
 800a378:	4629      	mov	r1, r5
 800a37a:	4638      	mov	r0, r7
 800a37c:	47c0      	blx	r8
 800a37e:	4306      	orrs	r6, r0
 800a380:	3568      	adds	r5, #104	@ 0x68
 800a382:	e7e9      	b.n	800a358 <_fwalk_sglue+0x10>

0800a384 <sniprintf>:
 800a384:	b40c      	push	{r2, r3}
 800a386:	b530      	push	{r4, r5, lr}
 800a388:	4b17      	ldr	r3, [pc, #92]	@ (800a3e8 <sniprintf+0x64>)
 800a38a:	1e0c      	subs	r4, r1, #0
 800a38c:	681d      	ldr	r5, [r3, #0]
 800a38e:	b09d      	sub	sp, #116	@ 0x74
 800a390:	da08      	bge.n	800a3a4 <sniprintf+0x20>
 800a392:	238b      	movs	r3, #139	@ 0x8b
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	f04f 30ff 	mov.w	r0, #4294967295
 800a39a:	b01d      	add	sp, #116	@ 0x74
 800a39c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3a0:	b002      	add	sp, #8
 800a3a2:	4770      	bx	lr
 800a3a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a3a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a3ac:	bf14      	ite	ne
 800a3ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a3b2:	4623      	moveq	r3, r4
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	9307      	str	r3, [sp, #28]
 800a3b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3bc:	9002      	str	r0, [sp, #8]
 800a3be:	9006      	str	r0, [sp, #24]
 800a3c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a3c6:	ab21      	add	r3, sp, #132	@ 0x84
 800a3c8:	a902      	add	r1, sp, #8
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	f000 fab5 	bl	800a93c <_svfiprintf_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	bfbc      	itt	lt
 800a3d6:	238b      	movlt	r3, #139	@ 0x8b
 800a3d8:	602b      	strlt	r3, [r5, #0]
 800a3da:	2c00      	cmp	r4, #0
 800a3dc:	d0dd      	beq.n	800a39a <sniprintf+0x16>
 800a3de:	9b02      	ldr	r3, [sp, #8]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	e7d9      	b.n	800a39a <sniprintf+0x16>
 800a3e6:	bf00      	nop
 800a3e8:	20000110 	.word	0x20000110

0800a3ec <__sread>:
 800a3ec:	b510      	push	{r4, lr}
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f4:	f000 f8d6 	bl	800a5a4 <_read_r>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	bfab      	itete	ge
 800a3fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a3fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a400:	181b      	addge	r3, r3, r0
 800a402:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a406:	bfac      	ite	ge
 800a408:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a40a:	81a3      	strhlt	r3, [r4, #12]
 800a40c:	bd10      	pop	{r4, pc}

0800a40e <__swrite>:
 800a40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a412:	461f      	mov	r7, r3
 800a414:	898b      	ldrh	r3, [r1, #12]
 800a416:	05db      	lsls	r3, r3, #23
 800a418:	4605      	mov	r5, r0
 800a41a:	460c      	mov	r4, r1
 800a41c:	4616      	mov	r6, r2
 800a41e:	d505      	bpl.n	800a42c <__swrite+0x1e>
 800a420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a424:	2302      	movs	r3, #2
 800a426:	2200      	movs	r2, #0
 800a428:	f000 f8aa 	bl	800a580 <_lseek_r>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a432:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	4632      	mov	r2, r6
 800a43a:	463b      	mov	r3, r7
 800a43c:	4628      	mov	r0, r5
 800a43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a442:	f000 b8c1 	b.w	800a5c8 <_write_r>

0800a446 <__sseek>:
 800a446:	b510      	push	{r4, lr}
 800a448:	460c      	mov	r4, r1
 800a44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44e:	f000 f897 	bl	800a580 <_lseek_r>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	bf15      	itete	ne
 800a458:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a45a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a45e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a462:	81a3      	strheq	r3, [r4, #12]
 800a464:	bf18      	it	ne
 800a466:	81a3      	strhne	r3, [r4, #12]
 800a468:	bd10      	pop	{r4, pc}

0800a46a <__sclose>:
 800a46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a46e:	f000 b877 	b.w	800a560 <_close_r>

0800a472 <memset>:
 800a472:	4402      	add	r2, r0
 800a474:	4603      	mov	r3, r0
 800a476:	4293      	cmp	r3, r2
 800a478:	d100      	bne.n	800a47c <memset+0xa>
 800a47a:	4770      	bx	lr
 800a47c:	f803 1b01 	strb.w	r1, [r3], #1
 800a480:	e7f9      	b.n	800a476 <memset+0x4>

0800a482 <strncpy>:
 800a482:	b510      	push	{r4, lr}
 800a484:	3901      	subs	r1, #1
 800a486:	4603      	mov	r3, r0
 800a488:	b132      	cbz	r2, 800a498 <strncpy+0x16>
 800a48a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a48e:	f803 4b01 	strb.w	r4, [r3], #1
 800a492:	3a01      	subs	r2, #1
 800a494:	2c00      	cmp	r4, #0
 800a496:	d1f7      	bne.n	800a488 <strncpy+0x6>
 800a498:	441a      	add	r2, r3
 800a49a:	2100      	movs	r1, #0
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d100      	bne.n	800a4a2 <strncpy+0x20>
 800a4a0:	bd10      	pop	{r4, pc}
 800a4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4a6:	e7f9      	b.n	800a49c <strncpy+0x1a>

0800a4a8 <strtok>:
 800a4a8:	4b16      	ldr	r3, [pc, #88]	@ (800a504 <strtok+0x5c>)
 800a4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ae:	681f      	ldr	r7, [r3, #0]
 800a4b0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	460e      	mov	r6, r1
 800a4b6:	b9ec      	cbnz	r4, 800a4f4 <strtok+0x4c>
 800a4b8:	2050      	movs	r0, #80	@ 0x50
 800a4ba:	f000 f92d 	bl	800a718 <malloc>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	6478      	str	r0, [r7, #68]	@ 0x44
 800a4c2:	b920      	cbnz	r0, 800a4ce <strtok+0x26>
 800a4c4:	4b10      	ldr	r3, [pc, #64]	@ (800a508 <strtok+0x60>)
 800a4c6:	4811      	ldr	r0, [pc, #68]	@ (800a50c <strtok+0x64>)
 800a4c8:	215b      	movs	r1, #91	@ 0x5b
 800a4ca:	f000 f8bd 	bl	800a648 <__assert_func>
 800a4ce:	e9c0 4400 	strd	r4, r4, [r0]
 800a4d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a4d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a4da:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a4de:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a4e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a4e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a4ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a4ee:	6184      	str	r4, [r0, #24]
 800a4f0:	7704      	strb	r4, [r0, #28]
 800a4f2:	6244      	str	r4, [r0, #36]	@ 0x24
 800a4f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a500:	f000 b806 	b.w	800a510 <__strtok_r>
 800a504:	20000110 	.word	0x20000110
 800a508:	0800b8c1 	.word	0x0800b8c1
 800a50c:	0800b8d8 	.word	0x0800b8d8

0800a510 <__strtok_r>:
 800a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a512:	4604      	mov	r4, r0
 800a514:	b908      	cbnz	r0, 800a51a <__strtok_r+0xa>
 800a516:	6814      	ldr	r4, [r2, #0]
 800a518:	b144      	cbz	r4, 800a52c <__strtok_r+0x1c>
 800a51a:	4620      	mov	r0, r4
 800a51c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a520:	460f      	mov	r7, r1
 800a522:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a526:	b91e      	cbnz	r6, 800a530 <__strtok_r+0x20>
 800a528:	b965      	cbnz	r5, 800a544 <__strtok_r+0x34>
 800a52a:	6015      	str	r5, [r2, #0]
 800a52c:	2000      	movs	r0, #0
 800a52e:	e005      	b.n	800a53c <__strtok_r+0x2c>
 800a530:	42b5      	cmp	r5, r6
 800a532:	d1f6      	bne.n	800a522 <__strtok_r+0x12>
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1f0      	bne.n	800a51a <__strtok_r+0xa>
 800a538:	6014      	str	r4, [r2, #0]
 800a53a:	7003      	strb	r3, [r0, #0]
 800a53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53e:	461c      	mov	r4, r3
 800a540:	e00c      	b.n	800a55c <__strtok_r+0x4c>
 800a542:	b915      	cbnz	r5, 800a54a <__strtok_r+0x3a>
 800a544:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a548:	460e      	mov	r6, r1
 800a54a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a54e:	42ab      	cmp	r3, r5
 800a550:	d1f7      	bne.n	800a542 <__strtok_r+0x32>
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0f3      	beq.n	800a53e <__strtok_r+0x2e>
 800a556:	2300      	movs	r3, #0
 800a558:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a55c:	6014      	str	r4, [r2, #0]
 800a55e:	e7ed      	b.n	800a53c <__strtok_r+0x2c>

0800a560 <_close_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d06      	ldr	r5, [pc, #24]	@ (800a57c <_close_r+0x1c>)
 800a564:	2300      	movs	r3, #0
 800a566:	4604      	mov	r4, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	602b      	str	r3, [r5, #0]
 800a56c:	f7f7 fb54 	bl	8001c18 <_close>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_close_r+0x1a>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	b103      	cbz	r3, 800a57a <_close_r+0x1a>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	20002018 	.word	0x20002018

0800a580 <_lseek_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4d07      	ldr	r5, [pc, #28]	@ (800a5a0 <_lseek_r+0x20>)
 800a584:	4604      	mov	r4, r0
 800a586:	4608      	mov	r0, r1
 800a588:	4611      	mov	r1, r2
 800a58a:	2200      	movs	r2, #0
 800a58c:	602a      	str	r2, [r5, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	f7f7 fb69 	bl	8001c66 <_lseek>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_lseek_r+0x1e>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_lseek_r+0x1e>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	20002018 	.word	0x20002018

0800a5a4 <_read_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	@ (800a5c4 <_read_r+0x20>)
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	602a      	str	r2, [r5, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	f7f7 faf7 	bl	8001ba6 <_read>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_read_r+0x1e>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_read_r+0x1e>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	20002018 	.word	0x20002018

0800a5c8 <_write_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	@ (800a5e8 <_write_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f7 fb02 	bl	8001be0 <_write>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_write_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_write_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	20002018 	.word	0x20002018

0800a5ec <__errno>:
 800a5ec:	4b01      	ldr	r3, [pc, #4]	@ (800a5f4 <__errno+0x8>)
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20000110 	.word	0x20000110

0800a5f8 <__libc_init_array>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a630 <__libc_init_array+0x38>)
 800a5fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a634 <__libc_init_array+0x3c>)
 800a5fe:	1b64      	subs	r4, r4, r5
 800a600:	10a4      	asrs	r4, r4, #2
 800a602:	2600      	movs	r6, #0
 800a604:	42a6      	cmp	r6, r4
 800a606:	d109      	bne.n	800a61c <__libc_init_array+0x24>
 800a608:	4d0b      	ldr	r5, [pc, #44]	@ (800a638 <__libc_init_array+0x40>)
 800a60a:	4c0c      	ldr	r4, [pc, #48]	@ (800a63c <__libc_init_array+0x44>)
 800a60c:	f000 fff0 	bl	800b5f0 <_init>
 800a610:	1b64      	subs	r4, r4, r5
 800a612:	10a4      	asrs	r4, r4, #2
 800a614:	2600      	movs	r6, #0
 800a616:	42a6      	cmp	r6, r4
 800a618:	d105      	bne.n	800a626 <__libc_init_array+0x2e>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a620:	4798      	blx	r3
 800a622:	3601      	adds	r6, #1
 800a624:	e7ee      	b.n	800a604 <__libc_init_array+0xc>
 800a626:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62a:	4798      	blx	r3
 800a62c:	3601      	adds	r6, #1
 800a62e:	e7f2      	b.n	800a616 <__libc_init_array+0x1e>
 800a630:	0800b9ac 	.word	0x0800b9ac
 800a634:	0800b9ac 	.word	0x0800b9ac
 800a638:	0800b9ac 	.word	0x0800b9ac
 800a63c:	0800b9b0 	.word	0x0800b9b0

0800a640 <__retarget_lock_init_recursive>:
 800a640:	4770      	bx	lr

0800a642 <__retarget_lock_acquire_recursive>:
 800a642:	4770      	bx	lr

0800a644 <__retarget_lock_release_recursive>:
 800a644:	4770      	bx	lr
	...

0800a648 <__assert_func>:
 800a648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a64a:	4614      	mov	r4, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	4b09      	ldr	r3, [pc, #36]	@ (800a674 <__assert_func+0x2c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4605      	mov	r5, r0
 800a654:	68d8      	ldr	r0, [r3, #12]
 800a656:	b954      	cbnz	r4, 800a66e <__assert_func+0x26>
 800a658:	4b07      	ldr	r3, [pc, #28]	@ (800a678 <__assert_func+0x30>)
 800a65a:	461c      	mov	r4, r3
 800a65c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a660:	9100      	str	r1, [sp, #0]
 800a662:	462b      	mov	r3, r5
 800a664:	4905      	ldr	r1, [pc, #20]	@ (800a67c <__assert_func+0x34>)
 800a666:	f000 fc9f 	bl	800afa8 <fiprintf>
 800a66a:	f000 fce7 	bl	800b03c <abort>
 800a66e:	4b04      	ldr	r3, [pc, #16]	@ (800a680 <__assert_func+0x38>)
 800a670:	e7f4      	b.n	800a65c <__assert_func+0x14>
 800a672:	bf00      	nop
 800a674:	20000110 	.word	0x20000110
 800a678:	0800b96d 	.word	0x0800b96d
 800a67c:	0800b93f 	.word	0x0800b93f
 800a680:	0800b932 	.word	0x0800b932

0800a684 <_free_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4605      	mov	r5, r0
 800a688:	2900      	cmp	r1, #0
 800a68a:	d041      	beq.n	800a710 <_free_r+0x8c>
 800a68c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a690:	1f0c      	subs	r4, r1, #4
 800a692:	2b00      	cmp	r3, #0
 800a694:	bfb8      	it	lt
 800a696:	18e4      	addlt	r4, r4, r3
 800a698:	f000 f8e8 	bl	800a86c <__malloc_lock>
 800a69c:	4a1d      	ldr	r2, [pc, #116]	@ (800a714 <_free_r+0x90>)
 800a69e:	6813      	ldr	r3, [r2, #0]
 800a6a0:	b933      	cbnz	r3, 800a6b0 <_free_r+0x2c>
 800a6a2:	6063      	str	r3, [r4, #4]
 800a6a4:	6014      	str	r4, [r2, #0]
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ac:	f000 b8e4 	b.w	800a878 <__malloc_unlock>
 800a6b0:	42a3      	cmp	r3, r4
 800a6b2:	d908      	bls.n	800a6c6 <_free_r+0x42>
 800a6b4:	6820      	ldr	r0, [r4, #0]
 800a6b6:	1821      	adds	r1, r4, r0
 800a6b8:	428b      	cmp	r3, r1
 800a6ba:	bf01      	itttt	eq
 800a6bc:	6819      	ldreq	r1, [r3, #0]
 800a6be:	685b      	ldreq	r3, [r3, #4]
 800a6c0:	1809      	addeq	r1, r1, r0
 800a6c2:	6021      	streq	r1, [r4, #0]
 800a6c4:	e7ed      	b.n	800a6a2 <_free_r+0x1e>
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	b10b      	cbz	r3, 800a6d0 <_free_r+0x4c>
 800a6cc:	42a3      	cmp	r3, r4
 800a6ce:	d9fa      	bls.n	800a6c6 <_free_r+0x42>
 800a6d0:	6811      	ldr	r1, [r2, #0]
 800a6d2:	1850      	adds	r0, r2, r1
 800a6d4:	42a0      	cmp	r0, r4
 800a6d6:	d10b      	bne.n	800a6f0 <_free_r+0x6c>
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	4401      	add	r1, r0
 800a6dc:	1850      	adds	r0, r2, r1
 800a6de:	4283      	cmp	r3, r0
 800a6e0:	6011      	str	r1, [r2, #0]
 800a6e2:	d1e0      	bne.n	800a6a6 <_free_r+0x22>
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	6053      	str	r3, [r2, #4]
 800a6ea:	4408      	add	r0, r1
 800a6ec:	6010      	str	r0, [r2, #0]
 800a6ee:	e7da      	b.n	800a6a6 <_free_r+0x22>
 800a6f0:	d902      	bls.n	800a6f8 <_free_r+0x74>
 800a6f2:	230c      	movs	r3, #12
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	e7d6      	b.n	800a6a6 <_free_r+0x22>
 800a6f8:	6820      	ldr	r0, [r4, #0]
 800a6fa:	1821      	adds	r1, r4, r0
 800a6fc:	428b      	cmp	r3, r1
 800a6fe:	bf04      	itt	eq
 800a700:	6819      	ldreq	r1, [r3, #0]
 800a702:	685b      	ldreq	r3, [r3, #4]
 800a704:	6063      	str	r3, [r4, #4]
 800a706:	bf04      	itt	eq
 800a708:	1809      	addeq	r1, r1, r0
 800a70a:	6021      	streq	r1, [r4, #0]
 800a70c:	6054      	str	r4, [r2, #4]
 800a70e:	e7ca      	b.n	800a6a6 <_free_r+0x22>
 800a710:	bd38      	pop	{r3, r4, r5, pc}
 800a712:	bf00      	nop
 800a714:	20002024 	.word	0x20002024

0800a718 <malloc>:
 800a718:	4b02      	ldr	r3, [pc, #8]	@ (800a724 <malloc+0xc>)
 800a71a:	4601      	mov	r1, r0
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	f000 b825 	b.w	800a76c <_malloc_r>
 800a722:	bf00      	nop
 800a724:	20000110 	.word	0x20000110

0800a728 <sbrk_aligned>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	4e0f      	ldr	r6, [pc, #60]	@ (800a768 <sbrk_aligned+0x40>)
 800a72c:	460c      	mov	r4, r1
 800a72e:	6831      	ldr	r1, [r6, #0]
 800a730:	4605      	mov	r5, r0
 800a732:	b911      	cbnz	r1, 800a73a <sbrk_aligned+0x12>
 800a734:	f000 fc64 	bl	800b000 <_sbrk_r>
 800a738:	6030      	str	r0, [r6, #0]
 800a73a:	4621      	mov	r1, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 fc5f 	bl	800b000 <_sbrk_r>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d103      	bne.n	800a74e <sbrk_aligned+0x26>
 800a746:	f04f 34ff 	mov.w	r4, #4294967295
 800a74a:	4620      	mov	r0, r4
 800a74c:	bd70      	pop	{r4, r5, r6, pc}
 800a74e:	1cc4      	adds	r4, r0, #3
 800a750:	f024 0403 	bic.w	r4, r4, #3
 800a754:	42a0      	cmp	r0, r4
 800a756:	d0f8      	beq.n	800a74a <sbrk_aligned+0x22>
 800a758:	1a21      	subs	r1, r4, r0
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 fc50 	bl	800b000 <_sbrk_r>
 800a760:	3001      	adds	r0, #1
 800a762:	d1f2      	bne.n	800a74a <sbrk_aligned+0x22>
 800a764:	e7ef      	b.n	800a746 <sbrk_aligned+0x1e>
 800a766:	bf00      	nop
 800a768:	20002020 	.word	0x20002020

0800a76c <_malloc_r>:
 800a76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a770:	1ccd      	adds	r5, r1, #3
 800a772:	f025 0503 	bic.w	r5, r5, #3
 800a776:	3508      	adds	r5, #8
 800a778:	2d0c      	cmp	r5, #12
 800a77a:	bf38      	it	cc
 800a77c:	250c      	movcc	r5, #12
 800a77e:	2d00      	cmp	r5, #0
 800a780:	4606      	mov	r6, r0
 800a782:	db01      	blt.n	800a788 <_malloc_r+0x1c>
 800a784:	42a9      	cmp	r1, r5
 800a786:	d904      	bls.n	800a792 <_malloc_r+0x26>
 800a788:	230c      	movs	r3, #12
 800a78a:	6033      	str	r3, [r6, #0]
 800a78c:	2000      	movs	r0, #0
 800a78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a868 <_malloc_r+0xfc>
 800a796:	f000 f869 	bl	800a86c <__malloc_lock>
 800a79a:	f8d8 3000 	ldr.w	r3, [r8]
 800a79e:	461c      	mov	r4, r3
 800a7a0:	bb44      	cbnz	r4, 800a7f4 <_malloc_r+0x88>
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f7ff ffbf 	bl	800a728 <sbrk_aligned>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	d158      	bne.n	800a862 <_malloc_r+0xf6>
 800a7b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a7b4:	4627      	mov	r7, r4
 800a7b6:	2f00      	cmp	r7, #0
 800a7b8:	d143      	bne.n	800a842 <_malloc_r+0xd6>
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	d04b      	beq.n	800a856 <_malloc_r+0xea>
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	eb04 0903 	add.w	r9, r4, r3
 800a7c8:	f000 fc1a 	bl	800b000 <_sbrk_r>
 800a7cc:	4581      	cmp	r9, r0
 800a7ce:	d142      	bne.n	800a856 <_malloc_r+0xea>
 800a7d0:	6821      	ldr	r1, [r4, #0]
 800a7d2:	1a6d      	subs	r5, r5, r1
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f7ff ffa6 	bl	800a728 <sbrk_aligned>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d03a      	beq.n	800a856 <_malloc_r+0xea>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	442b      	add	r3, r5
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	bb62      	cbnz	r2, 800a848 <_malloc_r+0xdc>
 800a7ee:	f8c8 7000 	str.w	r7, [r8]
 800a7f2:	e00f      	b.n	800a814 <_malloc_r+0xa8>
 800a7f4:	6822      	ldr	r2, [r4, #0]
 800a7f6:	1b52      	subs	r2, r2, r5
 800a7f8:	d420      	bmi.n	800a83c <_malloc_r+0xd0>
 800a7fa:	2a0b      	cmp	r2, #11
 800a7fc:	d917      	bls.n	800a82e <_malloc_r+0xc2>
 800a7fe:	1961      	adds	r1, r4, r5
 800a800:	42a3      	cmp	r3, r4
 800a802:	6025      	str	r5, [r4, #0]
 800a804:	bf18      	it	ne
 800a806:	6059      	strne	r1, [r3, #4]
 800a808:	6863      	ldr	r3, [r4, #4]
 800a80a:	bf08      	it	eq
 800a80c:	f8c8 1000 	streq.w	r1, [r8]
 800a810:	5162      	str	r2, [r4, r5]
 800a812:	604b      	str	r3, [r1, #4]
 800a814:	4630      	mov	r0, r6
 800a816:	f000 f82f 	bl	800a878 <__malloc_unlock>
 800a81a:	f104 000b 	add.w	r0, r4, #11
 800a81e:	1d23      	adds	r3, r4, #4
 800a820:	f020 0007 	bic.w	r0, r0, #7
 800a824:	1ac2      	subs	r2, r0, r3
 800a826:	bf1c      	itt	ne
 800a828:	1a1b      	subne	r3, r3, r0
 800a82a:	50a3      	strne	r3, [r4, r2]
 800a82c:	e7af      	b.n	800a78e <_malloc_r+0x22>
 800a82e:	6862      	ldr	r2, [r4, #4]
 800a830:	42a3      	cmp	r3, r4
 800a832:	bf0c      	ite	eq
 800a834:	f8c8 2000 	streq.w	r2, [r8]
 800a838:	605a      	strne	r2, [r3, #4]
 800a83a:	e7eb      	b.n	800a814 <_malloc_r+0xa8>
 800a83c:	4623      	mov	r3, r4
 800a83e:	6864      	ldr	r4, [r4, #4]
 800a840:	e7ae      	b.n	800a7a0 <_malloc_r+0x34>
 800a842:	463c      	mov	r4, r7
 800a844:	687f      	ldr	r7, [r7, #4]
 800a846:	e7b6      	b.n	800a7b6 <_malloc_r+0x4a>
 800a848:	461a      	mov	r2, r3
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	42a3      	cmp	r3, r4
 800a84e:	d1fb      	bne.n	800a848 <_malloc_r+0xdc>
 800a850:	2300      	movs	r3, #0
 800a852:	6053      	str	r3, [r2, #4]
 800a854:	e7de      	b.n	800a814 <_malloc_r+0xa8>
 800a856:	230c      	movs	r3, #12
 800a858:	6033      	str	r3, [r6, #0]
 800a85a:	4630      	mov	r0, r6
 800a85c:	f000 f80c 	bl	800a878 <__malloc_unlock>
 800a860:	e794      	b.n	800a78c <_malloc_r+0x20>
 800a862:	6005      	str	r5, [r0, #0]
 800a864:	e7d6      	b.n	800a814 <_malloc_r+0xa8>
 800a866:	bf00      	nop
 800a868:	20002024 	.word	0x20002024

0800a86c <__malloc_lock>:
 800a86c:	4801      	ldr	r0, [pc, #4]	@ (800a874 <__malloc_lock+0x8>)
 800a86e:	f7ff bee8 	b.w	800a642 <__retarget_lock_acquire_recursive>
 800a872:	bf00      	nop
 800a874:	2000201c 	.word	0x2000201c

0800a878 <__malloc_unlock>:
 800a878:	4801      	ldr	r0, [pc, #4]	@ (800a880 <__malloc_unlock+0x8>)
 800a87a:	f7ff bee3 	b.w	800a644 <__retarget_lock_release_recursive>
 800a87e:	bf00      	nop
 800a880:	2000201c 	.word	0x2000201c

0800a884 <__ssputs_r>:
 800a884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	688e      	ldr	r6, [r1, #8]
 800a88a:	461f      	mov	r7, r3
 800a88c:	42be      	cmp	r6, r7
 800a88e:	680b      	ldr	r3, [r1, #0]
 800a890:	4682      	mov	sl, r0
 800a892:	460c      	mov	r4, r1
 800a894:	4690      	mov	r8, r2
 800a896:	d82d      	bhi.n	800a8f4 <__ssputs_r+0x70>
 800a898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a89c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8a0:	d026      	beq.n	800a8f0 <__ssputs_r+0x6c>
 800a8a2:	6965      	ldr	r5, [r4, #20]
 800a8a4:	6909      	ldr	r1, [r1, #16]
 800a8a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8aa:	eba3 0901 	sub.w	r9, r3, r1
 800a8ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8b2:	1c7b      	adds	r3, r7, #1
 800a8b4:	444b      	add	r3, r9
 800a8b6:	106d      	asrs	r5, r5, #1
 800a8b8:	429d      	cmp	r5, r3
 800a8ba:	bf38      	it	cc
 800a8bc:	461d      	movcc	r5, r3
 800a8be:	0553      	lsls	r3, r2, #21
 800a8c0:	d527      	bpl.n	800a912 <__ssputs_r+0x8e>
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7ff ff52 	bl	800a76c <_malloc_r>
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	b360      	cbz	r0, 800a926 <__ssputs_r+0xa2>
 800a8cc:	6921      	ldr	r1, [r4, #16]
 800a8ce:	464a      	mov	r2, r9
 800a8d0:	f000 fba6 	bl	800b020 <memcpy>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	6126      	str	r6, [r4, #16]
 800a8e2:	6165      	str	r5, [r4, #20]
 800a8e4:	444e      	add	r6, r9
 800a8e6:	eba5 0509 	sub.w	r5, r5, r9
 800a8ea:	6026      	str	r6, [r4, #0]
 800a8ec:	60a5      	str	r5, [r4, #8]
 800a8ee:	463e      	mov	r6, r7
 800a8f0:	42be      	cmp	r6, r7
 800a8f2:	d900      	bls.n	800a8f6 <__ssputs_r+0x72>
 800a8f4:	463e      	mov	r6, r7
 800a8f6:	6820      	ldr	r0, [r4, #0]
 800a8f8:	4632      	mov	r2, r6
 800a8fa:	4641      	mov	r1, r8
 800a8fc:	f000 fb66 	bl	800afcc <memmove>
 800a900:	68a3      	ldr	r3, [r4, #8]
 800a902:	1b9b      	subs	r3, r3, r6
 800a904:	60a3      	str	r3, [r4, #8]
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	4433      	add	r3, r6
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	2000      	movs	r0, #0
 800a90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a912:	462a      	mov	r2, r5
 800a914:	f000 fb99 	bl	800b04a <_realloc_r>
 800a918:	4606      	mov	r6, r0
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d1e0      	bne.n	800a8e0 <__ssputs_r+0x5c>
 800a91e:	6921      	ldr	r1, [r4, #16]
 800a920:	4650      	mov	r0, sl
 800a922:	f7ff feaf 	bl	800a684 <_free_r>
 800a926:	230c      	movs	r3, #12
 800a928:	f8ca 3000 	str.w	r3, [sl]
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a932:	81a3      	strh	r3, [r4, #12]
 800a934:	f04f 30ff 	mov.w	r0, #4294967295
 800a938:	e7e9      	b.n	800a90e <__ssputs_r+0x8a>
	...

0800a93c <_svfiprintf_r>:
 800a93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a940:	4698      	mov	r8, r3
 800a942:	898b      	ldrh	r3, [r1, #12]
 800a944:	061b      	lsls	r3, r3, #24
 800a946:	b09d      	sub	sp, #116	@ 0x74
 800a948:	4607      	mov	r7, r0
 800a94a:	460d      	mov	r5, r1
 800a94c:	4614      	mov	r4, r2
 800a94e:	d510      	bpl.n	800a972 <_svfiprintf_r+0x36>
 800a950:	690b      	ldr	r3, [r1, #16]
 800a952:	b973      	cbnz	r3, 800a972 <_svfiprintf_r+0x36>
 800a954:	2140      	movs	r1, #64	@ 0x40
 800a956:	f7ff ff09 	bl	800a76c <_malloc_r>
 800a95a:	6028      	str	r0, [r5, #0]
 800a95c:	6128      	str	r0, [r5, #16]
 800a95e:	b930      	cbnz	r0, 800a96e <_svfiprintf_r+0x32>
 800a960:	230c      	movs	r3, #12
 800a962:	603b      	str	r3, [r7, #0]
 800a964:	f04f 30ff 	mov.w	r0, #4294967295
 800a968:	b01d      	add	sp, #116	@ 0x74
 800a96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96e:	2340      	movs	r3, #64	@ 0x40
 800a970:	616b      	str	r3, [r5, #20]
 800a972:	2300      	movs	r3, #0
 800a974:	9309      	str	r3, [sp, #36]	@ 0x24
 800a976:	2320      	movs	r3, #32
 800a978:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a980:	2330      	movs	r3, #48	@ 0x30
 800a982:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab20 <_svfiprintf_r+0x1e4>
 800a986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a98a:	f04f 0901 	mov.w	r9, #1
 800a98e:	4623      	mov	r3, r4
 800a990:	469a      	mov	sl, r3
 800a992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a996:	b10a      	cbz	r2, 800a99c <_svfiprintf_r+0x60>
 800a998:	2a25      	cmp	r2, #37	@ 0x25
 800a99a:	d1f9      	bne.n	800a990 <_svfiprintf_r+0x54>
 800a99c:	ebba 0b04 	subs.w	fp, sl, r4
 800a9a0:	d00b      	beq.n	800a9ba <_svfiprintf_r+0x7e>
 800a9a2:	465b      	mov	r3, fp
 800a9a4:	4622      	mov	r2, r4
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f7ff ff6b 	bl	800a884 <__ssputs_r>
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	f000 80a7 	beq.w	800ab02 <_svfiprintf_r+0x1c6>
 800a9b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9b6:	445a      	add	r2, fp
 800a9b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 809f 	beq.w	800ab02 <_svfiprintf_r+0x1c6>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ce:	f10a 0a01 	add.w	sl, sl, #1
 800a9d2:	9304      	str	r3, [sp, #16]
 800a9d4:	9307      	str	r3, [sp, #28]
 800a9d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9da:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9dc:	4654      	mov	r4, sl
 800a9de:	2205      	movs	r2, #5
 800a9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e4:	484e      	ldr	r0, [pc, #312]	@ (800ab20 <_svfiprintf_r+0x1e4>)
 800a9e6:	f7f5 fc13 	bl	8000210 <memchr>
 800a9ea:	9a04      	ldr	r2, [sp, #16]
 800a9ec:	b9d8      	cbnz	r0, 800aa26 <_svfiprintf_r+0xea>
 800a9ee:	06d0      	lsls	r0, r2, #27
 800a9f0:	bf44      	itt	mi
 800a9f2:	2320      	movmi	r3, #32
 800a9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9f8:	0711      	lsls	r1, r2, #28
 800a9fa:	bf44      	itt	mi
 800a9fc:	232b      	movmi	r3, #43	@ 0x2b
 800a9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa02:	f89a 3000 	ldrb.w	r3, [sl]
 800aa06:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa08:	d015      	beq.n	800aa36 <_svfiprintf_r+0xfa>
 800aa0a:	9a07      	ldr	r2, [sp, #28]
 800aa0c:	4654      	mov	r4, sl
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f04f 0c0a 	mov.w	ip, #10
 800aa14:	4621      	mov	r1, r4
 800aa16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa1a:	3b30      	subs	r3, #48	@ 0x30
 800aa1c:	2b09      	cmp	r3, #9
 800aa1e:	d94b      	bls.n	800aab8 <_svfiprintf_r+0x17c>
 800aa20:	b1b0      	cbz	r0, 800aa50 <_svfiprintf_r+0x114>
 800aa22:	9207      	str	r2, [sp, #28]
 800aa24:	e014      	b.n	800aa50 <_svfiprintf_r+0x114>
 800aa26:	eba0 0308 	sub.w	r3, r0, r8
 800aa2a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	46a2      	mov	sl, r4
 800aa34:	e7d2      	b.n	800a9dc <_svfiprintf_r+0xa0>
 800aa36:	9b03      	ldr	r3, [sp, #12]
 800aa38:	1d19      	adds	r1, r3, #4
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	9103      	str	r1, [sp, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bfbb      	ittet	lt
 800aa42:	425b      	neglt	r3, r3
 800aa44:	f042 0202 	orrlt.w	r2, r2, #2
 800aa48:	9307      	strge	r3, [sp, #28]
 800aa4a:	9307      	strlt	r3, [sp, #28]
 800aa4c:	bfb8      	it	lt
 800aa4e:	9204      	strlt	r2, [sp, #16]
 800aa50:	7823      	ldrb	r3, [r4, #0]
 800aa52:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa54:	d10a      	bne.n	800aa6c <_svfiprintf_r+0x130>
 800aa56:	7863      	ldrb	r3, [r4, #1]
 800aa58:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa5a:	d132      	bne.n	800aac2 <_svfiprintf_r+0x186>
 800aa5c:	9b03      	ldr	r3, [sp, #12]
 800aa5e:	1d1a      	adds	r2, r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	9203      	str	r2, [sp, #12]
 800aa64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa68:	3402      	adds	r4, #2
 800aa6a:	9305      	str	r3, [sp, #20]
 800aa6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab30 <_svfiprintf_r+0x1f4>
 800aa70:	7821      	ldrb	r1, [r4, #0]
 800aa72:	2203      	movs	r2, #3
 800aa74:	4650      	mov	r0, sl
 800aa76:	f7f5 fbcb 	bl	8000210 <memchr>
 800aa7a:	b138      	cbz	r0, 800aa8c <_svfiprintf_r+0x150>
 800aa7c:	9b04      	ldr	r3, [sp, #16]
 800aa7e:	eba0 000a 	sub.w	r0, r0, sl
 800aa82:	2240      	movs	r2, #64	@ 0x40
 800aa84:	4082      	lsls	r2, r0
 800aa86:	4313      	orrs	r3, r2
 800aa88:	3401      	adds	r4, #1
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa90:	4824      	ldr	r0, [pc, #144]	@ (800ab24 <_svfiprintf_r+0x1e8>)
 800aa92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa96:	2206      	movs	r2, #6
 800aa98:	f7f5 fbba 	bl	8000210 <memchr>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d036      	beq.n	800ab0e <_svfiprintf_r+0x1d2>
 800aaa0:	4b21      	ldr	r3, [pc, #132]	@ (800ab28 <_svfiprintf_r+0x1ec>)
 800aaa2:	bb1b      	cbnz	r3, 800aaec <_svfiprintf_r+0x1b0>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	3307      	adds	r3, #7
 800aaa8:	f023 0307 	bic.w	r3, r3, #7
 800aaac:	3308      	adds	r3, #8
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab2:	4433      	add	r3, r6
 800aab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab6:	e76a      	b.n	800a98e <_svfiprintf_r+0x52>
 800aab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aabc:	460c      	mov	r4, r1
 800aabe:	2001      	movs	r0, #1
 800aac0:	e7a8      	b.n	800aa14 <_svfiprintf_r+0xd8>
 800aac2:	2300      	movs	r3, #0
 800aac4:	3401      	adds	r4, #1
 800aac6:	9305      	str	r3, [sp, #20]
 800aac8:	4619      	mov	r1, r3
 800aaca:	f04f 0c0a 	mov.w	ip, #10
 800aace:	4620      	mov	r0, r4
 800aad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad4:	3a30      	subs	r2, #48	@ 0x30
 800aad6:	2a09      	cmp	r2, #9
 800aad8:	d903      	bls.n	800aae2 <_svfiprintf_r+0x1a6>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0c6      	beq.n	800aa6c <_svfiprintf_r+0x130>
 800aade:	9105      	str	r1, [sp, #20]
 800aae0:	e7c4      	b.n	800aa6c <_svfiprintf_r+0x130>
 800aae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae6:	4604      	mov	r4, r0
 800aae8:	2301      	movs	r3, #1
 800aaea:	e7f0      	b.n	800aace <_svfiprintf_r+0x192>
 800aaec:	ab03      	add	r3, sp, #12
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ab2c <_svfiprintf_r+0x1f0>)
 800aaf4:	a904      	add	r1, sp, #16
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f3af 8000 	nop.w
 800aafc:	1c42      	adds	r2, r0, #1
 800aafe:	4606      	mov	r6, r0
 800ab00:	d1d6      	bne.n	800aab0 <_svfiprintf_r+0x174>
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	065b      	lsls	r3, r3, #25
 800ab06:	f53f af2d 	bmi.w	800a964 <_svfiprintf_r+0x28>
 800ab0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab0c:	e72c      	b.n	800a968 <_svfiprintf_r+0x2c>
 800ab0e:	ab03      	add	r3, sp, #12
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	462a      	mov	r2, r5
 800ab14:	4b05      	ldr	r3, [pc, #20]	@ (800ab2c <_svfiprintf_r+0x1f0>)
 800ab16:	a904      	add	r1, sp, #16
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f000 f879 	bl	800ac10 <_printf_i>
 800ab1e:	e7ed      	b.n	800aafc <_svfiprintf_r+0x1c0>
 800ab20:	0800b96e 	.word	0x0800b96e
 800ab24:	0800b978 	.word	0x0800b978
 800ab28:	00000000 	.word	0x00000000
 800ab2c:	0800a885 	.word	0x0800a885
 800ab30:	0800b974 	.word	0x0800b974

0800ab34 <_printf_common>:
 800ab34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab38:	4616      	mov	r6, r2
 800ab3a:	4698      	mov	r8, r3
 800ab3c:	688a      	ldr	r2, [r1, #8]
 800ab3e:	690b      	ldr	r3, [r1, #16]
 800ab40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab44:	4293      	cmp	r3, r2
 800ab46:	bfb8      	it	lt
 800ab48:	4613      	movlt	r3, r2
 800ab4a:	6033      	str	r3, [r6, #0]
 800ab4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab50:	4607      	mov	r7, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	b10a      	cbz	r2, 800ab5a <_printf_common+0x26>
 800ab56:	3301      	adds	r3, #1
 800ab58:	6033      	str	r3, [r6, #0]
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	0699      	lsls	r1, r3, #26
 800ab5e:	bf42      	ittt	mi
 800ab60:	6833      	ldrmi	r3, [r6, #0]
 800ab62:	3302      	addmi	r3, #2
 800ab64:	6033      	strmi	r3, [r6, #0]
 800ab66:	6825      	ldr	r5, [r4, #0]
 800ab68:	f015 0506 	ands.w	r5, r5, #6
 800ab6c:	d106      	bne.n	800ab7c <_printf_common+0x48>
 800ab6e:	f104 0a19 	add.w	sl, r4, #25
 800ab72:	68e3      	ldr	r3, [r4, #12]
 800ab74:	6832      	ldr	r2, [r6, #0]
 800ab76:	1a9b      	subs	r3, r3, r2
 800ab78:	42ab      	cmp	r3, r5
 800ab7a:	dc26      	bgt.n	800abca <_printf_common+0x96>
 800ab7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab80:	6822      	ldr	r2, [r4, #0]
 800ab82:	3b00      	subs	r3, #0
 800ab84:	bf18      	it	ne
 800ab86:	2301      	movne	r3, #1
 800ab88:	0692      	lsls	r2, r2, #26
 800ab8a:	d42b      	bmi.n	800abe4 <_printf_common+0xb0>
 800ab8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab90:	4641      	mov	r1, r8
 800ab92:	4638      	mov	r0, r7
 800ab94:	47c8      	blx	r9
 800ab96:	3001      	adds	r0, #1
 800ab98:	d01e      	beq.n	800abd8 <_printf_common+0xa4>
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	6922      	ldr	r2, [r4, #16]
 800ab9e:	f003 0306 	and.w	r3, r3, #6
 800aba2:	2b04      	cmp	r3, #4
 800aba4:	bf02      	ittt	eq
 800aba6:	68e5      	ldreq	r5, [r4, #12]
 800aba8:	6833      	ldreq	r3, [r6, #0]
 800abaa:	1aed      	subeq	r5, r5, r3
 800abac:	68a3      	ldr	r3, [r4, #8]
 800abae:	bf0c      	ite	eq
 800abb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abb4:	2500      	movne	r5, #0
 800abb6:	4293      	cmp	r3, r2
 800abb8:	bfc4      	itt	gt
 800abba:	1a9b      	subgt	r3, r3, r2
 800abbc:	18ed      	addgt	r5, r5, r3
 800abbe:	2600      	movs	r6, #0
 800abc0:	341a      	adds	r4, #26
 800abc2:	42b5      	cmp	r5, r6
 800abc4:	d11a      	bne.n	800abfc <_printf_common+0xc8>
 800abc6:	2000      	movs	r0, #0
 800abc8:	e008      	b.n	800abdc <_printf_common+0xa8>
 800abca:	2301      	movs	r3, #1
 800abcc:	4652      	mov	r2, sl
 800abce:	4641      	mov	r1, r8
 800abd0:	4638      	mov	r0, r7
 800abd2:	47c8      	blx	r9
 800abd4:	3001      	adds	r0, #1
 800abd6:	d103      	bne.n	800abe0 <_printf_common+0xac>
 800abd8:	f04f 30ff 	mov.w	r0, #4294967295
 800abdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe0:	3501      	adds	r5, #1
 800abe2:	e7c6      	b.n	800ab72 <_printf_common+0x3e>
 800abe4:	18e1      	adds	r1, r4, r3
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	2030      	movs	r0, #48	@ 0x30
 800abea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abee:	4422      	add	r2, r4
 800abf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abf8:	3302      	adds	r3, #2
 800abfa:	e7c7      	b.n	800ab8c <_printf_common+0x58>
 800abfc:	2301      	movs	r3, #1
 800abfe:	4622      	mov	r2, r4
 800ac00:	4641      	mov	r1, r8
 800ac02:	4638      	mov	r0, r7
 800ac04:	47c8      	blx	r9
 800ac06:	3001      	adds	r0, #1
 800ac08:	d0e6      	beq.n	800abd8 <_printf_common+0xa4>
 800ac0a:	3601      	adds	r6, #1
 800ac0c:	e7d9      	b.n	800abc2 <_printf_common+0x8e>
	...

0800ac10 <_printf_i>:
 800ac10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac14:	7e0f      	ldrb	r7, [r1, #24]
 800ac16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac18:	2f78      	cmp	r7, #120	@ 0x78
 800ac1a:	4691      	mov	r9, r2
 800ac1c:	4680      	mov	r8, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	469a      	mov	sl, r3
 800ac22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac26:	d807      	bhi.n	800ac38 <_printf_i+0x28>
 800ac28:	2f62      	cmp	r7, #98	@ 0x62
 800ac2a:	d80a      	bhi.n	800ac42 <_printf_i+0x32>
 800ac2c:	2f00      	cmp	r7, #0
 800ac2e:	f000 80d2 	beq.w	800add6 <_printf_i+0x1c6>
 800ac32:	2f58      	cmp	r7, #88	@ 0x58
 800ac34:	f000 80b9 	beq.w	800adaa <_printf_i+0x19a>
 800ac38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac40:	e03a      	b.n	800acb8 <_printf_i+0xa8>
 800ac42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac46:	2b15      	cmp	r3, #21
 800ac48:	d8f6      	bhi.n	800ac38 <_printf_i+0x28>
 800ac4a:	a101      	add	r1, pc, #4	@ (adr r1, 800ac50 <_printf_i+0x40>)
 800ac4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac50:	0800aca9 	.word	0x0800aca9
 800ac54:	0800acbd 	.word	0x0800acbd
 800ac58:	0800ac39 	.word	0x0800ac39
 800ac5c:	0800ac39 	.word	0x0800ac39
 800ac60:	0800ac39 	.word	0x0800ac39
 800ac64:	0800ac39 	.word	0x0800ac39
 800ac68:	0800acbd 	.word	0x0800acbd
 800ac6c:	0800ac39 	.word	0x0800ac39
 800ac70:	0800ac39 	.word	0x0800ac39
 800ac74:	0800ac39 	.word	0x0800ac39
 800ac78:	0800ac39 	.word	0x0800ac39
 800ac7c:	0800adbd 	.word	0x0800adbd
 800ac80:	0800ace7 	.word	0x0800ace7
 800ac84:	0800ad77 	.word	0x0800ad77
 800ac88:	0800ac39 	.word	0x0800ac39
 800ac8c:	0800ac39 	.word	0x0800ac39
 800ac90:	0800addf 	.word	0x0800addf
 800ac94:	0800ac39 	.word	0x0800ac39
 800ac98:	0800ace7 	.word	0x0800ace7
 800ac9c:	0800ac39 	.word	0x0800ac39
 800aca0:	0800ac39 	.word	0x0800ac39
 800aca4:	0800ad7f 	.word	0x0800ad7f
 800aca8:	6833      	ldr	r3, [r6, #0]
 800acaa:	1d1a      	adds	r2, r3, #4
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6032      	str	r2, [r6, #0]
 800acb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acb8:	2301      	movs	r3, #1
 800acba:	e09d      	b.n	800adf8 <_printf_i+0x1e8>
 800acbc:	6833      	ldr	r3, [r6, #0]
 800acbe:	6820      	ldr	r0, [r4, #0]
 800acc0:	1d19      	adds	r1, r3, #4
 800acc2:	6031      	str	r1, [r6, #0]
 800acc4:	0606      	lsls	r6, r0, #24
 800acc6:	d501      	bpl.n	800accc <_printf_i+0xbc>
 800acc8:	681d      	ldr	r5, [r3, #0]
 800acca:	e003      	b.n	800acd4 <_printf_i+0xc4>
 800accc:	0645      	lsls	r5, r0, #25
 800acce:	d5fb      	bpl.n	800acc8 <_printf_i+0xb8>
 800acd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	da03      	bge.n	800ace0 <_printf_i+0xd0>
 800acd8:	232d      	movs	r3, #45	@ 0x2d
 800acda:	426d      	negs	r5, r5
 800acdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ace0:	4859      	ldr	r0, [pc, #356]	@ (800ae48 <_printf_i+0x238>)
 800ace2:	230a      	movs	r3, #10
 800ace4:	e011      	b.n	800ad0a <_printf_i+0xfa>
 800ace6:	6821      	ldr	r1, [r4, #0]
 800ace8:	6833      	ldr	r3, [r6, #0]
 800acea:	0608      	lsls	r0, r1, #24
 800acec:	f853 5b04 	ldr.w	r5, [r3], #4
 800acf0:	d402      	bmi.n	800acf8 <_printf_i+0xe8>
 800acf2:	0649      	lsls	r1, r1, #25
 800acf4:	bf48      	it	mi
 800acf6:	b2ad      	uxthmi	r5, r5
 800acf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800acfa:	4853      	ldr	r0, [pc, #332]	@ (800ae48 <_printf_i+0x238>)
 800acfc:	6033      	str	r3, [r6, #0]
 800acfe:	bf14      	ite	ne
 800ad00:	230a      	movne	r3, #10
 800ad02:	2308      	moveq	r3, #8
 800ad04:	2100      	movs	r1, #0
 800ad06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad0a:	6866      	ldr	r6, [r4, #4]
 800ad0c:	60a6      	str	r6, [r4, #8]
 800ad0e:	2e00      	cmp	r6, #0
 800ad10:	bfa2      	ittt	ge
 800ad12:	6821      	ldrge	r1, [r4, #0]
 800ad14:	f021 0104 	bicge.w	r1, r1, #4
 800ad18:	6021      	strge	r1, [r4, #0]
 800ad1a:	b90d      	cbnz	r5, 800ad20 <_printf_i+0x110>
 800ad1c:	2e00      	cmp	r6, #0
 800ad1e:	d04b      	beq.n	800adb8 <_printf_i+0x1a8>
 800ad20:	4616      	mov	r6, r2
 800ad22:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad26:	fb03 5711 	mls	r7, r3, r1, r5
 800ad2a:	5dc7      	ldrb	r7, [r0, r7]
 800ad2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad30:	462f      	mov	r7, r5
 800ad32:	42bb      	cmp	r3, r7
 800ad34:	460d      	mov	r5, r1
 800ad36:	d9f4      	bls.n	800ad22 <_printf_i+0x112>
 800ad38:	2b08      	cmp	r3, #8
 800ad3a:	d10b      	bne.n	800ad54 <_printf_i+0x144>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	07df      	lsls	r7, r3, #31
 800ad40:	d508      	bpl.n	800ad54 <_printf_i+0x144>
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	6861      	ldr	r1, [r4, #4]
 800ad46:	4299      	cmp	r1, r3
 800ad48:	bfde      	ittt	le
 800ad4a:	2330      	movle	r3, #48	@ 0x30
 800ad4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad50:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad54:	1b92      	subs	r2, r2, r6
 800ad56:	6122      	str	r2, [r4, #16]
 800ad58:	f8cd a000 	str.w	sl, [sp]
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	aa03      	add	r2, sp, #12
 800ad60:	4621      	mov	r1, r4
 800ad62:	4640      	mov	r0, r8
 800ad64:	f7ff fee6 	bl	800ab34 <_printf_common>
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d14a      	bne.n	800ae02 <_printf_i+0x1f2>
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	b004      	add	sp, #16
 800ad72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad76:	6823      	ldr	r3, [r4, #0]
 800ad78:	f043 0320 	orr.w	r3, r3, #32
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	4833      	ldr	r0, [pc, #204]	@ (800ae4c <_printf_i+0x23c>)
 800ad80:	2778      	movs	r7, #120	@ 0x78
 800ad82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	6831      	ldr	r1, [r6, #0]
 800ad8a:	061f      	lsls	r7, r3, #24
 800ad8c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad90:	d402      	bmi.n	800ad98 <_printf_i+0x188>
 800ad92:	065f      	lsls	r7, r3, #25
 800ad94:	bf48      	it	mi
 800ad96:	b2ad      	uxthmi	r5, r5
 800ad98:	6031      	str	r1, [r6, #0]
 800ad9a:	07d9      	lsls	r1, r3, #31
 800ad9c:	bf44      	itt	mi
 800ad9e:	f043 0320 	orrmi.w	r3, r3, #32
 800ada2:	6023      	strmi	r3, [r4, #0]
 800ada4:	b11d      	cbz	r5, 800adae <_printf_i+0x19e>
 800ada6:	2310      	movs	r3, #16
 800ada8:	e7ac      	b.n	800ad04 <_printf_i+0xf4>
 800adaa:	4827      	ldr	r0, [pc, #156]	@ (800ae48 <_printf_i+0x238>)
 800adac:	e7e9      	b.n	800ad82 <_printf_i+0x172>
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	f023 0320 	bic.w	r3, r3, #32
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	e7f6      	b.n	800ada6 <_printf_i+0x196>
 800adb8:	4616      	mov	r6, r2
 800adba:	e7bd      	b.n	800ad38 <_printf_i+0x128>
 800adbc:	6833      	ldr	r3, [r6, #0]
 800adbe:	6825      	ldr	r5, [r4, #0]
 800adc0:	6961      	ldr	r1, [r4, #20]
 800adc2:	1d18      	adds	r0, r3, #4
 800adc4:	6030      	str	r0, [r6, #0]
 800adc6:	062e      	lsls	r6, r5, #24
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	d501      	bpl.n	800add0 <_printf_i+0x1c0>
 800adcc:	6019      	str	r1, [r3, #0]
 800adce:	e002      	b.n	800add6 <_printf_i+0x1c6>
 800add0:	0668      	lsls	r0, r5, #25
 800add2:	d5fb      	bpl.n	800adcc <_printf_i+0x1bc>
 800add4:	8019      	strh	r1, [r3, #0]
 800add6:	2300      	movs	r3, #0
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	4616      	mov	r6, r2
 800addc:	e7bc      	b.n	800ad58 <_printf_i+0x148>
 800adde:	6833      	ldr	r3, [r6, #0]
 800ade0:	1d1a      	adds	r2, r3, #4
 800ade2:	6032      	str	r2, [r6, #0]
 800ade4:	681e      	ldr	r6, [r3, #0]
 800ade6:	6862      	ldr	r2, [r4, #4]
 800ade8:	2100      	movs	r1, #0
 800adea:	4630      	mov	r0, r6
 800adec:	f7f5 fa10 	bl	8000210 <memchr>
 800adf0:	b108      	cbz	r0, 800adf6 <_printf_i+0x1e6>
 800adf2:	1b80      	subs	r0, r0, r6
 800adf4:	6060      	str	r0, [r4, #4]
 800adf6:	6863      	ldr	r3, [r4, #4]
 800adf8:	6123      	str	r3, [r4, #16]
 800adfa:	2300      	movs	r3, #0
 800adfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae00:	e7aa      	b.n	800ad58 <_printf_i+0x148>
 800ae02:	6923      	ldr	r3, [r4, #16]
 800ae04:	4632      	mov	r2, r6
 800ae06:	4649      	mov	r1, r9
 800ae08:	4640      	mov	r0, r8
 800ae0a:	47d0      	blx	sl
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	d0ad      	beq.n	800ad6c <_printf_i+0x15c>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	079b      	lsls	r3, r3, #30
 800ae14:	d413      	bmi.n	800ae3e <_printf_i+0x22e>
 800ae16:	68e0      	ldr	r0, [r4, #12]
 800ae18:	9b03      	ldr	r3, [sp, #12]
 800ae1a:	4298      	cmp	r0, r3
 800ae1c:	bfb8      	it	lt
 800ae1e:	4618      	movlt	r0, r3
 800ae20:	e7a6      	b.n	800ad70 <_printf_i+0x160>
 800ae22:	2301      	movs	r3, #1
 800ae24:	4632      	mov	r2, r6
 800ae26:	4649      	mov	r1, r9
 800ae28:	4640      	mov	r0, r8
 800ae2a:	47d0      	blx	sl
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d09d      	beq.n	800ad6c <_printf_i+0x15c>
 800ae30:	3501      	adds	r5, #1
 800ae32:	68e3      	ldr	r3, [r4, #12]
 800ae34:	9903      	ldr	r1, [sp, #12]
 800ae36:	1a5b      	subs	r3, r3, r1
 800ae38:	42ab      	cmp	r3, r5
 800ae3a:	dcf2      	bgt.n	800ae22 <_printf_i+0x212>
 800ae3c:	e7eb      	b.n	800ae16 <_printf_i+0x206>
 800ae3e:	2500      	movs	r5, #0
 800ae40:	f104 0619 	add.w	r6, r4, #25
 800ae44:	e7f5      	b.n	800ae32 <_printf_i+0x222>
 800ae46:	bf00      	nop
 800ae48:	0800b97f 	.word	0x0800b97f
 800ae4c:	0800b990 	.word	0x0800b990

0800ae50 <__sflush_r>:
 800ae50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	0716      	lsls	r6, r2, #28
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	d454      	bmi.n	800af0a <__sflush_r+0xba>
 800ae60:	684b      	ldr	r3, [r1, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dc02      	bgt.n	800ae6c <__sflush_r+0x1c>
 800ae66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	dd48      	ble.n	800aefe <__sflush_r+0xae>
 800ae6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae6e:	2e00      	cmp	r6, #0
 800ae70:	d045      	beq.n	800aefe <__sflush_r+0xae>
 800ae72:	2300      	movs	r3, #0
 800ae74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae78:	682f      	ldr	r7, [r5, #0]
 800ae7a:	6a21      	ldr	r1, [r4, #32]
 800ae7c:	602b      	str	r3, [r5, #0]
 800ae7e:	d030      	beq.n	800aee2 <__sflush_r+0x92>
 800ae80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae82:	89a3      	ldrh	r3, [r4, #12]
 800ae84:	0759      	lsls	r1, r3, #29
 800ae86:	d505      	bpl.n	800ae94 <__sflush_r+0x44>
 800ae88:	6863      	ldr	r3, [r4, #4]
 800ae8a:	1ad2      	subs	r2, r2, r3
 800ae8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae8e:	b10b      	cbz	r3, 800ae94 <__sflush_r+0x44>
 800ae90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae92:	1ad2      	subs	r2, r2, r3
 800ae94:	2300      	movs	r3, #0
 800ae96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae98:	6a21      	ldr	r1, [r4, #32]
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b0      	blx	r6
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	d106      	bne.n	800aeb2 <__sflush_r+0x62>
 800aea4:	6829      	ldr	r1, [r5, #0]
 800aea6:	291d      	cmp	r1, #29
 800aea8:	d82b      	bhi.n	800af02 <__sflush_r+0xb2>
 800aeaa:	4a2a      	ldr	r2, [pc, #168]	@ (800af54 <__sflush_r+0x104>)
 800aeac:	410a      	asrs	r2, r1
 800aeae:	07d6      	lsls	r6, r2, #31
 800aeb0:	d427      	bmi.n	800af02 <__sflush_r+0xb2>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	6062      	str	r2, [r4, #4]
 800aeb6:	04d9      	lsls	r1, r3, #19
 800aeb8:	6922      	ldr	r2, [r4, #16]
 800aeba:	6022      	str	r2, [r4, #0]
 800aebc:	d504      	bpl.n	800aec8 <__sflush_r+0x78>
 800aebe:	1c42      	adds	r2, r0, #1
 800aec0:	d101      	bne.n	800aec6 <__sflush_r+0x76>
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	b903      	cbnz	r3, 800aec8 <__sflush_r+0x78>
 800aec6:	6560      	str	r0, [r4, #84]	@ 0x54
 800aec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeca:	602f      	str	r7, [r5, #0]
 800aecc:	b1b9      	cbz	r1, 800aefe <__sflush_r+0xae>
 800aece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aed2:	4299      	cmp	r1, r3
 800aed4:	d002      	beq.n	800aedc <__sflush_r+0x8c>
 800aed6:	4628      	mov	r0, r5
 800aed8:	f7ff fbd4 	bl	800a684 <_free_r>
 800aedc:	2300      	movs	r3, #0
 800aede:	6363      	str	r3, [r4, #52]	@ 0x34
 800aee0:	e00d      	b.n	800aefe <__sflush_r+0xae>
 800aee2:	2301      	movs	r3, #1
 800aee4:	4628      	mov	r0, r5
 800aee6:	47b0      	blx	r6
 800aee8:	4602      	mov	r2, r0
 800aeea:	1c50      	adds	r0, r2, #1
 800aeec:	d1c9      	bne.n	800ae82 <__sflush_r+0x32>
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d0c6      	beq.n	800ae82 <__sflush_r+0x32>
 800aef4:	2b1d      	cmp	r3, #29
 800aef6:	d001      	beq.n	800aefc <__sflush_r+0xac>
 800aef8:	2b16      	cmp	r3, #22
 800aefa:	d11e      	bne.n	800af3a <__sflush_r+0xea>
 800aefc:	602f      	str	r7, [r5, #0]
 800aefe:	2000      	movs	r0, #0
 800af00:	e022      	b.n	800af48 <__sflush_r+0xf8>
 800af02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af06:	b21b      	sxth	r3, r3
 800af08:	e01b      	b.n	800af42 <__sflush_r+0xf2>
 800af0a:	690f      	ldr	r7, [r1, #16]
 800af0c:	2f00      	cmp	r7, #0
 800af0e:	d0f6      	beq.n	800aefe <__sflush_r+0xae>
 800af10:	0793      	lsls	r3, r2, #30
 800af12:	680e      	ldr	r6, [r1, #0]
 800af14:	bf08      	it	eq
 800af16:	694b      	ldreq	r3, [r1, #20]
 800af18:	600f      	str	r7, [r1, #0]
 800af1a:	bf18      	it	ne
 800af1c:	2300      	movne	r3, #0
 800af1e:	eba6 0807 	sub.w	r8, r6, r7
 800af22:	608b      	str	r3, [r1, #8]
 800af24:	f1b8 0f00 	cmp.w	r8, #0
 800af28:	dde9      	ble.n	800aefe <__sflush_r+0xae>
 800af2a:	6a21      	ldr	r1, [r4, #32]
 800af2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af2e:	4643      	mov	r3, r8
 800af30:	463a      	mov	r2, r7
 800af32:	4628      	mov	r0, r5
 800af34:	47b0      	blx	r6
 800af36:	2800      	cmp	r0, #0
 800af38:	dc08      	bgt.n	800af4c <__sflush_r+0xfc>
 800af3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af4c:	4407      	add	r7, r0
 800af4e:	eba8 0800 	sub.w	r8, r8, r0
 800af52:	e7e7      	b.n	800af24 <__sflush_r+0xd4>
 800af54:	dfbffffe 	.word	0xdfbffffe

0800af58 <_fflush_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	690b      	ldr	r3, [r1, #16]
 800af5c:	4605      	mov	r5, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	b913      	cbnz	r3, 800af68 <_fflush_r+0x10>
 800af62:	2500      	movs	r5, #0
 800af64:	4628      	mov	r0, r5
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	b118      	cbz	r0, 800af72 <_fflush_r+0x1a>
 800af6a:	6a03      	ldr	r3, [r0, #32]
 800af6c:	b90b      	cbnz	r3, 800af72 <_fflush_r+0x1a>
 800af6e:	f7ff f9d3 	bl	800a318 <__sinit>
 800af72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0f3      	beq.n	800af62 <_fflush_r+0xa>
 800af7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af7c:	07d0      	lsls	r0, r2, #31
 800af7e:	d404      	bmi.n	800af8a <_fflush_r+0x32>
 800af80:	0599      	lsls	r1, r3, #22
 800af82:	d402      	bmi.n	800af8a <_fflush_r+0x32>
 800af84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af86:	f7ff fb5c 	bl	800a642 <__retarget_lock_acquire_recursive>
 800af8a:	4628      	mov	r0, r5
 800af8c:	4621      	mov	r1, r4
 800af8e:	f7ff ff5f 	bl	800ae50 <__sflush_r>
 800af92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af94:	07da      	lsls	r2, r3, #31
 800af96:	4605      	mov	r5, r0
 800af98:	d4e4      	bmi.n	800af64 <_fflush_r+0xc>
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	059b      	lsls	r3, r3, #22
 800af9e:	d4e1      	bmi.n	800af64 <_fflush_r+0xc>
 800afa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afa2:	f7ff fb4f 	bl	800a644 <__retarget_lock_release_recursive>
 800afa6:	e7dd      	b.n	800af64 <_fflush_r+0xc>

0800afa8 <fiprintf>:
 800afa8:	b40e      	push	{r1, r2, r3}
 800afaa:	b503      	push	{r0, r1, lr}
 800afac:	4601      	mov	r1, r0
 800afae:	ab03      	add	r3, sp, #12
 800afb0:	4805      	ldr	r0, [pc, #20]	@ (800afc8 <fiprintf+0x20>)
 800afb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb6:	6800      	ldr	r0, [r0, #0]
 800afb8:	9301      	str	r3, [sp, #4]
 800afba:	f000 f89d 	bl	800b0f8 <_vfiprintf_r>
 800afbe:	b002      	add	sp, #8
 800afc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800afc4:	b003      	add	sp, #12
 800afc6:	4770      	bx	lr
 800afc8:	20000110 	.word	0x20000110

0800afcc <memmove>:
 800afcc:	4288      	cmp	r0, r1
 800afce:	b510      	push	{r4, lr}
 800afd0:	eb01 0402 	add.w	r4, r1, r2
 800afd4:	d902      	bls.n	800afdc <memmove+0x10>
 800afd6:	4284      	cmp	r4, r0
 800afd8:	4623      	mov	r3, r4
 800afda:	d807      	bhi.n	800afec <memmove+0x20>
 800afdc:	1e43      	subs	r3, r0, #1
 800afde:	42a1      	cmp	r1, r4
 800afe0:	d008      	beq.n	800aff4 <memmove+0x28>
 800afe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afea:	e7f8      	b.n	800afde <memmove+0x12>
 800afec:	4402      	add	r2, r0
 800afee:	4601      	mov	r1, r0
 800aff0:	428a      	cmp	r2, r1
 800aff2:	d100      	bne.n	800aff6 <memmove+0x2a>
 800aff4:	bd10      	pop	{r4, pc}
 800aff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800affa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800affe:	e7f7      	b.n	800aff0 <memmove+0x24>

0800b000 <_sbrk_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4d06      	ldr	r5, [pc, #24]	@ (800b01c <_sbrk_r+0x1c>)
 800b004:	2300      	movs	r3, #0
 800b006:	4604      	mov	r4, r0
 800b008:	4608      	mov	r0, r1
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	f7f6 fe38 	bl	8001c80 <_sbrk>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_sbrk_r+0x1a>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_sbrk_r+0x1a>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	20002018 	.word	0x20002018

0800b020 <memcpy>:
 800b020:	440a      	add	r2, r1
 800b022:	4291      	cmp	r1, r2
 800b024:	f100 33ff 	add.w	r3, r0, #4294967295
 800b028:	d100      	bne.n	800b02c <memcpy+0xc>
 800b02a:	4770      	bx	lr
 800b02c:	b510      	push	{r4, lr}
 800b02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b036:	4291      	cmp	r1, r2
 800b038:	d1f9      	bne.n	800b02e <memcpy+0xe>
 800b03a:	bd10      	pop	{r4, pc}

0800b03c <abort>:
 800b03c:	b508      	push	{r3, lr}
 800b03e:	2006      	movs	r0, #6
 800b040:	f000 fa2e 	bl	800b4a0 <raise>
 800b044:	2001      	movs	r0, #1
 800b046:	f7f6 fda3 	bl	8001b90 <_exit>

0800b04a <_realloc_r>:
 800b04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	4680      	mov	r8, r0
 800b050:	4615      	mov	r5, r2
 800b052:	460c      	mov	r4, r1
 800b054:	b921      	cbnz	r1, 800b060 <_realloc_r+0x16>
 800b056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b05a:	4611      	mov	r1, r2
 800b05c:	f7ff bb86 	b.w	800a76c <_malloc_r>
 800b060:	b92a      	cbnz	r2, 800b06e <_realloc_r+0x24>
 800b062:	f7ff fb0f 	bl	800a684 <_free_r>
 800b066:	2400      	movs	r4, #0
 800b068:	4620      	mov	r0, r4
 800b06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06e:	f000 fa33 	bl	800b4d8 <_malloc_usable_size_r>
 800b072:	4285      	cmp	r5, r0
 800b074:	4606      	mov	r6, r0
 800b076:	d802      	bhi.n	800b07e <_realloc_r+0x34>
 800b078:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b07c:	d8f4      	bhi.n	800b068 <_realloc_r+0x1e>
 800b07e:	4629      	mov	r1, r5
 800b080:	4640      	mov	r0, r8
 800b082:	f7ff fb73 	bl	800a76c <_malloc_r>
 800b086:	4607      	mov	r7, r0
 800b088:	2800      	cmp	r0, #0
 800b08a:	d0ec      	beq.n	800b066 <_realloc_r+0x1c>
 800b08c:	42b5      	cmp	r5, r6
 800b08e:	462a      	mov	r2, r5
 800b090:	4621      	mov	r1, r4
 800b092:	bf28      	it	cs
 800b094:	4632      	movcs	r2, r6
 800b096:	f7ff ffc3 	bl	800b020 <memcpy>
 800b09a:	4621      	mov	r1, r4
 800b09c:	4640      	mov	r0, r8
 800b09e:	f7ff faf1 	bl	800a684 <_free_r>
 800b0a2:	463c      	mov	r4, r7
 800b0a4:	e7e0      	b.n	800b068 <_realloc_r+0x1e>

0800b0a6 <__sfputc_r>:
 800b0a6:	6893      	ldr	r3, [r2, #8]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	b410      	push	{r4}
 800b0ae:	6093      	str	r3, [r2, #8]
 800b0b0:	da08      	bge.n	800b0c4 <__sfputc_r+0x1e>
 800b0b2:	6994      	ldr	r4, [r2, #24]
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	db01      	blt.n	800b0bc <__sfputc_r+0x16>
 800b0b8:	290a      	cmp	r1, #10
 800b0ba:	d103      	bne.n	800b0c4 <__sfputc_r+0x1e>
 800b0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0c0:	f000 b932 	b.w	800b328 <__swbuf_r>
 800b0c4:	6813      	ldr	r3, [r2, #0]
 800b0c6:	1c58      	adds	r0, r3, #1
 800b0c8:	6010      	str	r0, [r2, #0]
 800b0ca:	7019      	strb	r1, [r3, #0]
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <__sfputs_r>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	460f      	mov	r7, r1
 800b0da:	4614      	mov	r4, r2
 800b0dc:	18d5      	adds	r5, r2, r3
 800b0de:	42ac      	cmp	r4, r5
 800b0e0:	d101      	bne.n	800b0e6 <__sfputs_r+0x12>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e007      	b.n	800b0f6 <__sfputs_r+0x22>
 800b0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ea:	463a      	mov	r2, r7
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff ffda 	bl	800b0a6 <__sfputc_r>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d1f3      	bne.n	800b0de <__sfputs_r+0xa>
 800b0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0f8 <_vfiprintf_r>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	460d      	mov	r5, r1
 800b0fe:	b09d      	sub	sp, #116	@ 0x74
 800b100:	4614      	mov	r4, r2
 800b102:	4698      	mov	r8, r3
 800b104:	4606      	mov	r6, r0
 800b106:	b118      	cbz	r0, 800b110 <_vfiprintf_r+0x18>
 800b108:	6a03      	ldr	r3, [r0, #32]
 800b10a:	b90b      	cbnz	r3, 800b110 <_vfiprintf_r+0x18>
 800b10c:	f7ff f904 	bl	800a318 <__sinit>
 800b110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b112:	07d9      	lsls	r1, r3, #31
 800b114:	d405      	bmi.n	800b122 <_vfiprintf_r+0x2a>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	059a      	lsls	r2, r3, #22
 800b11a:	d402      	bmi.n	800b122 <_vfiprintf_r+0x2a>
 800b11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b11e:	f7ff fa90 	bl	800a642 <__retarget_lock_acquire_recursive>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	071b      	lsls	r3, r3, #28
 800b126:	d501      	bpl.n	800b12c <_vfiprintf_r+0x34>
 800b128:	692b      	ldr	r3, [r5, #16]
 800b12a:	b99b      	cbnz	r3, 800b154 <_vfiprintf_r+0x5c>
 800b12c:	4629      	mov	r1, r5
 800b12e:	4630      	mov	r0, r6
 800b130:	f000 f938 	bl	800b3a4 <__swsetup_r>
 800b134:	b170      	cbz	r0, 800b154 <_vfiprintf_r+0x5c>
 800b136:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b138:	07dc      	lsls	r4, r3, #31
 800b13a:	d504      	bpl.n	800b146 <_vfiprintf_r+0x4e>
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
 800b140:	b01d      	add	sp, #116	@ 0x74
 800b142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	89ab      	ldrh	r3, [r5, #12]
 800b148:	0598      	lsls	r0, r3, #22
 800b14a:	d4f7      	bmi.n	800b13c <_vfiprintf_r+0x44>
 800b14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b14e:	f7ff fa79 	bl	800a644 <__retarget_lock_release_recursive>
 800b152:	e7f3      	b.n	800b13c <_vfiprintf_r+0x44>
 800b154:	2300      	movs	r3, #0
 800b156:	9309      	str	r3, [sp, #36]	@ 0x24
 800b158:	2320      	movs	r3, #32
 800b15a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b15e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b162:	2330      	movs	r3, #48	@ 0x30
 800b164:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b314 <_vfiprintf_r+0x21c>
 800b168:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b16c:	f04f 0901 	mov.w	r9, #1
 800b170:	4623      	mov	r3, r4
 800b172:	469a      	mov	sl, r3
 800b174:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b178:	b10a      	cbz	r2, 800b17e <_vfiprintf_r+0x86>
 800b17a:	2a25      	cmp	r2, #37	@ 0x25
 800b17c:	d1f9      	bne.n	800b172 <_vfiprintf_r+0x7a>
 800b17e:	ebba 0b04 	subs.w	fp, sl, r4
 800b182:	d00b      	beq.n	800b19c <_vfiprintf_r+0xa4>
 800b184:	465b      	mov	r3, fp
 800b186:	4622      	mov	r2, r4
 800b188:	4629      	mov	r1, r5
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7ff ffa2 	bl	800b0d4 <__sfputs_r>
 800b190:	3001      	adds	r0, #1
 800b192:	f000 80a7 	beq.w	800b2e4 <_vfiprintf_r+0x1ec>
 800b196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b198:	445a      	add	r2, fp
 800b19a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b19c:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 809f 	beq.w	800b2e4 <_vfiprintf_r+0x1ec>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1b0:	f10a 0a01 	add.w	sl, sl, #1
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	9307      	str	r3, [sp, #28]
 800b1b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1be:	4654      	mov	r4, sl
 800b1c0:	2205      	movs	r2, #5
 800b1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c6:	4853      	ldr	r0, [pc, #332]	@ (800b314 <_vfiprintf_r+0x21c>)
 800b1c8:	f7f5 f822 	bl	8000210 <memchr>
 800b1cc:	9a04      	ldr	r2, [sp, #16]
 800b1ce:	b9d8      	cbnz	r0, 800b208 <_vfiprintf_r+0x110>
 800b1d0:	06d1      	lsls	r1, r2, #27
 800b1d2:	bf44      	itt	mi
 800b1d4:	2320      	movmi	r3, #32
 800b1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1da:	0713      	lsls	r3, r2, #28
 800b1dc:	bf44      	itt	mi
 800b1de:	232b      	movmi	r3, #43	@ 0x2b
 800b1e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ea:	d015      	beq.n	800b218 <_vfiprintf_r+0x120>
 800b1ec:	9a07      	ldr	r2, [sp, #28]
 800b1ee:	4654      	mov	r4, sl
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f04f 0c0a 	mov.w	ip, #10
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1fc:	3b30      	subs	r3, #48	@ 0x30
 800b1fe:	2b09      	cmp	r3, #9
 800b200:	d94b      	bls.n	800b29a <_vfiprintf_r+0x1a2>
 800b202:	b1b0      	cbz	r0, 800b232 <_vfiprintf_r+0x13a>
 800b204:	9207      	str	r2, [sp, #28]
 800b206:	e014      	b.n	800b232 <_vfiprintf_r+0x13a>
 800b208:	eba0 0308 	sub.w	r3, r0, r8
 800b20c:	fa09 f303 	lsl.w	r3, r9, r3
 800b210:	4313      	orrs	r3, r2
 800b212:	9304      	str	r3, [sp, #16]
 800b214:	46a2      	mov	sl, r4
 800b216:	e7d2      	b.n	800b1be <_vfiprintf_r+0xc6>
 800b218:	9b03      	ldr	r3, [sp, #12]
 800b21a:	1d19      	adds	r1, r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	9103      	str	r1, [sp, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	bfbb      	ittet	lt
 800b224:	425b      	neglt	r3, r3
 800b226:	f042 0202 	orrlt.w	r2, r2, #2
 800b22a:	9307      	strge	r3, [sp, #28]
 800b22c:	9307      	strlt	r3, [sp, #28]
 800b22e:	bfb8      	it	lt
 800b230:	9204      	strlt	r2, [sp, #16]
 800b232:	7823      	ldrb	r3, [r4, #0]
 800b234:	2b2e      	cmp	r3, #46	@ 0x2e
 800b236:	d10a      	bne.n	800b24e <_vfiprintf_r+0x156>
 800b238:	7863      	ldrb	r3, [r4, #1]
 800b23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b23c:	d132      	bne.n	800b2a4 <_vfiprintf_r+0x1ac>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	1d1a      	adds	r2, r3, #4
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	9203      	str	r2, [sp, #12]
 800b246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b24a:	3402      	adds	r4, #2
 800b24c:	9305      	str	r3, [sp, #20]
 800b24e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b324 <_vfiprintf_r+0x22c>
 800b252:	7821      	ldrb	r1, [r4, #0]
 800b254:	2203      	movs	r2, #3
 800b256:	4650      	mov	r0, sl
 800b258:	f7f4 ffda 	bl	8000210 <memchr>
 800b25c:	b138      	cbz	r0, 800b26e <_vfiprintf_r+0x176>
 800b25e:	9b04      	ldr	r3, [sp, #16]
 800b260:	eba0 000a 	sub.w	r0, r0, sl
 800b264:	2240      	movs	r2, #64	@ 0x40
 800b266:	4082      	lsls	r2, r0
 800b268:	4313      	orrs	r3, r2
 800b26a:	3401      	adds	r4, #1
 800b26c:	9304      	str	r3, [sp, #16]
 800b26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b272:	4829      	ldr	r0, [pc, #164]	@ (800b318 <_vfiprintf_r+0x220>)
 800b274:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b278:	2206      	movs	r2, #6
 800b27a:	f7f4 ffc9 	bl	8000210 <memchr>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d03f      	beq.n	800b302 <_vfiprintf_r+0x20a>
 800b282:	4b26      	ldr	r3, [pc, #152]	@ (800b31c <_vfiprintf_r+0x224>)
 800b284:	bb1b      	cbnz	r3, 800b2ce <_vfiprintf_r+0x1d6>
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	3307      	adds	r3, #7
 800b28a:	f023 0307 	bic.w	r3, r3, #7
 800b28e:	3308      	adds	r3, #8
 800b290:	9303      	str	r3, [sp, #12]
 800b292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b294:	443b      	add	r3, r7
 800b296:	9309      	str	r3, [sp, #36]	@ 0x24
 800b298:	e76a      	b.n	800b170 <_vfiprintf_r+0x78>
 800b29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b29e:	460c      	mov	r4, r1
 800b2a0:	2001      	movs	r0, #1
 800b2a2:	e7a8      	b.n	800b1f6 <_vfiprintf_r+0xfe>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	3401      	adds	r4, #1
 800b2a8:	9305      	str	r3, [sp, #20]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	f04f 0c0a 	mov.w	ip, #10
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2b6:	3a30      	subs	r2, #48	@ 0x30
 800b2b8:	2a09      	cmp	r2, #9
 800b2ba:	d903      	bls.n	800b2c4 <_vfiprintf_r+0x1cc>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d0c6      	beq.n	800b24e <_vfiprintf_r+0x156>
 800b2c0:	9105      	str	r1, [sp, #20]
 800b2c2:	e7c4      	b.n	800b24e <_vfiprintf_r+0x156>
 800b2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e7f0      	b.n	800b2b0 <_vfiprintf_r+0x1b8>
 800b2ce:	ab03      	add	r3, sp, #12
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	462a      	mov	r2, r5
 800b2d4:	4b12      	ldr	r3, [pc, #72]	@ (800b320 <_vfiprintf_r+0x228>)
 800b2d6:	a904      	add	r1, sp, #16
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f3af 8000 	nop.w
 800b2de:	4607      	mov	r7, r0
 800b2e0:	1c78      	adds	r0, r7, #1
 800b2e2:	d1d6      	bne.n	800b292 <_vfiprintf_r+0x19a>
 800b2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2e6:	07d9      	lsls	r1, r3, #31
 800b2e8:	d405      	bmi.n	800b2f6 <_vfiprintf_r+0x1fe>
 800b2ea:	89ab      	ldrh	r3, [r5, #12]
 800b2ec:	059a      	lsls	r2, r3, #22
 800b2ee:	d402      	bmi.n	800b2f6 <_vfiprintf_r+0x1fe>
 800b2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2f2:	f7ff f9a7 	bl	800a644 <__retarget_lock_release_recursive>
 800b2f6:	89ab      	ldrh	r3, [r5, #12]
 800b2f8:	065b      	lsls	r3, r3, #25
 800b2fa:	f53f af1f 	bmi.w	800b13c <_vfiprintf_r+0x44>
 800b2fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b300:	e71e      	b.n	800b140 <_vfiprintf_r+0x48>
 800b302:	ab03      	add	r3, sp, #12
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	462a      	mov	r2, r5
 800b308:	4b05      	ldr	r3, [pc, #20]	@ (800b320 <_vfiprintf_r+0x228>)
 800b30a:	a904      	add	r1, sp, #16
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff fc7f 	bl	800ac10 <_printf_i>
 800b312:	e7e4      	b.n	800b2de <_vfiprintf_r+0x1e6>
 800b314:	0800b96e 	.word	0x0800b96e
 800b318:	0800b978 	.word	0x0800b978
 800b31c:	00000000 	.word	0x00000000
 800b320:	0800b0d5 	.word	0x0800b0d5
 800b324:	0800b974 	.word	0x0800b974

0800b328 <__swbuf_r>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	460e      	mov	r6, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	4605      	mov	r5, r0
 800b330:	b118      	cbz	r0, 800b33a <__swbuf_r+0x12>
 800b332:	6a03      	ldr	r3, [r0, #32]
 800b334:	b90b      	cbnz	r3, 800b33a <__swbuf_r+0x12>
 800b336:	f7fe ffef 	bl	800a318 <__sinit>
 800b33a:	69a3      	ldr	r3, [r4, #24]
 800b33c:	60a3      	str	r3, [r4, #8]
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	071a      	lsls	r2, r3, #28
 800b342:	d501      	bpl.n	800b348 <__swbuf_r+0x20>
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	b943      	cbnz	r3, 800b35a <__swbuf_r+0x32>
 800b348:	4621      	mov	r1, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	f000 f82a 	bl	800b3a4 <__swsetup_r>
 800b350:	b118      	cbz	r0, 800b35a <__swbuf_r+0x32>
 800b352:	f04f 37ff 	mov.w	r7, #4294967295
 800b356:	4638      	mov	r0, r7
 800b358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	6922      	ldr	r2, [r4, #16]
 800b35e:	1a98      	subs	r0, r3, r2
 800b360:	6963      	ldr	r3, [r4, #20]
 800b362:	b2f6      	uxtb	r6, r6
 800b364:	4283      	cmp	r3, r0
 800b366:	4637      	mov	r7, r6
 800b368:	dc05      	bgt.n	800b376 <__swbuf_r+0x4e>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4628      	mov	r0, r5
 800b36e:	f7ff fdf3 	bl	800af58 <_fflush_r>
 800b372:	2800      	cmp	r0, #0
 800b374:	d1ed      	bne.n	800b352 <__swbuf_r+0x2a>
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	3b01      	subs	r3, #1
 800b37a:	60a3      	str	r3, [r4, #8]
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	6022      	str	r2, [r4, #0]
 800b382:	701e      	strb	r6, [r3, #0]
 800b384:	6962      	ldr	r2, [r4, #20]
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	429a      	cmp	r2, r3
 800b38a:	d004      	beq.n	800b396 <__swbuf_r+0x6e>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	07db      	lsls	r3, r3, #31
 800b390:	d5e1      	bpl.n	800b356 <__swbuf_r+0x2e>
 800b392:	2e0a      	cmp	r6, #10
 800b394:	d1df      	bne.n	800b356 <__swbuf_r+0x2e>
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f7ff fddd 	bl	800af58 <_fflush_r>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d0d9      	beq.n	800b356 <__swbuf_r+0x2e>
 800b3a2:	e7d6      	b.n	800b352 <__swbuf_r+0x2a>

0800b3a4 <__swsetup_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	4b29      	ldr	r3, [pc, #164]	@ (800b44c <__swsetup_r+0xa8>)
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	b118      	cbz	r0, 800b3b8 <__swsetup_r+0x14>
 800b3b0:	6a03      	ldr	r3, [r0, #32]
 800b3b2:	b90b      	cbnz	r3, 800b3b8 <__swsetup_r+0x14>
 800b3b4:	f7fe ffb0 	bl	800a318 <__sinit>
 800b3b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3bc:	0719      	lsls	r1, r3, #28
 800b3be:	d422      	bmi.n	800b406 <__swsetup_r+0x62>
 800b3c0:	06da      	lsls	r2, r3, #27
 800b3c2:	d407      	bmi.n	800b3d4 <__swsetup_r+0x30>
 800b3c4:	2209      	movs	r2, #9
 800b3c6:	602a      	str	r2, [r5, #0]
 800b3c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3cc:	81a3      	strh	r3, [r4, #12]
 800b3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d2:	e033      	b.n	800b43c <__swsetup_r+0x98>
 800b3d4:	0758      	lsls	r0, r3, #29
 800b3d6:	d512      	bpl.n	800b3fe <__swsetup_r+0x5a>
 800b3d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3da:	b141      	cbz	r1, 800b3ee <__swsetup_r+0x4a>
 800b3dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3e0:	4299      	cmp	r1, r3
 800b3e2:	d002      	beq.n	800b3ea <__swsetup_r+0x46>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f7ff f94d 	bl	800a684 <_free_r>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	6063      	str	r3, [r4, #4]
 800b3fa:	6923      	ldr	r3, [r4, #16]
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	f043 0308 	orr.w	r3, r3, #8
 800b404:	81a3      	strh	r3, [r4, #12]
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	b94b      	cbnz	r3, 800b41e <__swsetup_r+0x7a>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b414:	d003      	beq.n	800b41e <__swsetup_r+0x7a>
 800b416:	4621      	mov	r1, r4
 800b418:	4628      	mov	r0, r5
 800b41a:	f000 f88b 	bl	800b534 <__smakebuf_r>
 800b41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b422:	f013 0201 	ands.w	r2, r3, #1
 800b426:	d00a      	beq.n	800b43e <__swsetup_r+0x9a>
 800b428:	2200      	movs	r2, #0
 800b42a:	60a2      	str	r2, [r4, #8]
 800b42c:	6962      	ldr	r2, [r4, #20]
 800b42e:	4252      	negs	r2, r2
 800b430:	61a2      	str	r2, [r4, #24]
 800b432:	6922      	ldr	r2, [r4, #16]
 800b434:	b942      	cbnz	r2, 800b448 <__swsetup_r+0xa4>
 800b436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b43a:	d1c5      	bne.n	800b3c8 <__swsetup_r+0x24>
 800b43c:	bd38      	pop	{r3, r4, r5, pc}
 800b43e:	0799      	lsls	r1, r3, #30
 800b440:	bf58      	it	pl
 800b442:	6962      	ldrpl	r2, [r4, #20]
 800b444:	60a2      	str	r2, [r4, #8]
 800b446:	e7f4      	b.n	800b432 <__swsetup_r+0x8e>
 800b448:	2000      	movs	r0, #0
 800b44a:	e7f7      	b.n	800b43c <__swsetup_r+0x98>
 800b44c:	20000110 	.word	0x20000110

0800b450 <_raise_r>:
 800b450:	291f      	cmp	r1, #31
 800b452:	b538      	push	{r3, r4, r5, lr}
 800b454:	4605      	mov	r5, r0
 800b456:	460c      	mov	r4, r1
 800b458:	d904      	bls.n	800b464 <_raise_r+0x14>
 800b45a:	2316      	movs	r3, #22
 800b45c:	6003      	str	r3, [r0, #0]
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b466:	b112      	cbz	r2, 800b46e <_raise_r+0x1e>
 800b468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b46c:	b94b      	cbnz	r3, 800b482 <_raise_r+0x32>
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 f830 	bl	800b4d4 <_getpid_r>
 800b474:	4622      	mov	r2, r4
 800b476:	4601      	mov	r1, r0
 800b478:	4628      	mov	r0, r5
 800b47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b47e:	f000 b817 	b.w	800b4b0 <_kill_r>
 800b482:	2b01      	cmp	r3, #1
 800b484:	d00a      	beq.n	800b49c <_raise_r+0x4c>
 800b486:	1c59      	adds	r1, r3, #1
 800b488:	d103      	bne.n	800b492 <_raise_r+0x42>
 800b48a:	2316      	movs	r3, #22
 800b48c:	6003      	str	r3, [r0, #0]
 800b48e:	2001      	movs	r0, #1
 800b490:	e7e7      	b.n	800b462 <_raise_r+0x12>
 800b492:	2100      	movs	r1, #0
 800b494:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b498:	4620      	mov	r0, r4
 800b49a:	4798      	blx	r3
 800b49c:	2000      	movs	r0, #0
 800b49e:	e7e0      	b.n	800b462 <_raise_r+0x12>

0800b4a0 <raise>:
 800b4a0:	4b02      	ldr	r3, [pc, #8]	@ (800b4ac <raise+0xc>)
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	6818      	ldr	r0, [r3, #0]
 800b4a6:	f7ff bfd3 	b.w	800b450 <_raise_r>
 800b4aa:	bf00      	nop
 800b4ac:	20000110 	.word	0x20000110

0800b4b0 <_kill_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4d07      	ldr	r5, [pc, #28]	@ (800b4d0 <_kill_r+0x20>)
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	f7f6 fb57 	bl	8001b70 <_kill>
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	d102      	bne.n	800b4cc <_kill_r+0x1c>
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	b103      	cbz	r3, 800b4cc <_kill_r+0x1c>
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	bd38      	pop	{r3, r4, r5, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20002018 	.word	0x20002018

0800b4d4 <_getpid_r>:
 800b4d4:	f7f6 bb44 	b.w	8001b60 <_getpid>

0800b4d8 <_malloc_usable_size_r>:
 800b4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4dc:	1f18      	subs	r0, r3, #4
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	bfbc      	itt	lt
 800b4e2:	580b      	ldrlt	r3, [r1, r0]
 800b4e4:	18c0      	addlt	r0, r0, r3
 800b4e6:	4770      	bx	lr

0800b4e8 <__swhatbuf_r>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f0:	2900      	cmp	r1, #0
 800b4f2:	b096      	sub	sp, #88	@ 0x58
 800b4f4:	4615      	mov	r5, r2
 800b4f6:	461e      	mov	r6, r3
 800b4f8:	da0d      	bge.n	800b516 <__swhatbuf_r+0x2e>
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b500:	f04f 0100 	mov.w	r1, #0
 800b504:	bf14      	ite	ne
 800b506:	2340      	movne	r3, #64	@ 0x40
 800b508:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b50c:	2000      	movs	r0, #0
 800b50e:	6031      	str	r1, [r6, #0]
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	b016      	add	sp, #88	@ 0x58
 800b514:	bd70      	pop	{r4, r5, r6, pc}
 800b516:	466a      	mov	r2, sp
 800b518:	f000 f848 	bl	800b5ac <_fstat_r>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	dbec      	blt.n	800b4fa <__swhatbuf_r+0x12>
 800b520:	9901      	ldr	r1, [sp, #4]
 800b522:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b526:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b52a:	4259      	negs	r1, r3
 800b52c:	4159      	adcs	r1, r3
 800b52e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b532:	e7eb      	b.n	800b50c <__swhatbuf_r+0x24>

0800b534 <__smakebuf_r>:
 800b534:	898b      	ldrh	r3, [r1, #12]
 800b536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b538:	079d      	lsls	r5, r3, #30
 800b53a:	4606      	mov	r6, r0
 800b53c:	460c      	mov	r4, r1
 800b53e:	d507      	bpl.n	800b550 <__smakebuf_r+0x1c>
 800b540:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	6123      	str	r3, [r4, #16]
 800b548:	2301      	movs	r3, #1
 800b54a:	6163      	str	r3, [r4, #20]
 800b54c:	b003      	add	sp, #12
 800b54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b550:	ab01      	add	r3, sp, #4
 800b552:	466a      	mov	r2, sp
 800b554:	f7ff ffc8 	bl	800b4e8 <__swhatbuf_r>
 800b558:	9f00      	ldr	r7, [sp, #0]
 800b55a:	4605      	mov	r5, r0
 800b55c:	4639      	mov	r1, r7
 800b55e:	4630      	mov	r0, r6
 800b560:	f7ff f904 	bl	800a76c <_malloc_r>
 800b564:	b948      	cbnz	r0, 800b57a <__smakebuf_r+0x46>
 800b566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b56a:	059a      	lsls	r2, r3, #22
 800b56c:	d4ee      	bmi.n	800b54c <__smakebuf_r+0x18>
 800b56e:	f023 0303 	bic.w	r3, r3, #3
 800b572:	f043 0302 	orr.w	r3, r3, #2
 800b576:	81a3      	strh	r3, [r4, #12]
 800b578:	e7e2      	b.n	800b540 <__smakebuf_r+0xc>
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	6020      	str	r0, [r4, #0]
 800b57e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b582:	81a3      	strh	r3, [r4, #12]
 800b584:	9b01      	ldr	r3, [sp, #4]
 800b586:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b58a:	b15b      	cbz	r3, 800b5a4 <__smakebuf_r+0x70>
 800b58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b590:	4630      	mov	r0, r6
 800b592:	f000 f81d 	bl	800b5d0 <_isatty_r>
 800b596:	b128      	cbz	r0, 800b5a4 <__smakebuf_r+0x70>
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	f023 0303 	bic.w	r3, r3, #3
 800b59e:	f043 0301 	orr.w	r3, r3, #1
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	431d      	orrs	r5, r3
 800b5a8:	81a5      	strh	r5, [r4, #12]
 800b5aa:	e7cf      	b.n	800b54c <__smakebuf_r+0x18>

0800b5ac <_fstat_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d07      	ldr	r5, [pc, #28]	@ (800b5cc <_fstat_r+0x20>)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	602b      	str	r3, [r5, #0]
 800b5ba:	f7f6 fb39 	bl	8001c30 <_fstat>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	d102      	bne.n	800b5c8 <_fstat_r+0x1c>
 800b5c2:	682b      	ldr	r3, [r5, #0]
 800b5c4:	b103      	cbz	r3, 800b5c8 <_fstat_r+0x1c>
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20002018 	.word	0x20002018

0800b5d0 <_isatty_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	4d06      	ldr	r5, [pc, #24]	@ (800b5ec <_isatty_r+0x1c>)
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	602b      	str	r3, [r5, #0]
 800b5dc:	f7f6 fb38 	bl	8001c50 <_isatty>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d102      	bne.n	800b5ea <_isatty_r+0x1a>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	b103      	cbz	r3, 800b5ea <_isatty_r+0x1a>
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	20002018 	.word	0x20002018

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr
